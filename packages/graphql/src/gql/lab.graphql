fragment comment on ModelComment {
  content
  createdAt
  id
  metric {
    ...metrics
  }
  images {
    filename
    url
    id
  }
  model {
    ...modelDetail
  }
  parent {
    ...parentComment
  }
  replies {
    ...reply
  }
  updatedAt
  user {
    avatarUrl
    id
    name
  }
}

fragment reply on ModelComment {
  content
  createdAt
  id
  images {
    filename
    url
    id
  }
  updatedAt
  user {
    avatarUrl
    id
    name
  }
  replies {
    content
    createdAt
    id
    images {
      id
      filename
      url
    }
    updatedAt
  }
  model {
    # dimension
    id
    # isScore
    isPublic
    #latestVersions
    name
    description
    triggerRemainingCount
    userId
  }
}

fragment parentComment on ModelComment {
  content
  createdAt
  id
  images {
    filename
    url
    id
  }
  updatedAt
  #  user {
  #    ...user
  #  }
}

fragment modelDetail on ModelDetail {
  # dimension
  id
  # isScore
  isPublic
  #latestVersions
  name
  description
  triggerRemainingCount
  userId
}

fragment user on SimpleUser {
  avatarUrl
  id
  name
}

fragment algorithm on Algorithm {
  ident
  name
}

fragment dataset on Dataset {
  ident
  items {
    firstIdent
    label
    shortCode
    level
    secondIdent
  }
  name
}
fragment datasetStatus on DatasetStatus {
  ident
  items {
    firstIdent
    label
    shortCode
    level
    logoUrl
    secondIdent
    triggerStatus
    triggerUpdatedAt
  }
  name
}
fragment metrics on ModelMetric {
  category
  defaultThreshold
  defaultWeight
  from
  id
  metricId
  ident
  name
  threshold
  weight
}

fragment modelVersion on ModelVersion {
  id
  version
  algorithm {
    ...algorithm
  }
  isScore
  metrics {
    ...metrics
  }
}

fragment labMember on LabMember {
  avatarUrl
  canExecute
  canRead
  canUpdate
  id
  isOwner
  joinedAt
  name
}

query datasetFuzzySearch($keyword: String!) {
  datasetFuzzySearch(keyword: $keyword) {
    firstIdent
    label
    level
    secondIdent
    shortCode
  }
}

query myLabModels($page: Int!, $per: Int!) {
  myModels(page: $page, per: $per) {
    count
    items {
      id
      description
      isPublic
      triggerRemainingCount
      latestVersions {
        id
        isScore
        version
        triggerStatus
        triggerUpdatedAt
        algorithm {
          ...algorithm
        }
        # dataset {
        #   ...dataset
        # }
        metrics {
          ...metrics
        }
      }
      defaultVersion {
        id
        isScore
        version
        algorithm {
          ...algorithm
        }
        # dataset {
        #   ...dataset
        # }
        metrics {
          ...metrics
        }
      }
      name
      userId
      permissions {
        canDestroy
        canExecute
        canRead
        canUpdate
      }
      parentLabModel {
        name
        id
        loginBinds {
          account
          avatarUrl
          nickname
        }
      }
    }
    page
    totalPage
  }
}

query labModelDetail($modelId: Int!) {
  labModelDetail(modelId: $modelId) {
    # dimension
    createdAt
    id
    description
    isPublic
    modelType
    triggerRemainingCount
    loginBinds {
      account
      avatarUrl
      nickname
      provider
    }
    latestVersions {
      id
      isScore
      version
      triggerStatus
      triggerUpdatedAt
      algorithm {
        ...algorithm
      }
      metrics {
        ...metrics
      }
    }
    defaultVersion {
      id
      isScore
      version
      algorithm {
        ...algorithm
      }
      metrics {
        ...metrics
      }
    }
    name
    userId
    permissions {
      canDestroy
      canExecute
      canRead
      canUpdate
    }
    parentLabModel {
      id
      name
      loginBinds {
        account
        avatarUrl
        nickname
      }
    }
    referenceCount
  }
}

query labModelVersion($modelId: Int!, $versionId: Int!) {
  labModelVersion(modelId: $modelId, versionId: $versionId) {
    id
    version
    algorithm {
      ...algorithm
    }
    metrics {
      ...metrics
    }
    isScore
    triggerStatus
    triggerUpdatedAt
  }
}

query dataSetList($type: String, $firstIdent: String, $secondIdent: String) {
  datasetOverview(
    type: $type
    firstIdent: $firstIdent
    secondIdent: $secondIdent
  )
}

query metricSetList {
  metricSetOverview {
    category
    defaultThreshold
    defaultWeight
    from
    id
    ident
    name
    threshold
    weight
  }
}

query labModelComments(
  $direction: String
  $modelId: Int!
  $modelMetricId: Int
  $page: Int
  $parentId: Int
  $per: Int
  $sort: String
  $versionId: Int
) {
  labModelComments(
    direction: $direction
    modelId: $modelId
    modelMetricId: $modelMetricId
    page: $page
    parentId: $parentId
    per: $per
    sort: $sort
    versionId: $versionId
  ) {
    count
    items {
      ...comment
    }
    page
    totalPage
  }
}

query labModelCommentDetail($modelId: Int!, $commentId: Int!) {
  labModelCommentDetail(modelId: $modelId, commentId: $commentId) {
    content
    createdAt
    id
    images {
      filename
      url
      id
    }
    model {
      ...modelDetail
    }
    parent {
      ...comment
    }
    replies {
      ...comment
    }
    updatedAt
    user {
      ...user
    }
  }
}

query memberOverview($modelId: Int, $page: Int, $per: Int) {
  memberOverview(modelId: $modelId, page: $page, per: $per) {
    count
    items {
      ...labMember
    }
    model {
      name
    }
    page
    totalPage
  }
}

query myMemberPermission($modelId: Int) {
  myMemberPermission(modelId: $modelId) {
    canDestroy
    canExecute
    canRead
    canUpdate
  }
}

query invitationOverview($modelId: Int, $page: Int, $per: Int) {
  invitationOverview(modelId: $modelId, page: $page, per: $per) {
    count
    items {
      canExecute
      canRead
      canUpdate
      email
      id
      sentAt
      status
    }
    page
    totalPage
  }
}

fragment simpleReport on SimpleReport {
  label
  level
  mainScore {
    dates
    tabIdent
    type
    values
  }
  shortCode
  type
}

query labModelPublicOverview(
  $sort: String
  $modelType: Int
  $direction: String
  $page: Int
  $per: Int
  $metricId: Int
) {
  labModelPublicOverview(
    sort: $sort
    direction: $direction
    modelType: $modelType
    page: $page
    per: $per
    metricId: $metricId
  ) {
    page
    totalPage
    count
    items {
      description
      createdAt
      loginBinds {
        account
        avatarUrl
        nickname
        provider
      }
      metrics {
        ...metrics
      }
      modelId
      modelName
      #      reports {
      #        ...simpleReport
      #      }
      version
      versionId
    }
  }
}

query labModelVersionReportDetail(
  $modelId: Int!
  $versionId: Int!
  $label: String
  $shortCode: String
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  labModelVersionReportDetail(
    modelId: $modelId
    versionId: $versionId
    label: $label
    shortCode: $shortCode
    beginDate: $beginDate
    endDate: $endDate
  ) {
    label
    level
    mainScore {
      dates
      tabIdent
      type
      values
    }
    panels {
      diagrams {
        dates
        tabIdent
        type
        values
      }
      metric {
        ...metrics
      }
    }
    shortCode
    type
  }
}

mutation createLabModel(
  $algorithm: String
  # $datasets: [DatasetRowTypeInput!]!
  $isScore: Boolean!
  $isPublic: Boolean!
  $metrics: [LabModelMetricInput!]!
  $name: String!
  $description: String!
) {
  createLabModel(
    input: {
      algorithm: $algorithm
      # datasets: $datasets
      isScore: $isScore
      isPublic: $isPublic
      metrics: $metrics
      name: $name
      description: $description
    }
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
  }
}

mutation createLabModelVersion(
  $algorithm: String
  $isScore: Boolean!
  $metrics: [LabModelMetricInput!]!
  $modelId: Int!
  $version: String!
) {
  createLabModelVersion(
    input: {
      algorithm: $algorithm
      isScore: $isScore
      metrics: $metrics
      modelId: $modelId
      version: $version
    }
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
  }
}

mutation updateLabModel(
  # $defaultVersionId: Int
  # $isScore: Boolean
  $isPublic: Boolean
  $modelId: Int!
  $name: String
  $description: String!
) {
  updateLabModel(
    input: {
      # defaultVersionId: $defaultVersionId
      # isScore: $isScore
      isPublic: $isPublic
      modelId: $modelId
      name: $name
      description: $description
    }
  ) {
    errors {
      message
      path
    }
    message
  }
}

mutation updateLabModelVersion(
  $modelId: Int!
  $versionId: Int!
  $version: String
  $algorithm: String
  $isScore: Boolean!
  # $datasets: [DatasetRowTypeInput!]!
  $metrics: [LabModelMetricInput!]!
) {
  updateLabModelVersion(
    input: {
      algorithm: $algorithm
      isScore: $isScore
      # datasets: $datasets
      metrics: $metrics
      modelId: $modelId
      versionId: $versionId
      version: $version
    }
  ) {
    errors {
      message
      path
    }
    message
  }
}

mutation deleteLabModel($id: Int!) {
  deleteLabModel(input: { id: $id }) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}

mutation deleteLabModelVersion($modelId: Int!, $versionId: Int!) {
  deleteLabModelVersion(input: { modelId: $modelId, versionId: $versionId }) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}

mutation deleteLabMember($modelId: Int!, $memberId: Int!) {
  deleteLabMember(input: { modelId: $modelId, memberId: $memberId }) {
    errors {
      message
      path
    }
    message
    status
  }
}

mutation sendMemberInvite(
  $modelId: Int!
  $emails: [String!]!
  $canUpdate: Boolean
  $canExecute: Boolean
) {
  sendMemberInvite(
    input: {
      modelId: $modelId
      emails: $emails
      canUpdate: $canUpdate
      canExecute: $canExecute
    }
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}

mutation updateMemberPermission(
  $modelId: Int!
  $memberId: Int!
  $canUpdate: Boolean
  $canExecute: Boolean
) {
  updateMemberPermission(
    input: {
      modelId: $modelId
      memberId: $memberId
      canUpdate: $canUpdate
      canExecute: $canExecute
    }
  ) {
    clientMutationId
    data {
      ...labMember
    }
    errors {
      message
      path
    }
    message
  }
}

mutation cancelMemberInvite($modelId: Int!, $invitationId: Int!) {
  cancelMemberInvite(
    input: { modelId: $modelId, invitationId: $invitationId }
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}

mutation deleteLabModelComment($modelId: Int!, $commentId: Int!) {
  deleteLabModelComment(input: { modelId: $modelId, commentId: $commentId }) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}

mutation createLabModelComment(
  $modelId: Int!
  $versionId: Int!
  $modelMetricId: Int
  $replyTo: Int
  $content: String!
  $images: [Base64ImageInput!]
) {
  createLabModelComment(
    input: {
      modelId: $modelId
      versionId: $versionId
      modelMetricId: $modelMetricId
      replyTo: $replyTo
      content: $content
      images: $images
    }
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
  }
}

mutation updateLabModelComment(
  $commentId: Int!
  $content: String!
  $modelId: Int!
  $images: [Base64ImageInput!]
) {
  updateLabModelComment(
    input: {
      modelId: $modelId
      content: $content
      commentId: $commentId
      images: $images
    }
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
  }
}

mutation triggerLabModelVersion($reportId: Int!) {
  triggerLabModelVersion(input: { reportId: $reportId }) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}

mutation createLabDataset(
  $datasets: [DatasetRowTypeInput!]!
  $modelId: Int!
  $versionId: Int!
  $isPublic: Boolean!
) {
  createLabDataset(
    input: {
      datasets: $datasets
      modelId: $modelId
      versionId: $versionId
      isPublic: $isPublic
    }
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
  }
}
query myModelReports($page: Int, $per: Int) {
  myModelReports(page: $page, per: $per) {
    page
    totalPage
    count
    items {
      # dimension
      id
      isPublic
      reportId
      modelId
      modelName
      datasetStatus {
        ...datasetStatus
      }
      metrics {
        ...metrics
      }
      version
      versionId
      triggerStatus
      triggerUpdatedAt
      parentLabModel {
        name
        id
        loginBinds {
          account
          avatarUrl
          nickname
        }
      }
      #      reports {
      #        ...simpleReport
      #      }
      # versionId
    }
  }
}
mutation deleteLabModelReport($id: Int!) {
  deleteLabModelReport(input: { id: $id }) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}
mutation updateLabModelReport(
  $datasets: [DatasetRowTypeInput!]!
  $reportId: Int!
  $isPublic: Boolean
) {
  updateLabModelReport(
    input: { datasets: $datasets, reportId: $reportId, isPublic: $isPublic }
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
  }
}
query referenceModelReports($page: Int, $per: Int, $modelId: Int!) {
  referenceModelReports(page: $page, per: $per, modelId: $modelId) {
    page
    totalPage
    count
    items {
      # dimension
      id
      isPublic
      reportId
      modelId
      modelName
      datasetStatus {
        ...datasetStatus
      }
      metrics {
        ...metrics
      }
      version
      versionId
      triggerStatus
      triggerUpdatedAt
      parentLabModel {
        name
        id
        loginBinds {
          account
          avatarUrl
          nickname
        }
      }
      #      reports {
      #        ...simpleReport
      #      }
      # versionId
    }
  }
}
mutation triggerSingleProject(
  $reportId: Int!
  $projectUrl: String!
  $level: String!
) {
  triggerSingleProject(
    input: { reportId: $reportId, projectUrl: $projectUrl, level: $level }
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}
