query userinfo {
  currentUser {
    id
    name
    email
    language
    emailVerified
    loginBinds {
      account
      avatarUrl
      nickname
      provider
    }
  }
}

query subscriptions($page: Int!, $per: Int!) {
  currentUser {
    subscriptions(page: $page, per: $per) {
      count
      page
      totalPage
      items {
        count
        id
        label
        level
        status
        statusUpdatedAt
        collectAt
        completeAt
      }
    }
  }
}

query subscriptionCount($label: String!, $level: String!) {
  subjectSubscriptionCount(label: $label, level: $level) {
    count
    subscribed
  }
}

query status($label: String!) {
  analysisStatus(label: $label)
}

query statusVerify($label: String, $shortCode: String) {
  analysisStatusVerify(label: $label, shortCode: $shortCode) {
    label
    level
    shortCode
    status
    collections
  }
}

query search($keyword: String!, $level: String) {
  fuzzySearch(keyword: $keyword, level: $level) {
    level
    label
    status
    shortCode
    collections
  }
}

query latestMetrics($label: String!, $level: String) {
  latestMetrics(level: $level, label: $label) {
    activityScore
    activityScoreUpdatedAt
    codeQualityGuarantee
    codeQualityGuaranteeUpdatedAt
    communitySupportScore
    communitySupportScoreUpdatedAt
    label
    level
    shortCode
    organizationsActivity
    organizationsActivityUpdatedAt
    reposCount
  }
}

query communityRepos($label: String!, $page: Int, $per: Int, $type: String) {
  communityOverview(label: $label, page: $page, per: $per, type: $type) {
    projectsCount
    trends {
      backend
      name
      path
      type
      shortCode
      metricActivity {
        activityScore
        grimoireCreationDate
      }
    }
  }
}

query metric(
  $label: String!
  $level: String = repo
  $start: ISO8601DateTime
  $end: ISO8601DateTime
  $repoType: String
) {
  metricCodequality(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    activeC1PrCommentsContributorCount
    activeC1PrCreateContributorCount
    activeC2ContributorCount
    codeMergeRatio
    codeMergedCount
    codeQualityGuarantee
    codeReviewRatio
    codeReviewedCount
    commitFrequency
    commitFrequencyInside
    contributorCount
    gitPrLinkedRatio
    grimoireCreationDate
    isMaintained
    label
    level
    shortCode
    type
    linesAddedFrequency
    linesRemovedFrequency
    locFrequency
    prCommitCount
    prCommitLinkedCount
    prCount
    prIssueLinkedCount
    prIssueLinkedRatio
  }
  metricCommunity(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    bugIssueOpenTimeAvg
    bugIssueOpenTimeMid
    closedPrsCount
    codeReviewCount
    commentFrequency
    communitySupportScore
    grimoireCreationDate
    issueFirstReponseAvg
    issueFirstReponseMid
    issueOpenTimeAvg
    issueOpenTimeMid
    label
    level
    shortCode
    type
    prOpenTimeAvg
    prOpenTimeMid
    updatedIssuesCount
  }
  metricActivity(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    activeC1IssueCommentsContributorCount
    activeC1IssueCreateContributorCount
    activeC1PrCommentsContributorCount
    activeC1PrCreateContributorCount
    activeC2ContributorCount
    activityScore
    orgCount
    closedIssuesCount
    codeReviewCount
    commentFrequency
    commitFrequency
    contributorCount
    grimoireCreationDate
    label
    level
    shortCode
    type
    recentReleasesCount
    updatedIssuesCount
    updatedSince
  }
  metricGroupActivity(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    commitFrequency
    # commitFrequencyOrg
    # commitFrequencyOrgPercentage
    # commitFrequencyPercentage
    contributionLast
    contributorCount
    # contributorOrgCount
    grimoireCreationDate
    label
    level
    shortCode
    type
    orgCount
    organizationsActivity
  }
}

query summary($start: ISO8601DateTime, $end: ISO8601DateTime) {
  summaryActivity(beginDate: $start, endDate: $end) {
    activeC1IssueCommentsContributorCount {
      ...metricStat
    }
    activeC1IssueCreateContributorCount {
      ...metricStat
    }
    activeC1PrCommentsContributorCount {
      ...metricStat
    }
    activeC1PrCreateContributorCount {
      ...metricStat
    }
    activeC2ContributorCount {
      ...metricStat
    }
    activityScore {
      ...metricStat
    }
    closedIssuesCount {
      ...metricStat
    }
    codeReviewCount {
      ...metricStat
    }
    commentFrequency {
      ...metricStat
    }
    commitFrequency {
      ...metricStat
    }
    contributorCount {
      ...metricStat
    }
    grimoireCreationDate
    orgCount {
      ...metricStat
    }
    recentReleasesCount {
      ...metricStat
    }
    updatedIssuesCount {
      ...metricStat
    }
    updatedSince {
      ...metricStat
    }
  }
  summaryCodequality(beginDate: $start, endDate: $end) {
    activeC1PrCommentsContributorCount {
      ...metricStat
    }
    activeC1PrCreateContributorCount {
      ...metricStat
    }
    activeC2ContributorCount {
      ...metricStat
    }
    codeMergeRatio {
      ...metricStat
    }
    codeMergedCount {
      ...metricStat
    }
    codeQualityGuarantee {
      ...metricStat
    }
    codeReviewRatio {
      ...metricStat
    }
    codeReviewedCount {
      ...metricStat
    }
    commitFrequency {
      ...metricStat
    }
    commitFrequencyInside {
      ...metricStat
    }
    contributorCount {
      ...metricStat
    }
    gitPrLinkedRatio {
      ...metricStat
    }
    grimoireCreationDate
    isMaintained {
      ...metricStat
    }
    linesAddedFrequency {
      ...metricStat
    }
    linesRemovedFrequency {
      ...metricStat
    }
    locFrequency {
      ...metricStat
    }
    prCommitCount {
      ...metricStat
    }
    prCommitLinkedCount {
      ...metricStat
    }
    prCount {
      ...metricStat
    }
    prIssueLinkedCount {
      ...metricStat
    }
    prIssueLinkedRatio {
      ...metricStat
    }
  }
  summaryCommunity(beginDate: $start, endDate: $end) {
    bugIssueOpenTimeAvg {
      ...metricStat
    }
    bugIssueOpenTimeMid {
      ...metricStat
    }
    closedPrsCount {
      ...metricStat
    }
    codeReviewCount {
      ...metricStat
    }
    commentFrequency {
      ...metricStat
    }
    communitySupportScore {
      ...metricStat
    }
    grimoireCreationDate
    issueFirstReponseAvg {
      ...metricStat
    }
    issueFirstReponseMid {
      ...metricStat
    }
    issueOpenTimeAvg {
      ...metricStat
    }
    issueOpenTimeMid {
      ...metricStat
    }
    prOpenTimeAvg {
      ...metricStat
    }
    prOpenTimeMid {
      ...metricStat
    }
    updatedIssuesCount {
      ...metricStat
    }
  }
  summaryGroupActivity(beginDate: $start, endDate: $end) {
    commitFrequency {
      ...metricStat
    }
    contributionLast {
      ...metricStat
    }
    contributorCount {
      ...metricStat
    }
    grimoireCreationDate
    orgCount {
      ...metricStat
    }
    organizationsActivity {
      ...metricStat
    }
  }
  # summaryStarterProjectHealth(beginDate: $start, endDate: $end) {
  #   busFactor {
  #     ...metricStat
  #   }
  #   changeRequestClosureRatioAllPeriod {
  #     ...metricStat
  #   }
  #   changeRequestClosureRatioSamePeriod {
  #     ...metricStat
  #   }
  #   grimoireCreationDate
  #   prTimeToCloseAvg {
  #     ...metricStat
  #   }
  #   prTimeToCloseMid {
  #     ...metricStat
  #   }
  #   prTimeToFirstResponseMid {
  #     ...metricStat
  #   }
  #   releaseFrequency {
  #     ...metricStat
  #   }
  #   starterProjectHealth {
  #     ...metricStat
  #   }
  # }
}

# query labMetric(
#   $label: String!
#   $level: String = repo
#   $start: ISO8601DateTime
#   $end: ISO8601DateTime
# ) {
#   metricStarterProjectHealth(
#     label: $label
#     level: $level
#     beginDate: $start
#     endDate: $end
#   ) {
#     busFactor
#     changeRequestClosedCountAllPeriod
#     changeRequestClosedCountRecently
#     changeRequestClosureRatioAllPeriod
#     changeRequestClosureRatioRecently
#     changeRequestCreatedCountAllPeriod
#     changeRequestCreatedCountRecently
#     grimoireCreationDate
#     label
#     level
#     shortCode
#     prTimeToCloseAvg
#     prTimeToCloseMid
#     prTimeToFirstResponseAvg
#     prTimeToFirstResponseMid
#     releaseFrequency
#     starterProjectHealth
#     type
#   }
# }

fragment metricStat on MetricStat {
  mean
  median
}

query collectionHottest($ident: String!, $limit: Int) {
  collectionHottest(ident: $ident, limit: $limit) {
    label
    level
    shortCode
    status
    updatedAt
  }
}

query collectionList($ident: String!, $level: String, $page: Int, $per: Int) {
  collectionList(ident: $ident, level: $level, page: $page, per: $per) {
    page
    totalPage
    count
    items {
      backend
      language
      name
      openIssuesCount
      origin
      path
      shortCode
      metricActivity {
        activityScore
      }
    }
  }
}

query bulkOverview($labels: [String!]!) {
  bulkOverview(labels: $labels) {
    backend
    forksCount
    language
    name
    openIssuesCount
    path
    shortCode
    stargazersCount
    watchersCount
    metricActivity {
      activityScore
    }
  }
}

query trending($level: String = repo) {
  trending(level: $level) {
    activityScore
    collections
    fullPath
    label
    level
    logoUrl
    name
    origin
    reposCount
    shortCode
  }
}

query betaMetricOverview($id: Int!, $limit: Int) {
  betaMetricOverview(id: $id, limit: $limit) {
    projectsCount
    trends {
      path
      origin
      name
      backend
      shortCode
      betaMetricScores {
        grimoireCreationDate
        score
      }
    }
  }
}

query betaMetricsIndex($per: Int, $page: Int) {
  betaMetricsIndex(per: $per, page: $page) {
    id
    dimensionality
    desc
    extra
    metric
  }
}

query bulkShortenedLabel($labels: [LabelRowInput!]!) {
  bulkShortenedLabel(labels: $labels) {
    label
    level
    shortCode
  }
}
query metricDashboard(
  $label: String!
  $level: String = repo
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  contributorsDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    contributorAllCount
    highestContributionContributor {
      name
      origin
      type
      value
    }
    highestContributionOrganization {
      name
      origin
      type
      value
    }
    orgAllCount
  }
  issuesDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    issueCommentFrequencyMean
    issueCompletionCount
    issueCompletionRatio
    issueCount
    issueUnresponsiveCount
    issueUnresponsiveRatio
  }
  pullsDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    commitCount
    pullCompletionCount
    pullCompletionRatio
    pullCount
    pullUnresponsiveCount
    pullUnresponsiveRatio
  }
}
query contributorsDetailList(
  $label: String!
  $level: String = repo
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  contributorsDetailList(
    label: $label
    level: $level
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      contribution
      contributionTypeList {
        contribution
        contributionType
      }
      contributionWithoutObserve
      contributor
      ecologicalType
      isBot
      mileageType
      organization
    }
    page
    totalPage
  }
}

query ecoContributorsOverview(
  $label: String!
  $level: String = repo
  $filterOpts: [FilterOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  ecoContributorsOverview(
    label: $label
    level: $level
    filterOpts: $filterOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    overviewName
    subTypeName
    subTypePercentage
    topContributorDistribution {
      subCount
      subName
      subRatio
      totalCount
      subBelong
    }
  }
}
query orgContributionDistribution(
  $label: String!
  $level: String = repo
  $filterOpts: [FilterOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  orgContributionDistribution(
    label: $label
    level: $level
    filterOpts: $filterOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    overviewName
    subTypeName
    subTypePercentage
    topContributorDistribution {
      subCount
      subName
      subRatio
      totalCount
      subBelong
    }
  }
}
query orgContributorsOverview(
  $label: String!
  $level: String = repo
  $filterOpts: [FilterOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  orgContributorsOverview(
    label: $label
    level: $level
    filterOpts: $filterOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    overviewName
    subTypeName
    subTypePercentage
    topContributorDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
query contributorsOverview(
  $label: String!
  $level: String = repo
  $filterOpts: [FilterOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  orgContributorsDistribution(
    label: $label
    level: $level
    filterOpts: $filterOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    overviewName
    subTypeName
    subTypePercentage
    topContributorDistribution {
      subCount
      subName
      subRatio
      totalCount
      subBelong
    }
  }
}

query issuesDetailList(
  $label: String!
  $level: String = repo
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  issuesDetailList(
    label: $label
    level: $level
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      assigneeLogin
      closedAt
      createdAt
      idInRepo
      labels
      numOfCommentsWithoutBot
      repository
      state
      timeToCloseDays
      timeToFirstAttentionWithoutBot
      title
      url
      userLogin
    }
    page
    totalPage
  }
}
query issueCompletion(
  $label: String!
  $level: String = repo
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  issuesDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    issueStateDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
query issueComment(
  $label: String!
  $level: String = repo
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  issuesDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    issueCommentDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
query pullsDetailList(
  $label: String!
  $level: String = repo
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  pullsDetailList(
    label: $label
    level: $level
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      closedAt
      createdAt
      idInRepo
      labels
      mergeAuthorLogin
      numReviewComments
      repository
      reviewersLogin
      state
      timeToCloseDays
      timeToFirstAttentionWithoutBot
      title
      url
      userLogin
    }
    page
    totalPage
  }
}
query pullsCompletion(
  $label: String!
  $level: String = repo
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  pullsDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    pullStateDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
query pullsComment(
  $label: String!
  $level: String = repo
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  pullsDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    pullCommentDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
query verifyDetailDataRange(
  $label: String
  $shortCode: String
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  verifyDetailDataRange(
    label: $label
    shortCode: $shortCode
    beginDate: $beginDate
    endDate: $endDate
  ) {
    status
    max
    min
  }
}

query metricModelsOverview(
  $label: String!
  $level: String = repo
  $repoType: String
) {
  metricModelsOverview(label: $label, level: $level, repoType: $repoType) {
    dimension
    grimoireCreationDate
    ident
    label
    level
    mainScore
    scope
    transformedScore
    type
    updatedAt
  }
}

# metricDomainPersona(
#     label: $label
#     level: $level
#     beginDate: $start
#     endDate: $end
#     repoType: $repoType
# ) {
#     activity_observation_contributor_count
#     activity_observation_contribution_per_person
#     activity_code_contributor_count
#     activity_code_contribution_per_person
#     activity_issue_contributor_count
#     activity_issue_contribution_per_person
#     domainPersonaScore
#     grimoireCreationDate
#     label
#     level
#     shortCode
#     type
# }

# metricMilestonePersona(
#     label: $label
#     level: $level
#     beginDate: $start
#     endDate: $end
#     repoType: $repoType
# ) {
#     activity_casual_contributor_count
#     activity_casual_contribution_per_person
#     activity_regular_contributor_count
#     activity_regular_contribution_per_person
#     activity_core_contributor_count
#     activity_core_contribution_per_person
#     MilestonePersonaScore
#     grimoireCreationDate
#     label
#     level
#     shortCode
#     type
# }

# metricRolePersona(
#     label: $label
#     level: $level
#     beginDate: $start
#     endDate: $end
#     repoType: $repoType
# ) {
#     activity_organization_contributor_count
#     activity_organization_contribution_per_person
#     activity_individual_contributor_count
#     activity_individual_contribution_per_person
#     RolePersonaScore
#     grimoireCreationDate
#     label
#     level
#     shortCode
#     type
# }
