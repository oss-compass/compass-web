mutation createRepoTask($repoUrls: [String!]!, $origin: String!) {
  createRepoTask(input: { repoUrls: $repoUrls, origin: $origin }) {
    message
    status
    prUrl
    reportUrl
  }
}

mutation createProjectTask(
  $projectName: String!
  $projectTypes: [ProjectTypeInput!]!
  $origin: String!
  $projectUrl: String
  $projectLogoUrl: String
) {
  createProjectTask(
    input: {
      projectName: $projectName
      projectTypes: $projectTypes
      origin: $origin
      projectUrl: $projectUrl
      projectLogoUrl: $projectLogoUrl
    }
  ) {
    message
    status
    prUrl
    reportUrl
  }
}

mutation modifyUser($name: String!, $email: String!, $language: String) {
  modifyUser(input: { name: $name, email: $email, language: $language }) {
    message
    status
  }
}

mutation userUnbind($provider: String!) {
  userUnbind(input: { provider: $provider }) {
    message
    status
  }
}

mutation sendEmailVerify {
  sendEmailVerify(input: {}) {
    message
    status
  }
}

mutation signOut {
  signOut
}

mutation deleteUser {
  destroyUser
}

mutation bindWechatLink {
  bindWechatLink(input: {}) {
    url
    message
  }
}

mutation createSubscription($label: String!, $level: String!) {
  createSubscription(input: { label: $label, level: $level }) {
    message
    status
  }
}

mutation cancelSubscription($label: String!, $level: String!) {
  cancelSubscription(input: { label: $label, level: $level }) {
    message
    status
  }
}
mutation modifyUserOrgs(
  $platform: String!
  $organizations: [ContributorOrgInput!]!
) {
  modifyUserOrgs(
    input: { platform: $platform, organizations: $organizations }
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}
mutation manageUserOrgs(
  $platform: String!
  $organizations: [ContributorOrgInput!]!
  $contributor: String!
  $label: String!
  $level: String!
) {
  manageUserOrgs(
    input: {
      platform: $platform
      contributor: $contributor
      label: $label
      level: $level
      organizations: $organizations
    }
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
    prUrl
    status
  }
}

# fragment tpcSoftwareSelectionReportInput on TpcSoftwareSelectionReportInput {
#   name
#   tpcSoftwareSigId
#   release
#   releaseTime
#   codeUrl
#   programmingLanguage
# }
mutation createTpcSoftwareSelectionReport(
  $label: String!
  $level: String!
  $reportType: Int!
  $softwareReport: TpcSoftwareSelectionReportInput!
) {
  createTpcSoftwareSelectionReport(
    input: {
      label: $label
      level: $level
      reportType: $reportType
      softwareReport: $softwareReport
    }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation createTpcSoftwareSelection(
  $label: String!
  $level: String!
  $tpcSoftwareSelectionReportIds: [Int!]!
  $selectionType: Int!
  $repoUrl: [String!]!
  $committers: [String!]!
  $functionalDescription: String!
  $incubationTime: String!
  $demandSource: String!
  $reason: String!
  # $adaptationMethod: String!
  $sameTypeSoftwareName: String
  $targetSoftware: String!
  $isSameTypeCheck: Int!
) {
  createTpcSoftwareSelection(
    input: {
      label: $label
      level: $level
      selectionType: $selectionType
      tpcSoftwareSelectionReportIds: $tpcSoftwareSelectionReportIds
      repoUrl: $repoUrl
      committers: $committers
      functionalDescription: $functionalDescription
      demandSource: $demandSource
      incubationTime: $incubationTime
      reason: $reason
      sameTypeSoftwareName: $sameTypeSoftwareName
      targetSoftware: $targetSoftware
      isSameTypeCheck: $isSameTypeCheck
    }
  ) {
    errors {
      message
      path
    }
    id
    message
    status
  }
}
mutation createTpcSoftwareReportMetricClarification(
  $shortCode: String!
  $metricName: String!
  $content: String!
  $reportType: Int = 0
) {
  createTpcSoftwareReportMetricClarification(
    input: {
      shortCode: $shortCode
      metricName: $metricName
      content: $content
      reportType: $reportType
    }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation deleteReportMetricClarification($clarificationId: Int!) {
  deleteTpcSoftwareReportMetricClarification(
    input: { clarificationId: $clarificationId }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation updateReportMetricClarification(
  $clarificationId: Int!
  $content: String!
) {
  updateTpcSoftwareReportMetricClarification(
    input: { clarificationId: $clarificationId, content: $content }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}

mutation acceptTpcSoftwareReportMetricClarification(
  $shortCode: String!
  $metricName: String!
  $state: Int!
  $memberType: Int!
  $reportType: Int = 0
) {
  acceptTpcSoftwareReportMetricClarification(
    input: {
      shortCode: $shortCode
      metricName: $metricName
      state: $state
      memberType: $memberType
      reportType: $reportType
    }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation updateTpcSoftwareSelectionReport(
  $reportId: Int!
  $softwareReport: TpcSoftwareSelectionReportUpdateInput!
) {
  updateTpcSoftwareSelectionReport(
    input: { reportId: $reportId, softwareReport: $softwareReport }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation updateTpcSoftwareSelection(
  $selectionId: Int!
  $repoUrl: [String!]!
  $committers: [String!]!
  $functionalDescription: String!
  $incubationTime: String!
  $demandSource: String!
  $reason: String!
  # $adaptationMethod: String!
  $sameTypeSoftwareName: String
  $isSameTypeCheck: Int!
) {
  updateTpcSoftwareSelection(
    input: {
      selectionId: $selectionId
      repoUrl: $repoUrl
      committers: $committers
      functionalDescription: $functionalDescription
      demandSource: $demandSource
      incubationTime: $incubationTime
      reason: $reason
      sameTypeSoftwareName: $sameTypeSoftwareName
      isSameTypeCheck: $isSameTypeCheck
    }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation createTpcSoftwareSelectionComment(
  $selectionId: Int!
  $content: String!
  $reportType: Int = 0
) {
  createTpcSoftwareSelectionComment(
    input: {
      selectionId: $selectionId
      content: $content
      reportType: $reportType
    }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation deleteTpcSoftwareSelectionComment($commentId: Int!) {
  deleteTpcSoftwareSelectionComment(input: { commentId: $commentId }) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation updateTpcSoftwareSelectionComment(
  $commentId: Int!
  $content: String!
) {
  updateTpcSoftwareSelectionComment(
    input: { commentId: $commentId, content: $content }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation acceptTpcSoftwareSelection(
  $selectionId: Int!
  $state: Int!
  $memberType: Int!
) {
  acceptTpcSoftwareSelection(
    input: { selectionId: $selectionId, state: $state, memberType: $memberType }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}

mutation createTpcSoftwareGraduationReport(
  $label: String!
  $level: String!
  $softwareReport: TpcSoftwareGraduationReportInput!
) {
  createTpcSoftwareGraduationReport(
    input: { label: $label, level: $level, softwareReport: $softwareReport }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation updateTpcSoftwareGraduationReport(
  $reportId: Int!
  $softwareReport: TpcSoftwareGraduationReportUpdateInput!
) {
  updateTpcSoftwareGraduationReport(
    input: { reportId: $reportId, softwareReport: $softwareReport }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation createTpcSoftwareGraduation(
  $label: String!
  $level: String!
  $tpcSoftwareGraduationReportIds: [Int!]!
  $committers: [String!]!
  $demandSource: String!
  $functionalDescription: String!
  $incubationTime: String
  $incubationStartTime: ISO8601DateTime
) {
  createTpcSoftwareGraduation(
    input: {
      label: $label
      level: $level
      tpcSoftwareGraduationReportIds: $tpcSoftwareGraduationReportIds
      committers: $committers
      demandSource: $demandSource
      functionalDescription: $functionalDescription
      incubationTime: $incubationTime
      incubationStartTime: $incubationStartTime
    }
  ) {
    errors {
      message
      path
    }
    id
    message
    status
  }
}
mutation updateTpcSoftwareGraduation(
  $graduationId: Int!
  $committers: [String!]!
  $demandSource: String!
  $functionalDescription: String!
  $incubationTime: String!
  $incubationStartTime: ISO8601DateTime
) {
  updateTpcSoftwareGraduation(
    input: {
      graduationId: $graduationId
      committers: $committers
      demandSource: $demandSource
      functionalDescription: $functionalDescription
      incubationTime: $incubationTime
      incubationStartTime: $incubationStartTime
    }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation acceptTpcSoftwareGraduation(
  $graduationId: Int!
  $state: Int!
  $memberType: Int!
) {
  acceptTpcSoftwareGraduation(
    input: {
      graduationId: $graduationId
      state: $state
      memberType: $memberType
    }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}

mutation acceptTpcSoftwareGraduation(
  $graduationId: Int!
  $state: Int!
  $memberType: Int!
) {
  acceptTpcSoftwareGraduation(
    input: {
      graduationId: $graduationId
      state: $state
      memberType: $memberType
    }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}

mutation triggerTpcSoftwareSelectionReport($reportId: Int!) {
  triggerTpcSoftwareSelectionReport(input: { reportId: $reportId }) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation triggerTpcSoftwareGraduationReport($reportId: Int!) {
  triggerTpcSoftwareGraduationReport(input: { reportId: $reportId }) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation createAuthToken($name: String!, $expiresAt: ISO8601DateTime!) {
  createAuthToken(input: { name: $name, expiresAt: $expiresAt }) {
    message
    data {
      token
    }
    errors {
      message
    }
  }
}
mutation deleteAuthToken($id: Int!) {
  deleteAuthToken(input: { id: $id }) {
    message
    status
    errors {
      message
    }
  }
}
