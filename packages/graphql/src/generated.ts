/* eslint-disable max-lines */
import { GraphQLClient } from 'graphql-request';
import { RequestInit } from 'graphql-request/dist/types.dom';
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from '@tanstack/react-query';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};

function fetcher<TData, TVariables extends { [key: string]: any }>(
  client: GraphQLClient,
  query: string,
  variables?: TVariables,
  requestHeaders?: RequestInit['headers']
) {
  return async (): Promise<TData> =>
    client.request({
      document: query,
      variables,
      requestHeaders,
    });
}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  ISO8601Date: any;
  ISO8601DateTime: any;
};

/** Autogenerated input type of AcceptTpcSoftwareGraduation */
export type AcceptTpcSoftwareGraduationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  graduationId: Scalars['Int'];
  /** committer: 0, sig lead: 1, legal: 2, compliance: 3, QA: 4 */
  memberType?: Scalars['Int'];
  /** reject: -1, cancel: 0, accept: 1 */
  state?: Scalars['Int'];
};

/** Autogenerated return type of AcceptTpcSoftwareGraduation. */
export type AcceptTpcSoftwareGraduationPayload = {
  __typename?: 'AcceptTpcSoftwareGraduationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of AcceptTpcSoftwareLectotype */
export type AcceptTpcSoftwareLectotypeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  lectotypeId: Scalars['Int'];
  /** committer: 0, sig lead: 1, legal: 2, compliance: 3 */
  memberType?: Scalars['Int'];
  /** reject: -1, cancel: 0, accept: 1 */
  state?: Scalars['Int'];
};

/** Autogenerated return type of AcceptTpcSoftwareLectotype. */
export type AcceptTpcSoftwareLectotypePayload = {
  __typename?: 'AcceptTpcSoftwareLectotypePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of AcceptTpcSoftwareReportMetricClarification */
export type AcceptTpcSoftwareReportMetricClarificationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** committer: 0, sig lead: 1, legal: 2, compliance: 3 */
  memberType?: Scalars['Int'];
  metricName: Scalars['String'];
  /** 0: selection 1:graduation */
  reportType?: InputMaybe<Scalars['Int']>;
  shortCode: Scalars['String'];
  /** reject: -1, cancel: 0, accept: 1 */
  state?: Scalars['Int'];
};

/** Autogenerated return type of AcceptTpcSoftwareReportMetricClarification. */
export type AcceptTpcSoftwareReportMetricClarificationPayload = {
  __typename?: 'AcceptTpcSoftwareReportMetricClarificationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of AcceptTpcSoftwareSelection */
export type AcceptTpcSoftwareSelectionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** committer: 0, sig lead: 1, legal: 2, compliance: 3, qa:4 */
  memberType?: Scalars['Int'];
  selectionId: Scalars['Int'];
  /** reject: -1, cancel: 0, accept: 1 */
  state?: Scalars['Int'];
};

/** Autogenerated return type of AcceptTpcSoftwareSelection. */
export type AcceptTpcSoftwareSelectionPayload = {
  __typename?: 'AcceptTpcSoftwareSelectionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

export type ActivityMetric = {
  __typename?: 'ActivityMetric';
  /** number of active C1 issue comments contributors in the past 90 days */
  activeC1IssueCommentsContributorCount?: Maybe<Scalars['Float']>;
  /** number of active C1 issue create contributors in the past 90 days */
  activeC1IssueCreateContributorCount?: Maybe<Scalars['Float']>;
  /** number of active C1 pr comments contributors in the past 90 days */
  activeC1PrCommentsContributorCount?: Maybe<Scalars['Float']>;
  /** number of active C1 pr create contributors in the past 90 days */
  activeC1PrCreateContributorCount?: Maybe<Scalars['Float']>;
  /** number of active C2 developers in the past 90 days */
  activeC2ContributorCount?: Maybe<Scalars['Float']>;
  /** score of activity metric model */
  activityScore?: Maybe<Scalars['Float']>;
  /** number of issues closed in the past 90 days */
  closedIssuesCount?: Maybe<Scalars['Float']>;
  /** mean of comments per PR over the past 90 days */
  codeReviewCount?: Maybe<Scalars['Float']>;
  /** mean of comments per issue over the past 90 days */
  commentFrequency?: Maybe<Scalars['Float']>;
  /** mean of submissions per week over the past 90 days */
  commitFrequency?: Maybe<Scalars['Float']>;
  /** number of active D1 developers in the past 90 days */
  contributorCount?: Maybe<Scalars['Float']>;
  /** number of months since the project was created */
  createdSince?: Maybe<Scalars['Float']>;
  /** metric model creatiton time */
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level */
  level?: Maybe<Scalars['String']>;
  /** organization count */
  orgCount?: Maybe<Scalars['Float']>;
  /** number of releases in the last 90 days */
  recentReleasesCount?: Maybe<Scalars['Float']>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
  /** metric scores for repositories type, only for community (software-artifact/governance) */
  type?: Maybe<Scalars['String']>;
  /** number of issue updates in the past 90 days */
  updatedIssuesCount?: Maybe<Scalars['Float']>;
  /** (average of months from the last code commit to the time of statistics */
  updatedSince?: Maybe<Scalars['Float']>;
};

export type ActivitySummary = {
  __typename?: 'ActivitySummary';
  /** number of active C1 issue comments contributors in the past 90 days */
  activeC1IssueCommentsContributorCount?: Maybe<MetricStat>;
  /** number of active C1 issue create contributors in the past 90 days */
  activeC1IssueCreateContributorCount?: Maybe<MetricStat>;
  /** number of active C1 pr comments contributors in the past 90 days */
  activeC1PrCommentsContributorCount?: Maybe<MetricStat>;
  /** number of active C1 pr create contributors in the past 90 days */
  activeC1PrCreateContributorCount?: Maybe<MetricStat>;
  /** number of active C2 developers in the past 90 days */
  activeC2ContributorCount?: Maybe<MetricStat>;
  /** score of activity metric model */
  activityScore?: Maybe<MetricStat>;
  /** number of issues closed in the past 90 days */
  closedIssuesCount?: Maybe<MetricStat>;
  /** mean of comments per PR over the past 90 days */
  codeReviewCount?: Maybe<MetricStat>;
  /** mean of comments per issue over the past 90 days */
  commentFrequency?: Maybe<MetricStat>;
  /** mean of submissions per week over the past 90 days */
  commitFrequency?: Maybe<MetricStat>;
  /** number of active D1 developers in the past 90 days */
  contributorCount?: Maybe<MetricStat>;
  /** number of months since the project was created */
  createdSince?: Maybe<MetricStat>;
  /** metric summary creatiton time */
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** organization count */
  orgCount?: Maybe<MetricStat>;
  /** number of releases in the last 90 days */
  recentReleasesCount?: Maybe<MetricStat>;
  /** number of issue updates in the past 90 days */
  updatedIssuesCount?: Maybe<MetricStat>;
  /** (average of months from the last code commit to the time of statistics */
  updatedSince?: Maybe<MetricStat>;
};

/** Autogenerated input type of AddRepoExtension */
export type AddRepoExtensionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** repo extension */
  repoExtensionList: Array<RepoExtensionInput>;
};

/** Autogenerated return type of AddRepoExtension. */
export type AddRepoExtensionPayload = {
  __typename?: 'AddRepoExtensionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

export type Algorithm = {
  __typename?: 'Algorithm';
  ident: Scalars['String'];
  name: Scalars['String'];
};

export type Base64ImageInput = {
  /** image base64 data, To attach base64 data it is required to come in the form of Data URIs, eg: data:image/png;base64,[base64 data] */
  base64: Scalars['String'];
  /** image filename */
  filename: Scalars['String'];
  /** image id */
  id?: InputMaybe<Scalars['Int']>;
};

export type BetaMetric = {
  __typename?: 'BetaMetric';
  createdAt: Scalars['ISO8601DateTime'];
  desc?: Maybe<Scalars['String']>;
  dimensionality?: Maybe<Scalars['String']>;
  extra?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  metric?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type BetaMetricOverview = {
  __typename?: 'BetaMetricOverview';
  projectsCount?: Maybe<Scalars['Int']>;
  trends?: Maybe<Array<BetaRepo>>;
};

export type BetaMetricScore = {
  __typename?: 'BetaMetricScore';
  /** metric model creatiton time */
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level */
  level?: Maybe<Scalars['String']>;
  /** name of this beta metric */
  name?: Maybe<Scalars['String']>;
  /** score of this beta metric */
  score?: Maybe<Scalars['Float']>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
};

export type BetaRepo = {
  __typename?: 'BetaRepo';
  backend?: Maybe<Scalars['String']>;
  betaMetricScores: Array<BetaMetricScore>;
  createdAt: Scalars['ISO8601DateTime'];
  language?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  origin: Scalars['String'];
  path?: Maybe<Scalars['String']>;
  shortCode?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

/** Autogenerated input type of BindWechatLink */
export type BindWechatLinkInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of BindWechatLink. */
export type BindWechatLinkPayload = {
  __typename?: 'BindWechatLinkPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  expireSeconds: Scalars['Int'];
  message?: Maybe<Scalars['String']>;
  ticket: Scalars['String'];
  url: Scalars['String'];
};

/** Autogenerated input type of CancelMemberInvite */
export type CancelMemberInviteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** invitation id */
  invitationId: Scalars['Int'];
  /** lab model id */
  modelId: Scalars['Int'];
};

/** Autogenerated return type of CancelMemberInvite. */
export type CancelMemberInvitePayload = {
  __typename?: 'CancelMemberInvitePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of CancelSubscription */
export type CancelSubscriptionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** repo or project label */
  label: Scalars['String'];
  /** repo or project level(repo/community) */
  level: Scalars['String'];
};

/** Autogenerated return type of CancelSubscription. */
export type CancelSubscriptionPayload = {
  __typename?: 'CancelSubscriptionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

export type CodeCheck = {
  __typename?: 'CodeCheck';
  commentNum?: Maybe<Scalars['Int']>;
  linesAdded?: Maybe<Scalars['Int']>;
  linesRemoved?: Maybe<Scalars['Int']>;
  timeCheckHours?: Maybe<Scalars['Float']>;
  userLogin?: Maybe<Scalars['String']>;
};

export type CodeCheckDetail = {
  __typename?: 'CodeCheckDetail';
  commentCreatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  commentNum?: Maybe<Scalars['Int']>;
  issueNum?: Maybe<Scalars['String']>;
  linesAdded?: Maybe<Scalars['Int']>;
  linesRemoved?: Maybe<Scalars['Int']>;
  prState?: Maybe<Scalars['String']>;
  prUrl?: Maybe<Scalars['String']>;
  prUserLogin?: Maybe<Scalars['String']>;
  timeCheckHours?: Maybe<Scalars['Float']>;
  userLogin?: Maybe<Scalars['String']>;
};

export type CodeCheckDetailPage = {
  __typename?: 'CodeCheckDetailPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<CodeCheckDetail>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type CodeCheckPage = {
  __typename?: 'CodeCheckPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<CodeCheck>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type CodeDetail = {
  __typename?: 'CodeDetail';
  commitUrls?: Maybe<Array<Scalars['String']>>;
  createdAt?: Maybe<Scalars['ISO8601DateTime']>;
  issueNum?: Maybe<Scalars['String']>;
  linesTotal?: Maybe<Scalars['Int']>;
  mergedAt?: Maybe<Scalars['ISO8601DateTime']>;
  tag?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  userLogin?: Maybe<Scalars['String']>;
};

export type CodeDetailPage = {
  __typename?: 'CodeDetailPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<CodeDetail>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type CodeReadabilityDetail = {
  __typename?: 'CodeReadabilityDetail';
  evaluateCodeReadability?: Maybe<Array<EvaluateCodeReadability>>;
  repoUrl?: Maybe<Scalars['String']>;
};

export type CodeRepo = {
  __typename?: 'CodeRepo';
  lines?: Maybe<Scalars['Int']>;
  linesChang?: Maybe<Scalars['Int']>;
  linesTotal?: Maybe<Scalars['Int']>;
  manager?: Maybe<Scalars['String']>;
  repoAttributeType?: Maybe<Scalars['String']>;
  repoName?: Maybe<Scalars['String']>;
  sigName?: Maybe<Scalars['String']>;
};

export type CodeRepoPage = {
  __typename?: 'CodeRepoPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<CodeRepo>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type CodeTrend = {
  __typename?: 'CodeTrend';
  detailList?: Maybe<Array<CodeTrendDetail>>;
  sigName?: Maybe<Scalars['String']>;
};

export type CodeTrendDetail = {
  __typename?: 'CodeTrendDetail';
  count?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['ISO8601DateTime']>;
};

export type CodequalityMetric = {
  __typename?: 'CodequalityMetric';
  /** number of active C1 pr comments contributors in the past 90 days */
  activeC1PrCommentsContributorCount?: Maybe<Scalars['Float']>;
  /** number of active C1 pr create contributors in the past 90 days */
  activeC1PrCreateContributorCount?: Maybe<Scalars['Float']>;
  /** number of active C2 developers in the past 90 days */
  activeC2ContributorCount?: Maybe<Scalars['Float']>;
  /** ratio of merge pulls and all pulls */
  codeMergeRatio?: Maybe<Scalars['Float']>;
  /** merged pr count past 90 days */
  codeMergedCount?: Maybe<Scalars['Float']>;
  /** score of code quality metric model */
  codeQualityGuarantee?: Maybe<Scalars['Float']>;
  /** ratio of pulls with one more reviewers and all pulls */
  codeReviewRatio?: Maybe<Scalars['Float']>;
  /** count of pulls with one more reviewers */
  codeReviewedCount?: Maybe<Scalars['Float']>;
  /** mean of submissions per week over the past 90 days */
  commitFrequency?: Maybe<Scalars['Float']>;
  /** mean of inside submissions per week over the past 90 days */
  commitFrequencyInside?: Maybe<Scalars['Float']>;
  /** number of active D1 developers in the past 90 days */
  contributorCount?: Maybe<Scalars['Float']>;
  /** ratio of pr_commit_linked_count and pr_commit_count */
  gitPrLinkedRatio?: Maybe<Scalars['Float']>;
  /** metric model creatiton time */
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** maintenance status */
  isMaintained?: Maybe<Scalars['Float']>;
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level */
  level?: Maybe<Scalars['String']>;
  /** average of added lines code each commit */
  linesAddedFrequency?: Maybe<Scalars['Float']>;
  /** average of removed lines code each commit */
  linesRemovedFrequency?: Maybe<Scalars['Float']>;
  /** average of lines code each commit */
  locFrequency?: Maybe<Scalars['Float']>;
  /** pr count base for pr_commit_linked_count past 90 days */
  prCommitCount?: Maybe<Scalars['Float']>;
  /** pr with commits linked count past 90 days */
  prCommitLinkedCount?: Maybe<Scalars['Float']>;
  /** all pr count past 90 days */
  prCount?: Maybe<Scalars['Float']>;
  /** count of pulls which are linked issues */
  prIssueLinkedCount?: Maybe<Scalars['Float']>;
  /** ratio of pulls which are linked issues and all pulls */
  prIssueLinkedRatio?: Maybe<Scalars['Float']>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
  /** metric scores for repositories type, only for community (software-artifact/governance) */
  type?: Maybe<Scalars['String']>;
};

export type CodequalitySummary = {
  __typename?: 'CodequalitySummary';
  /** number of active C1 pr comments contributors in the past 90 days */
  activeC1PrCommentsContributorCount?: Maybe<MetricStat>;
  /** number of active C1 pr create contributors in the past 90 days */
  activeC1PrCreateContributorCount?: Maybe<MetricStat>;
  /** number of active C2 developers in the past 90 days */
  activeC2ContributorCount?: Maybe<MetricStat>;
  /** ratio of merge pulls and all pulls */
  codeMergeRatio?: Maybe<MetricStat>;
  /** merged pr count past 90 days */
  codeMergedCount?: Maybe<MetricStat>;
  /** score of code quality metric model */
  codeQualityGuarantee?: Maybe<MetricStat>;
  /** ratio of pulls with one more reviewers and all pulls */
  codeReviewRatio?: Maybe<MetricStat>;
  /** count of pulls with one more reviewers */
  codeReviewedCount?: Maybe<MetricStat>;
  /** mean of submissions per week over the past 90 days */
  commitFrequency?: Maybe<MetricStat>;
  /** mean of inside submissions per week over the past 90 days */
  commitFrequencyInside?: Maybe<MetricStat>;
  /** number of active D1 developers in the past 90 days */
  contributorCount?: Maybe<MetricStat>;
  /** ratio of pr_commit_linked_count and pr_commit_count */
  gitPrLinkedRatio?: Maybe<MetricStat>;
  /** metric summary creatiton time */
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** maintenance status */
  isMaintained?: Maybe<MetricStat>;
  /** average of added lines code each commit */
  linesAddedFrequency?: Maybe<MetricStat>;
  /** average of removed lines code each commit */
  linesRemovedFrequency?: Maybe<MetricStat>;
  /** average of lines code each commit */
  locFrequency?: Maybe<MetricStat>;
  /** pr count base for pr_commit_linked_count past 90 days */
  prCommitCount?: Maybe<MetricStat>;
  /** pr with commits linked count past 90 days */
  prCommitLinkedCount?: Maybe<MetricStat>;
  /** all pr count past 90 days */
  prCount?: Maybe<MetricStat>;
  /** count of pulls which are linked issues */
  prIssueLinkedCount?: Maybe<MetricStat>;
  /** ratio of pulls which are linked issues and all pulls */
  prIssueLinkedRatio?: Maybe<MetricStat>;
};

export type CollectionPage = {
  __typename?: 'CollectionPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<Repo>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type Comment = {
  __typename?: 'Comment';
  commentLines?: Maybe<Scalars['Float']>;
  commentRatio?: Maybe<Scalars['Float']>;
  totalLines?: Maybe<Scalars['Float']>;
};

export type CommitContributor = {
  __typename?: 'CommitContributor';
  authorEmail?: Maybe<Scalars['String']>;
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  linesAdded?: Maybe<Scalars['Int']>;
  linesChanged?: Maybe<Scalars['Int']>;
  linesRemoved?: Maybe<Scalars['Int']>;
  orgName?: Maybe<Scalars['String']>;
};

export type CommitDetail = {
  __typename?: 'CommitDetail';
  authorEmail?: Maybe<Scalars['String']>;
  commitHash?: Maybe<Scalars['String']>;
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  linesAdded?: Maybe<Scalars['Int']>;
  linesChanged?: Maybe<Scalars['Int']>;
  linesRemoved?: Maybe<Scalars['Int']>;
  mergedAt?: Maybe<Scalars['ISO8601DateTime']>;
  orgName?: Maybe<Scalars['String']>;
  prUrl?: Maybe<Scalars['String']>;
  repoName?: Maybe<Scalars['String']>;
};

export type CommitDetailPage = {
  __typename?: 'CommitDetailPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<CommitDetail>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type CommitFeedback = {
  __typename?: 'CommitFeedback';
  commitHash?: Maybe<Scalars['String']>;
  contactWay?: Maybe<Scalars['String']>;
  createAtDate?: Maybe<Scalars['ISO8601DateTime']>;
  id?: Maybe<Scalars['String']>;
  newLinesAdded?: Maybe<Scalars['Int']>;
  newLinesChanged?: Maybe<Scalars['Int']>;
  newLinesRemoved?: Maybe<Scalars['Int']>;
  oldLinesAdded?: Maybe<Scalars['Int']>;
  oldLinesChanged?: Maybe<Scalars['Int']>;
  oldLinesRemoved?: Maybe<Scalars['Int']>;
  prUrl?: Maybe<Scalars['String']>;
  repoName?: Maybe<Scalars['String']>;
  requestReviewerEmail?: Maybe<Scalars['String']>;
  reviewMsg?: Maybe<Scalars['String']>;
  reviewerEmail?: Maybe<Scalars['String']>;
  reviewerId?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  submitReason?: Maybe<Scalars['String']>;
  submitUserEmail?: Maybe<Scalars['String']>;
  submitUserId?: Maybe<Scalars['String']>;
  updateAtDate?: Maybe<Scalars['ISO8601DateTime']>;
};

export type CommitFeedbackInput = {
  /** Git commit hash */
  commitHash: Scalars['String'];
  /** Modified code to changed the number of lines */
  contactWay: Scalars['String'];
  /** Modify the number of deleted code */
  newLinesAdded: Scalars['Int'];
  /** Modify the number of deleted code */
  newLinesRemoved: Scalars['Int'];
  /** Repository name */
  repoName: Scalars['String'];
  /** Request reviewer's email */
  requestReviewerEmail: Scalars['String'];
  /** Reasons for feedback */
  submitReason: Scalars['String'];
};

export type CommitFeedbackPage = {
  __typename?: 'CommitFeedbackPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<CommitFeedback>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type CommitOrganization = {
  __typename?: 'CommitOrganization';
  linesAdded?: Maybe<Scalars['Int']>;
  linesChanged?: Maybe<Scalars['Int']>;
  linesChangedRatio?: Maybe<Scalars['Float']>;
  linesRemoved?: Maybe<Scalars['Int']>;
  orgName?: Maybe<Scalars['String']>;
};

export type CommitOrganizationPage = {
  __typename?: 'CommitOrganizationPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<CommitOrganization>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type CommitRepo = {
  __typename?: 'CommitRepo';
  linesAdded?: Maybe<Scalars['Int']>;
  linesChanged?: Maybe<Scalars['Int']>;
  linesRemoved?: Maybe<Scalars['Int']>;
  repoAttributeType?: Maybe<Scalars['String']>;
  repoName?: Maybe<Scalars['String']>;
  sigName?: Maybe<Scalars['String']>;
};

export type CommitRepoPage = {
  __typename?: 'CommitRepoPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<CommitRepo>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type CommitSig = {
  __typename?: 'CommitSig';
  linesAdded?: Maybe<Scalars['Int']>;
  linesChanged?: Maybe<Scalars['Int']>;
  linesRemoved?: Maybe<Scalars['Int']>;
  sigName?: Maybe<Scalars['String']>;
};

export type CommitSigPage = {
  __typename?: 'CommitSigPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<CommitSig>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type CommunityDetailOverview = {
  __typename?: 'CommunityDetailOverview';
  activityScoreAvg?: Maybe<Scalars['Float']>;
  commitCount?: Maybe<Scalars['Int']>;
  communityScoreAvg?: Maybe<Scalars['Float']>;
  repoCount?: Maybe<Scalars['Int']>;
  sigCount?: Maybe<Scalars['Int']>;
};

export type CommunityMetric = {
  __typename?: 'CommunityMetric';
  /** mean of bug issues open time (days) */
  bugIssueOpenTimeAvg?: Maybe<Scalars['Float']>;
  /** middle of bug issues open time (days) */
  bugIssueOpenTimeMid?: Maybe<Scalars['Float']>;
  /** number of pulls closed in the past 90 days */
  closedPrsCount?: Maybe<Scalars['Float']>;
  /** mean of comments per PR over the past 90 days */
  codeReviewCount?: Maybe<Scalars['Float']>;
  /** mean of comments per issue over the past 90 days */
  commentFrequency?: Maybe<Scalars['Float']>;
  /** score of community support metric model */
  communitySupportScore?: Maybe<Scalars['Float']>;
  /** metric model creatiton time */
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** mean of issues first response time (days) */
  issueFirstReponseAvg?: Maybe<Scalars['Float']>;
  /** middle of issues first response time (days) */
  issueFirstReponseMid?: Maybe<Scalars['Float']>;
  /** mean of issues open time (days) */
  issueOpenTimeAvg?: Maybe<Scalars['Float']>;
  /** middle of issues open time (days) */
  issueOpenTimeMid?: Maybe<Scalars['Float']>;
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level */
  level?: Maybe<Scalars['String']>;
  /** mean of pulls open time (days) */
  prOpenTimeAvg?: Maybe<Scalars['Float']>;
  /** middle of pulls open time (days) */
  prOpenTimeMid?: Maybe<Scalars['Float']>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
  /** metric scores for repositories type, only for community (software-artifact/governance) */
  type?: Maybe<Scalars['String']>;
  /** number of issue updates in the past 90 days */
  updatedIssuesCount?: Maybe<Scalars['Float']>;
};

export type CommunityOverview = {
  __typename?: 'CommunityOverview';
  communityOrgUrl?: Maybe<Scalars['String']>;
  projectsCount?: Maybe<Scalars['Int']>;
  trends?: Maybe<Array<Repo>>;
};

export type CommunitySummary = {
  __typename?: 'CommunitySummary';
  /** mean of bug issues open time (days) */
  bugIssueOpenTimeAvg?: Maybe<MetricStat>;
  /** middle of bug issues open time (days) */
  bugIssueOpenTimeMid?: Maybe<MetricStat>;
  /** number of pulls closed in the past 90 days */
  closedPrsCount?: Maybe<MetricStat>;
  /** mean of comments per PR over the past 90 days */
  codeReviewCount?: Maybe<MetricStat>;
  /** mean of comments per issue over the past 90 days */
  commentFrequency?: Maybe<MetricStat>;
  /** score of community support metric model */
  communitySupportScore?: Maybe<MetricStat>;
  /** metric summary creatiton time */
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** mean of issues first response time (days) */
  issueFirstReponseAvg?: Maybe<MetricStat>;
  /** middle of issues first response time (days) */
  issueFirstReponseMid?: Maybe<MetricStat>;
  /** mean of issues open time (days) */
  issueOpenTimeAvg?: Maybe<MetricStat>;
  /** middle of issues open time (days) */
  issueOpenTimeMid?: Maybe<MetricStat>;
  /** mean of pulls open time (days) */
  prOpenTimeAvg?: Maybe<MetricStat>;
  /** middle of pulls open time (days) */
  prOpenTimeMid?: Maybe<MetricStat>;
  /** number of issue updates in the past 90 days */
  updatedIssuesCount?: Maybe<MetricStat>;
};

export type Contribution = {
  __typename?: 'Contribution';
  contribution?: Maybe<Scalars['Int']>;
  contributionType?: Maybe<Scalars['String']>;
};

export type ContributionDetail = {
  __typename?: 'ContributionDetail';
  orgContribution?: Maybe<Scalars['Int']>;
  organization?: Maybe<Scalars['Int']>;
  personal?: Maybe<Scalars['Int']>;
};

export type ContributionDetailOverview = {
  __typename?: 'ContributionDetailOverview';
  commit?: Maybe<Scalars['Float']>;
  contributor?: Maybe<Scalars['Float']>;
  fork?: Maybe<Scalars['Float']>;
  issue?: Maybe<Scalars['Float']>;
  org?: Maybe<Scalars['Float']>;
  pull?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  watch?: Maybe<Scalars['Float']>;
};

export type ContributionOverview = {
  __typename?: 'ContributionOverview';
  currentPeriod?: Maybe<ContributionDetailOverview>;
  previousPeriod?: Maybe<ContributionDetailOverview>;
  ratio?: Maybe<ContributionDetailOverview>;
};

export type Contributor = {
  __typename?: 'Contributor';
  name?: Maybe<Scalars['String']>;
  origin?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
};

export type ContributorDetail = {
  __typename?: 'ContributorDetail';
  contribution?: Maybe<Scalars['Int']>;
  contributionTypeList?: Maybe<Array<Contribution>>;
  contributionWithoutObserve?: Maybe<Scalars['Int']>;
  contributor?: Maybe<Scalars['String']>;
  ecologicalType?: Maybe<Scalars['String']>;
  isBot?: Maybe<Scalars['Boolean']>;
  mileageType?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
};

export type ContributorDetailOverview = {
  __typename?: 'ContributorDetailOverview';
  contributorAllCount?: Maybe<Scalars['Float']>;
  highestContributionContributor?: Maybe<Contributor>;
  highestContributionOrganization?: Maybe<Contributor>;
  orgAllCount?: Maybe<Scalars['Float']>;
};

export type ContributorDetailPage = {
  __typename?: 'ContributorDetailPage';
  count?: Maybe<Scalars['Int']>;
  items: Array<ContributorDetail>;
  /** contributors origin */
  origin: Scalars['String'];
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type ContributorOrg = {
  __typename?: 'ContributorOrg';
  /** time of begin of service by the organization */
  firstDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** time of end of service by the organization */
  lastDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** organization's name */
  orgName?: Maybe<Scalars['String']>;
  /** platform type of the organization */
  platformType?: Maybe<Scalars['String']>;
};

export type ContributorOrgInput = {
  /** time of begin of service by the organization */
  firstDate: Scalars['ISO8601Date'];
  /** time of end of service by the organization */
  lastDate: Scalars['ISO8601Date'];
  /** organization's name */
  orgName: Scalars['String'];
};

export type ContributorTopOverview = {
  __typename?: 'ContributorTopOverview';
  overviewName?: Maybe<Scalars['String']>;
  subTypeName?: Maybe<Scalars['String']>;
  subTypePercentage?: Maybe<Scalars['Float']>;
  topContributorDistribution?: Maybe<Array<Distribution>>;
};

/** Autogenerated input type of CreateAuthToken */
export type CreateAuthTokenInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 过期时间（ISO8601格式） */
  expiresAt: Scalars['ISO8601DateTime'];
  /** token name */
  name: Scalars['String'];
};

/** Autogenerated return type of CreateAuthToken. */
export type CreateAuthTokenPayload = {
  __typename?: 'CreateAuthTokenPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  data?: Maybe<Token>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateCommitFeedback */
export type CreateCommitFeedbackInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** repo extension */
  commitFeedbackInput: CommitFeedbackInput;
  /** repo or project label */
  label: Scalars['String'];
  /** repo or community */
  level?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of CreateCommitFeedback. */
export type CreateCommitFeedbackPayload = {
  __typename?: 'CreateCommitFeedbackPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of CreateLabDataset */
export type CreateLabDatasetInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** the collection of the repositories */
  datasets: Array<DatasetRowTypeInput>;
  /** lab model report is public */
  isPublic: Scalars['Boolean'];
  /** lab model  id */
  modelId: Scalars['Int'];
  /** lab model version id */
  versionId: Scalars['Int'];
};

/** Autogenerated return type of CreateLabDataset. */
export type CreateLabDatasetPayload = {
  __typename?: 'CreateLabDatasetPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  data?: Maybe<Dataset>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateLabModelComment */
export type CreateLabModelCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** comment content */
  content: Scalars['String'];
  /** related images under this comment */
  images?: InputMaybe<Array<Base64ImageInput>>;
  /** lab model id */
  modelId: Scalars['Int'];
  /** lab model metric id */
  modelMetricId?: InputMaybe<Scalars['Int']>;
  /** reply to comment id */
  replyTo?: InputMaybe<Scalars['Int']>;
  /** lab model version id */
  versionId?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated return type of CreateLabModelComment. */
export type CreateLabModelCommentPayload = {
  __typename?: 'CreateLabModelCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  data?: Maybe<ModelComment>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateLabModelDataset */
export type CreateLabModelDatasetInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** lab  dataset id */
  datasetId: Scalars['Int'];
  /** lab model id */
  modelId: Scalars['Int'];
  /** lab model version id */
  versionId: Scalars['Int'];
};

/** Autogenerated return type of CreateLabModelDataset. */
export type CreateLabModelDatasetPayload = {
  __typename?: 'CreateLabModelDatasetPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  data?: Maybe<ModelDataset>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateLabModel */
export type CreateLabModelInput = {
  /** the algorithm of the model, default: `default` */
  algorithm?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** lab model description */
  description?: InputMaybe<Scalars['String']>;
  /** whether or not a public model, default: false */
  isPublic: Scalars['Boolean'];
  /** whether or not calculate the score, default: false */
  isScore: Scalars['Boolean'];
  /** lab model metrics */
  metrics: Array<LabModelMetricInput>;
  /** lab model name */
  name: Scalars['String'];
};

/** Autogenerated return type of CreateLabModel. */
export type CreateLabModelPayload = {
  __typename?: 'CreateLabModelPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  data?: Maybe<ModelDetail>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateLabModelVersion */
export type CreateLabModelVersionInput = {
  /** the algorithm of the model, default: `default apm algorithm` */
  algorithm?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** whether or not calculate the score, default: false */
  isScore: Scalars['Boolean'];
  /** lab model metrics */
  metrics: Array<LabModelMetricInput>;
  /** lab model id */
  modelId: Scalars['Int'];
  /** version number */
  version: Scalars['String'];
};

/** Autogenerated return type of CreateLabModelVersion. */
export type CreateLabModelVersionPayload = {
  __typename?: 'CreateLabModelVersionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  data?: Maybe<ModelVersion>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateProjectTask */
export type CreateProjectTaskInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** user's origin (gitee/github) */
  origin: Scalars['String'];
  /** project logo url */
  projectLogoUrl?: InputMaybe<Scalars['String']>;
  /** project label for following repositories */
  projectName: Scalars['String'];
  /** project detail information */
  projectTypes: Array<ProjectTypeInput>;
  /** project homepage url */
  projectUrl?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of CreateProjectTask. */
export type CreateProjectTaskPayload = {
  __typename?: 'CreateProjectTaskPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  prUrl?: Maybe<Scalars['String']>;
  reportUrl?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of CreateRepoTask */
export type CreateRepoTaskInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** user's origin (gitee/github) */
  origin: Scalars['String'];
  /** repository urls */
  repoUrls: Array<Scalars['String']>;
};

/** Autogenerated return type of CreateRepoTask. */
export type CreateRepoTaskPayload = {
  __typename?: 'CreateRepoTaskPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  prUrl?: Maybe<Scalars['String']>;
  reportUrl?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of CreateSubjectAccessLevel */
export type CreateSubjectAccessLevelInput = {
  /** subject access level: `NORMAL/COMMITTER: 0, PRIVILEGED/LEADER: 1 default: 0` */
  accessLevel: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** repo or project label */
  label: Scalars['String'];
  /** repo or comunity */
  level?: InputMaybe<Scalars['String']>;
  /** user id */
  userId: Scalars['Int'];
};

/** Autogenerated return type of CreateSubjectAccessLevel. */
export type CreateSubjectAccessLevelPayload = {
  __typename?: 'CreateSubjectAccessLevelPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of CreateSubjectSig */
export type CreateSubjectSigInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** subject sig description */
  description?: InputMaybe<Scalars['String']>;
  /** subject sig emails */
  emails?: InputMaybe<Array<Scalars['String']>>;
  /** repo or project label */
  label: Scalars['String'];
  /** repo or comunity */
  level?: InputMaybe<Scalars['String']>;
  /** link sig label */
  linkSigLabel: Scalars['String'];
  /** subject sig maintainers */
  maintainers?: InputMaybe<Array<Scalars['String']>>;
  /** subject sig name */
  name: Scalars['String'];
};

/** Autogenerated return type of CreateSubjectSig. */
export type CreateSubjectSigPayload = {
  __typename?: 'CreateSubjectSigPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of CreateSubscription */
export type CreateSubscriptionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** repo or project label */
  label: Scalars['String'];
  /** repo or project level(repo/community) */
  level: Scalars['String'];
};

/** Autogenerated return type of CreateSubscription. */
export type CreateSubscriptionPayload = {
  __typename?: 'CreateSubscriptionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of CreateTpcSoftwareGraduation */
export type CreateTpcSoftwareGraduationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  committers: Array<Scalars['String']>;
  demandSource: Scalars['String'];
  functionalDescription: Scalars['String'];
  incubationStartTime?: InputMaybe<Scalars['ISO8601DateTime']>;
  incubationTime?: InputMaybe<Scalars['String']>;
  /** repo or project label */
  label: Scalars['String'];
  /** repo or community */
  level?: InputMaybe<Scalars['String']>;
  tpcSoftwareGraduationReportIds: Array<Scalars['Int']>;
};

/** Autogenerated return type of CreateTpcSoftwareGraduation. */
export type CreateTpcSoftwareGraduationPayload = {
  __typename?: 'CreateTpcSoftwareGraduationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  id: Scalars['Int'];
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of CreateTpcSoftwareGraduationReport */
export type CreateTpcSoftwareGraduationReportInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** repo or project label */
  label: Scalars['String'];
  /** repo or community */
  level?: InputMaybe<Scalars['String']>;
  softwareReport: TpcSoftwareGraduationReportInput;
};

/** Autogenerated return type of CreateTpcSoftwareGraduationReport. */
export type CreateTpcSoftwareGraduationReportPayload = {
  __typename?: 'CreateTpcSoftwareGraduationReportPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of CreateTpcSoftwareLectotype */
export type CreateTpcSoftwareLectotypeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  committers: Array<Scalars['String']>;
  demandSource?: InputMaybe<Scalars['String']>;
  functionalDescription: Scalars['String'];
  incubationTime: Scalars['String'];
  isSameTypeCheck: Scalars['Int'];
  /** repo or project label */
  label: Scalars['String'];
  /** repo or comunity */
  level?: InputMaybe<Scalars['String']>;
  reason: Scalars['String'];
  repoUrl?: InputMaybe<Array<Scalars['String']>>;
  sameTypeSoftwareName?: InputMaybe<Scalars['String']>;
  targetSoftware: Scalars['String'];
  tpcSoftwareLectotypeReportIds: Array<Scalars['Int']>;
};

/** Autogenerated return type of CreateTpcSoftwareLectotype. */
export type CreateTpcSoftwareLectotypePayload = {
  __typename?: 'CreateTpcSoftwareLectotypePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  id: Scalars['Int'];
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of CreateTpcSoftwareLectotypeReport */
export type CreateTpcSoftwareLectotypeReportInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** repo or project label */
  label: Scalars['String'];
  /** repo or comunity */
  level?: InputMaybe<Scalars['String']>;
  softwareReport: TpcSoftwareLectotypeReportInput;
};

/** Autogenerated return type of CreateTpcSoftwareLectotypeReport. */
export type CreateTpcSoftwareLectotypeReportPayload = {
  __typename?: 'CreateTpcSoftwareLectotypeReportPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of CreateTpcSoftwareReportMetricClarification */
export type CreateTpcSoftwareReportMetricClarificationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  content: Scalars['String'];
  metricName: Scalars['String'];
  /** 0: selection 1:graduation */
  reportType?: InputMaybe<Scalars['Int']>;
  shortCode: Scalars['String'];
};

/** Autogenerated return type of CreateTpcSoftwareReportMetricClarification. */
export type CreateTpcSoftwareReportMetricClarificationPayload = {
  __typename?: 'CreateTpcSoftwareReportMetricClarificationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of CreateTpcSoftwareSelectionComment */
export type CreateTpcSoftwareSelectionCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  content: Scalars['String'];
  /** 0: selection 1:graduation */
  reportType?: InputMaybe<Scalars['Int']>;
  selectionId: Scalars['Int'];
};

/** Autogenerated return type of CreateTpcSoftwareSelectionComment. */
export type CreateTpcSoftwareSelectionCommentPayload = {
  __typename?: 'CreateTpcSoftwareSelectionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of CreateTpcSoftwareSelection */
export type CreateTpcSoftwareSelectionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  committers: Array<Scalars['String']>;
  demandSource?: InputMaybe<Scalars['String']>;
  functionalDescription: Scalars['String'];
  incubationTime: Scalars['String'];
  isSameTypeCheck: Scalars['Int'];
  /** repo or project label */
  label: Scalars['String'];
  /** repo or comunity */
  level?: InputMaybe<Scalars['String']>;
  reason: Scalars['String'];
  repoUrl?: InputMaybe<Array<Scalars['String']>>;
  /** incubation: 0, selection: 2 */
  reportCategory?: InputMaybe<Scalars['Int']>;
  sameTypeSoftwareName?: InputMaybe<Scalars['String']>;
  /** incubation: 0, sandbox: 1, graduation: 2 */
  selectionType: Scalars['Int'];
  targetSoftware: Scalars['String'];
  tpcSoftwareSelectionReportIds: Array<Scalars['Int']>;
};

/** Autogenerated return type of CreateTpcSoftwareSelection. */
export type CreateTpcSoftwareSelectionPayload = {
  __typename?: 'CreateTpcSoftwareSelectionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  id: Scalars['Int'];
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of CreateTpcSoftwareSelectionReport */
export type CreateTpcSoftwareSelectionReportInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** repo or project label */
  label: Scalars['String'];
  /** repo or comunity */
  level?: InputMaybe<Scalars['String']>;
  /** incubation: 0, sandbox: 1 */
  reportType: Scalars['Int'];
  softwareReport: TpcSoftwareSelectionReportInput;
};

/** Autogenerated return type of CreateTpcSoftwareSelectionReport. */
export type CreateTpcSoftwareSelectionReportPayload = {
  __typename?: 'CreateTpcSoftwareSelectionReportPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

export type Dataset = {
  __typename?: 'Dataset';
  ident?: Maybe<Scalars['String']>;
  items?: Maybe<Array<DatasetCompletionRow>>;
  name?: Maybe<Scalars['String']>;
};

export type DatasetCompletionRow = {
  __typename?: 'DatasetCompletionRow';
  /** first ident of the object */
  firstIdent?: Maybe<Scalars['String']>;
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level (project or repo) */
  level?: Maybe<Scalars['String']>;
  /** second ident of the object */
  secondIdent?: Maybe<Scalars['String']>;
  /** short code of metric model object label */
  shortCode?: Maybe<Scalars['String']>;
};

export type DatasetCompletionRowStatus = {
  __typename?: 'DatasetCompletionRowStatus';
  /** first ident of the object */
  firstIdent?: Maybe<Scalars['String']>;
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level (project or repo) */
  level?: Maybe<Scalars['String']>;
  /** repo or community logo_url */
  logoUrl?: Maybe<Scalars['String']>;
  /** second ident of the object */
  secondIdent?: Maybe<Scalars['String']>;
  /** short code of metric model object label */
  shortCode?: Maybe<Scalars['String']>;
  /** trigger status */
  triggerStatus?: Maybe<Scalars['String']>;
  /** trigger updated at */
  triggerUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type DatasetRowTypeInput = {
  /** first ident of the object */
  firstIdent?: InputMaybe<Scalars['String']>;
  /** metric model object identification */
  label: Scalars['String'];
  /** metric model object level (project or repo) */
  level: Scalars['String'];
  /** second ident of the object */
  secondIdent?: InputMaybe<Scalars['String']>;
};

export type DatasetStatus = {
  __typename?: 'DatasetStatus';
  ident?: Maybe<Scalars['String']>;
  items?: Maybe<Array<DatasetCompletionRowStatus>>;
  name?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteAuthToken */
export type DeleteAuthTokenInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** token id */
  id: Scalars['Int'];
};

/** Autogenerated return type of DeleteAuthToken. */
export type DeleteAuthTokenPayload = {
  __typename?: 'DeleteAuthTokenPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['Boolean'];
};

/** Autogenerated input type of DeleteLabMember */
export type DeleteLabMemberInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** lab member id */
  memberId: Scalars['Int'];
  /** lab model id */
  modelId: Scalars['Int'];
};

/** Autogenerated return type of DeleteLabMember. */
export type DeleteLabMemberPayload = {
  __typename?: 'DeleteLabMemberPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of DeleteLabModelComment */
export type DeleteLabModelCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** lab model comment id */
  commentId: Scalars['Int'];
  /** lab model id */
  modelId: Scalars['Int'];
};

/** Autogenerated return type of DeleteLabModelComment. */
export type DeleteLabModelCommentPayload = {
  __typename?: 'DeleteLabModelCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of DeleteLabModel */
export type DeleteLabModelInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** lab model id */
  id: Scalars['Int'];
};

/** Autogenerated return type of DeleteLabModel. */
export type DeleteLabModelPayload = {
  __typename?: 'DeleteLabModelPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of DeleteLabModelReport */
export type DeleteLabModelReportInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** lab model report id */
  id: Scalars['Int'];
};

/** Autogenerated return type of DeleteLabModelReport. */
export type DeleteLabModelReportPayload = {
  __typename?: 'DeleteLabModelReportPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of DeleteLabModelVersion */
export type DeleteLabModelVersionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** lab model id */
  modelId: Scalars['Int'];
  /** lab model version id */
  versionId: Scalars['Int'];
};

/** Autogenerated return type of DeleteLabModelVersion. */
export type DeleteLabModelVersionPayload = {
  __typename?: 'DeleteLabModelVersionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of DeleteOrganization */
export type DeleteOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** repo or project label */
  label: Scalars['String'];
  /** repo or community */
  level?: InputMaybe<Scalars['String']>;
  /** Organization name */
  orgName: Scalars['String'];
};

/** Autogenerated return type of DeleteOrganization. */
export type DeleteOrganizationPayload = {
  __typename?: 'DeleteOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of DeleteSubjectAccessLevel */
export type DeleteSubjectAccessLevelInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Subject access level id */
  id: Scalars['Int'];
  /** repo or project label */
  label: Scalars['String'];
  /** repo or comunity */
  level?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteSubjectAccessLevel. */
export type DeleteSubjectAccessLevelPayload = {
  __typename?: 'DeleteSubjectAccessLevelPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of DeleteSubjectSig */
export type DeleteSubjectSigInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Subject Sig id */
  id: Scalars['Int'];
  /** repo or project label */
  label: Scalars['String'];
  /** repo or comunity */
  level?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteSubjectSig. */
export type DeleteSubjectSigPayload = {
  __typename?: 'DeleteSubjectSigPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of DeleteTpcSoftwareReportMetricClarification */
export type DeleteTpcSoftwareReportMetricClarificationInput = {
  clarificationId: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteTpcSoftwareReportMetricClarification. */
export type DeleteTpcSoftwareReportMetricClarificationPayload = {
  __typename?: 'DeleteTpcSoftwareReportMetricClarificationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of DeleteTpcSoftwareSelectionComment */
export type DeleteTpcSoftwareSelectionCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  commentId: Scalars['Int'];
};

/** Autogenerated return type of DeleteTpcSoftwareSelectionComment. */
export type DeleteTpcSoftwareSelectionCommentPayload = {
  __typename?: 'DeleteTpcSoftwareSelectionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

export type Diagram = {
  __typename?: 'Diagram';
  /** metric model creatiton time */
  dates?: Maybe<Array<Maybe<Scalars['ISO8601DateTime']>>>;
  /** Tab ident for this diagram */
  tabIdent?: Maybe<Scalars['String']>;
  /** Type of this diagram, default: `line` */
  type?: Maybe<Scalars['String']>;
  /** y-axis values for this diagram */
  values?: Maybe<Array<Maybe<Scalars['Float']>>>;
};

export type Distribution = {
  __typename?: 'Distribution';
  subBelong?: Maybe<Scalars['String']>;
  subCount?: Maybe<Scalars['Int']>;
  subName?: Maybe<Scalars['String']>;
  subRatio?: Maybe<Scalars['Float']>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type DocDetail = {
  __typename?: 'DocDetail';
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
};

export type DocQuartyDetail = {
  __typename?: 'DocQuartyDetail';
  docQuartyDetails?: Maybe<QuartyDetail>;
  repoUrl?: Maybe<Scalars['String']>;
};

export type DocumentDetail = {
  __typename?: 'DocumentDetail';
  docNumber?: Maybe<Scalars['Int']>;
  folderDocumentDetails?: Maybe<Array<DocDetail>>;
};

export type DomainPersonaMetric = {
  __typename?: 'DomainPersonaMetric';
  /** activity code contribution per person */
  activityCodeContributionPerPerson?: Maybe<Scalars['Float']>;
  /** activity code contributor count */
  activityCodeContributorCount?: Maybe<Scalars['Float']>;
  /** activity issue contribution per person */
  activityIssueContributionPerPerson?: Maybe<Scalars['Float']>;
  /** activity issue contributor count */
  activityIssueContributorCount?: Maybe<Scalars['Float']>;
  /** activity observation contribution per person */
  activityObservationContributionPerPerson?: Maybe<Scalars['Float']>;
  /** activity observation contributor count */
  activityObservationContributorCount?: Maybe<Scalars['Float']>;
  /** role persona score */
  domainPersonaScore?: Maybe<Scalars['Float']>;
  /** metric model creatiton time */
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level */
  level?: Maybe<Scalars['String']>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
  /** metric scores for repositories type, only for community (software-artifact/governance) */
  type?: Maybe<Scalars['String']>;
};

export type Error = {
  __typename?: 'Error';
  /** 错误信息 */
  message?: Maybe<Scalars['String']>;
  /** 错误路径 */
  path?: Maybe<Array<Scalars['String']>>;
};

export type EvaluateCodeReadability = {
  __typename?: 'EvaluateCodeReadability';
  Comment?: Maybe<Comment>;
  File?: Maybe<Scalars['String']>;
  Language?: Maybe<Scalars['String']>;
  avgIdentifierLength?: Maybe<Scalars['Float']>;
  avgIdentifiersPerLine?: Maybe<Scalars['Float']>;
  avgLineWordNumbers?: Maybe<Scalars['Float']>;
  blankLines?: Maybe<Scalars['Int']>;
  identifierWordRatio?: Maybe<Scalars['Float']>;
  keywordFrequency?: Maybe<Scalars['Float']>;
  totalLines?: Maybe<Scalars['Int']>;
};

export type Feedback = {
  __typename?: 'Feedback';
  documentName?: Maybe<Scalars['String']>;
  documentPath?: Maybe<Scalars['String']>;
  vulnerablityFeedback?: Maybe<Array<Scalars['String']>>;
};

export type FileDetail = {
  __typename?: 'FileDetail';
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
};

export type FilterOptionInput = {
  /** filter option type */
  type: Scalars['String'];
  /** filter option value */
  values: Array<Scalars['String']>;
};

export type FolderDocumentDetail = {
  __typename?: 'FolderDocumentDetail';
  folderDocumentDetails?: Maybe<DocumentDetail>;
  repoUrl?: Maybe<Scalars['String']>;
};

export type GroupActivityMetric = {
  __typename?: 'GroupActivityMetric';
  /** mean of submissions per week over the past 90 days */
  commitFrequency?: Maybe<Scalars['Float']>;
  /** (average of months from the last org code commit to the time of statistics */
  contributionLast?: Maybe<Scalars['Float']>;
  /** number of active D1 developers in the past 90 days */
  contributorCount?: Maybe<Scalars['Float']>;
  /** metric model creatiton time */
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level */
  level?: Maybe<Scalars['String']>;
  /** organization count */
  orgCount?: Maybe<Scalars['Float']>;
  /** score of organization activity metric model */
  organizationsActivity?: Maybe<Scalars['Float']>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
  /** metric scores for repositories type, only for community (software-artifact/governance) */
  type?: Maybe<Scalars['String']>;
};

export type GroupActivitySummary = {
  __typename?: 'GroupActivitySummary';
  /** mean of submissions per week over the past 90 days */
  commitFrequency?: Maybe<MetricStat>;
  /** (average of months from the last org code commit to the time of statistics */
  contributionLast?: Maybe<MetricStat>;
  /** number of active D1 developers in the past 90 days */
  contributorCount?: Maybe<MetricStat>;
  /** metric summary creatiton time */
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** organization count */
  orgCount?: Maybe<MetricStat>;
  /** score of organization activity metric model */
  organizationsActivity?: Maybe<MetricStat>;
};

export type Image = {
  __typename?: 'Image';
  filename: Scalars['String'];
  id: Scalars['Int'];
  url: Scalars['String'];
};

export type InvitationPage = {
  __typename?: 'InvitationPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<LabInvitation>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type IssueDetail = {
  __typename?: 'IssueDetail';
  assigneeLogin?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['ISO8601DateTime']>;
  createdAt?: Maybe<Scalars['ISO8601DateTime']>;
  idInRepo?: Maybe<Scalars['Int']>;
  labels?: Maybe<Array<Scalars['String']>>;
  numOfCommentsWithoutBot?: Maybe<Scalars['Int']>;
  repository?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  timeToCloseDays?: Maybe<Scalars['Float']>;
  timeToFirstAttentionWithoutBot?: Maybe<Scalars['Float']>;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  userLogin?: Maybe<Scalars['String']>;
};

export type IssueDetailOverview = {
  __typename?: 'IssueDetailOverview';
  issueCommentDistribution?: Maybe<Array<Distribution>>;
  issueCommentFrequencyMean?: Maybe<Scalars['Float']>;
  issueCompletionCount?: Maybe<Scalars['Int']>;
  issueCompletionRatio?: Maybe<Scalars['Float']>;
  issueCount?: Maybe<Scalars['Int']>;
  issueStateDistribution?: Maybe<Array<Distribution>>;
  issueUnresponsiveCount?: Maybe<Scalars['Int']>;
  issueUnresponsiveRatio?: Maybe<Scalars['Float']>;
};

export type IssueDetailPage = {
  __typename?: 'IssueDetailPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<IssueDetail>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type LabInvitation = {
  __typename?: 'LabInvitation';
  canExecute: Scalars['Boolean'];
  canRead: Scalars['Boolean'];
  canUpdate: Scalars['Boolean'];
  email: Scalars['String'];
  id: Scalars['Int'];
  sentAt: Scalars['ISO8601DateTime'];
  status: Scalars['String'];
};

export type LabMember = {
  __typename?: 'LabMember';
  avatarUrl?: Maybe<Scalars['String']>;
  canExecute: Scalars['Boolean'];
  canRead: Scalars['Boolean'];
  canUpdate: Scalars['Boolean'];
  id: Scalars['Int'];
  isOwner: Scalars['Boolean'];
  joinedAt: Scalars['ISO8601DateTime'];
  name: Scalars['String'];
};

export type LabModelMetricInput = {
  /** lab model metric id */
  id: Scalars['Int'];
  /** lab model metric threshold */
  threshold: Scalars['Float'];
  /** lab model version, default: latest version */
  versionId?: InputMaybe<Scalars['Int']>;
  /** lab model metric weight */
  weight: Scalars['Float'];
};

export type LabelRow = {
  __typename?: 'LabelRow';
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level (project or repo) */
  level?: Maybe<Scalars['String']>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
};

export type LabelRowInput = {
  /** metric model object identification */
  label: Scalars['String'];
  /** metric model object level (project or repo) */
  level: Scalars['String'];
};

export type LatestMetrics = {
  __typename?: 'LatestMetrics';
  /** latest score of activity metric model */
  activityScore?: Maybe<Scalars['Float']>;
  /** latest score of activity metric model updated_at */
  activityScoreUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  /** latest score of code quality metric model */
  codeQualityGuarantee?: Maybe<Scalars['Float']>;
  /** latest score of code quality metric model updated_at */
  codeQualityGuaranteeUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  /** latest score of community support metric model */
  communitySupportScore?: Maybe<Scalars['Float']>;
  /** latest score of community support metric model up */
  communitySupportScoreUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level */
  level?: Maybe<Scalars['String']>;
  /** latest score of organizations activity metric model */
  organizationsActivity?: Maybe<Scalars['Float']>;
  /** latest score of organizations activity metric model updated_at */
  organizationsActivityUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  /** repositories origin */
  origin?: Maybe<Scalars['String']>;
  /** repository or community reference url */
  referenceUrl?: Maybe<Scalars['String']>;
  /** repositories count */
  reposCount?: Maybe<Scalars['Float']>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
};

export type LoginBind = {
  __typename?: 'LoginBind';
  account?: Maybe<Scalars['String']>;
  avatarUrl?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ManageUserOrgs */
export type ManageUserOrgsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** name of the contributor */
  contributor: Scalars['String'];
  /** repo or community label */
  label: Scalars['String'];
  /** repo or community level */
  level?: InputMaybe<Scalars['String']>;
  /** contributor organizations */
  organizations: Array<ContributorOrgInput>;
  /** platform of the organization */
  platform: Scalars['String'];
};

/** Autogenerated return type of ManageUserOrgs. */
export type ManageUserOrgsPayload = {
  __typename?: 'ManageUserOrgsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  prUrl?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

export type MemberPage = {
  __typename?: 'MemberPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<LabMember>>;
  model?: Maybe<ModelDetail>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type MetricStat = {
  __typename?: 'MetricStat';
  /** arithmetic mean */
  mean?: Maybe<Scalars['Float']>;
  /** 50 percentile */
  median?: Maybe<Scalars['Float']>;
};

export type MilestonePersonaMetric = {
  __typename?: 'MilestonePersonaMetric';
  /** casual contributors per person */
  activityCasualContributionPerPerson?: Maybe<Scalars['Float']>;
  /** number of casual contributors */
  activityCasualContributorCount?: Maybe<Scalars['Float']>;
  /** core contributors per person */
  activityCoreContributionPerPerson?: Maybe<Scalars['Float']>;
  /** number of core contributors */
  activityCoreContributorCount?: Maybe<Scalars['Float']>;
  /** regular contributors per person */
  activityRegularContributionPerPerson?: Maybe<Scalars['Float']>;
  /** number of regular contributors */
  activityRegularContributorCount?: Maybe<Scalars['Float']>;
  /** metric model creatiton time */
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level */
  level?: Maybe<Scalars['String']>;
  /** milestone persona score */
  milestonePersonaScore?: Maybe<Scalars['Float']>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
  /** metric scores for repositories type, only for community (software-artifact/governance) */
  type?: Maybe<Scalars['String']>;
};

export type Model = {
  __typename?: 'Model';
  /** dimension of metric model */
  dimension?: Maybe<Scalars['String']>;
  /** metric model create or update time */
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** metric model ident */
  ident: Scalars['String'];
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level */
  level?: Maybe<Scalars['String']>;
  /** metric model main score */
  mainScore?: Maybe<Scalars['Float']>;
  /** repositories count */
  reposCount?: Maybe<Scalars['Float']>;
  /** scope of metric model */
  scope?: Maybe<Scalars['String']>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
  /** metric model transformed score */
  transformedScore?: Maybe<Scalars['Float']>;
  /** metric scores for repositories type, only for community (software-artifact/governance) */
  type?: Maybe<Scalars['String']>;
  /** metric model update time */
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type ModelComment = {
  __typename?: 'ModelComment';
  content: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['Int'];
  images?: Maybe<Array<Image>>;
  metric?: Maybe<ModelMetric>;
  model: ModelDetail;
  parent?: Maybe<ModelComment>;
  replies?: Maybe<Array<ModelComment>>;
  updatedAt: Scalars['ISO8601DateTime'];
  user: SimpleUser;
};

export type ModelCommentPage = {
  __typename?: 'ModelCommentPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<ModelComment>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type ModelDataset = {
  __typename?: 'ModelDataset';
  createAt?: Maybe<Scalars['ISO8601DateTime']>;
  datasetId: Scalars['Int'];
  id: Scalars['Int'];
  labModelVersionId?: Maybe<Scalars['Int']>;
};

export type ModelDetail = {
  __typename?: 'ModelDetail';
  createdAt?: Maybe<Scalars['ISO8601DateTime']>;
  defaultVersion?: Maybe<ModelVersion>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  isPublic: Scalars['Boolean'];
  /** Details of the 1000 latest updates */
  latestVersions?: Maybe<Array<ModelVersion>>;
  loginBinds?: Maybe<LoginBind>;
  name: Scalars['String'];
  parentLabModel?: Maybe<ModelDetail>;
  permissions?: Maybe<Permission>;
  /** Reference count of the model */
  referenceCount?: Maybe<Scalars['Int']>;
  triggerRemainingCount: Scalars['Int'];
  userId: Scalars['Int'];
};

export type ModelMetric = {
  __typename?: 'ModelMetric';
  category?: Maybe<Scalars['String']>;
  defaultThreshold?: Maybe<Scalars['Float']>;
  defaultWeight?: Maybe<Scalars['Float']>;
  from?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  ident?: Maybe<Scalars['String']>;
  metricId?: Maybe<Scalars['Int']>;
  metricType?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  threshold?: Maybe<Scalars['Float']>;
  weight?: Maybe<Scalars['Float']>;
};

export type ModelPublicOverview = {
  __typename?: 'ModelPublicOverview';
  createdAt?: Maybe<Scalars['ISO8601DateTime']>;
  description?: Maybe<Scalars['String']>;
  dimension?: Maybe<Scalars['Int']>;
  loginBinds?: Maybe<LoginBind>;
  metrics?: Maybe<Array<ModelMetric>>;
  modelId?: Maybe<Scalars['Int']>;
  modelName?: Maybe<Scalars['String']>;
  reports?: Maybe<Array<SimpleReport>>;
  version?: Maybe<Scalars['String']>;
  versionId?: Maybe<Scalars['Int']>;
};

export type ModelPublicPage = {
  __typename?: 'ModelPublicPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<ModelPublicOverview>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type ModelReport = {
  __typename?: 'ModelReport';
  createdAt?: Maybe<Scalars['ISO8601DateTime']>;
  id: Scalars['Int'];
  labDatasetId: Scalars['Int'];
  labModelId: Scalars['Int'];
  labModelVersionId: Scalars['Int'];
  userId: Scalars['Int'];
};

export type ModelVersion = {
  __typename?: 'ModelVersion';
  algorithm?: Maybe<Algorithm>;
  id: Scalars['Int'];
  isScore?: Maybe<Scalars['Boolean']>;
  metrics: Array<ModelMetric>;
  triggerStatus?: Maybe<Scalars['String']>;
  triggerUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  version?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ModifyOrganization */
export type ModifyOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Email suffix */
  domain: Array<Scalars['String']>;
  /** repo or project label */
  label: Scalars['String'];
  /** repo or community */
  level?: InputMaybe<Scalars['String']>;
  /** Name of organization before modification */
  oldOrgName?: InputMaybe<Scalars['String']>;
  /** Organization name */
  orgName: Scalars['String'];
};

/** Autogenerated return type of ModifyOrganization. */
export type ModifyOrganizationPayload = {
  __typename?: 'ModifyOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of ModifyUser */
export type ModifyUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** user email */
  email: Scalars['String'];
  /** user language */
  language?: InputMaybe<Scalars['String']>;
  /** user name */
  name: Scalars['String'];
};

/** Autogenerated input type of ModifyUserOrgs */
export type ModifyUserOrgsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** contributor organizations */
  organizations: Array<ContributorOrgInput>;
  /** platform of the organization */
  platform: Scalars['String'];
};

/** Autogenerated return type of ModifyUserOrgs. */
export type ModifyUserOrgsPayload = {
  __typename?: 'ModifyUserOrgsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated return type of ModifyUser. */
export type ModifyUserPayload = {
  __typename?: 'ModifyUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Accept a tpc software graduation */
  acceptTpcSoftwareGraduation?: Maybe<AcceptTpcSoftwareGraduationPayload>;
  /** Accept a tpc software lectotype */
  acceptTpcSoftwareLectotype?: Maybe<AcceptTpcSoftwareLectotypePayload>;
  /** Accept a tpc software report metric clarification */
  acceptTpcSoftwareReportMetricClarification?: Maybe<AcceptTpcSoftwareReportMetricClarificationPayload>;
  /** Accept a tpc software selection */
  acceptTpcSoftwareSelection?: Maybe<AcceptTpcSoftwareSelectionPayload>;
  /** add repo extension info */
  addRepoExtension?: Maybe<AddRepoExtensionPayload>;
  /** Bind wechat link */
  bindWechatLink?: Maybe<BindWechatLinkPayload>;
  /** Cancel a member invitation */
  cancelMemberInvite?: Maybe<CancelMemberInvitePayload>;
  /** Cancel subscription */
  cancelSubscription?: Maybe<CancelSubscriptionPayload>;
  /** Create auth token */
  createAuthToken?: Maybe<CreateAuthTokenPayload>;
  /** Create a feedback on commit data */
  createCommitFeedback?: Maybe<CreateCommitFeedbackPayload>;
  /** Create a Lab  dataset */
  createLabDataset?: Maybe<CreateLabDatasetPayload>;
  /** Create a Lab model */
  createLabModel?: Maybe<CreateLabModelPayload>;
  /** Create a comment for a lab model */
  createLabModelComment?: Maybe<CreateLabModelCommentPayload>;
  /** Create a Lab model dataset */
  createLabModelDataset?: Maybe<CreateLabModelDatasetPayload>;
  /** Create a Lab model version */
  createLabModelVersion?: Maybe<CreateLabModelVersionPayload>;
  /** Submit a community analysis task */
  createProjectTask?: Maybe<CreateProjectTaskPayload>;
  /** Submit a repository analysis task */
  createRepoTask?: Maybe<CreateRepoTaskPayload>;
  /** Create a Subject access level */
  createSubjectAccessLevel?: Maybe<CreateSubjectAccessLevelPayload>;
  /** Create a Subject sig */
  createSubjectSig?: Maybe<CreateSubjectSigPayload>;
  /** Create subscription */
  createSubscription?: Maybe<CreateSubscriptionPayload>;
  /** Create a tpc software graduation */
  createTpcSoftwareGraduation?: Maybe<CreateTpcSoftwareGraduationPayload>;
  /** Create a tpc software graduation report */
  createTpcSoftwareGraduationReport?: Maybe<CreateTpcSoftwareGraduationReportPayload>;
  /** Create a tpc software lectotype */
  createTpcSoftwareLectotype?: Maybe<CreateTpcSoftwareLectotypePayload>;
  /** Create a tpc software lectotype report */
  createTpcSoftwareLectotypeReport?: Maybe<CreateTpcSoftwareLectotypeReportPayload>;
  /** Create a tpc software report metric clarification */
  createTpcSoftwareReportMetricClarification?: Maybe<CreateTpcSoftwareReportMetricClarificationPayload>;
  /** Create a tpc software selection */
  createTpcSoftwareSelection?: Maybe<CreateTpcSoftwareSelectionPayload>;
  /** Create a tpc software comment */
  createTpcSoftwareSelectionComment?: Maybe<CreateTpcSoftwareSelectionCommentPayload>;
  /** Create a tpc software selection report */
  createTpcSoftwareSelectionReport?: Maybe<CreateTpcSoftwareSelectionReportPayload>;
  /** Delete auth token */
  deleteAuthToken?: Maybe<DeleteAuthTokenPayload>;
  /** Delete a lab member */
  deleteLabMember?: Maybe<DeleteLabMemberPayload>;
  /** Delete a Lab model */
  deleteLabModel?: Maybe<DeleteLabModelPayload>;
  /** Delete a comment for a lab model */
  deleteLabModelComment?: Maybe<DeleteLabModelCommentPayload>;
  /** Update a lab report dataset */
  deleteLabModelReport?: Maybe<DeleteLabModelReportPayload>;
  /** Delete a Lab model version */
  deleteLabModelVersion?: Maybe<DeleteLabModelVersionPayload>;
  /** Delete an organization */
  deleteOrganization?: Maybe<DeleteOrganizationPayload>;
  /** Delete a Subject access level */
  deleteSubjectAccessLevel?: Maybe<DeleteSubjectAccessLevelPayload>;
  /** Delete a Subject sig */
  deleteSubjectSig?: Maybe<DeleteSubjectSigPayload>;
  /** Delete a tpc software report metric clarification */
  deleteTpcSoftwareReportMetricClarification?: Maybe<DeleteTpcSoftwareReportMetricClarificationPayload>;
  /** Delete a tpc software comment */
  deleteTpcSoftwareSelectionComment?: Maybe<DeleteTpcSoftwareSelectionCommentPayload>;
  /** Destroy user */
  destroyUser?: Maybe<Scalars['Boolean']>;
  /** Manage user organizations */
  manageUserOrgs?: Maybe<ManageUserOrgsPayload>;
  /** Add or modify an organization */
  modifyOrganization?: Maybe<ModifyOrganizationPayload>;
  /** Modify user */
  modifyUser?: Maybe<ModifyUserPayload>;
  /** Modify user organizations */
  modifyUserOrgs?: Maybe<ModifyUserOrgsPayload>;
  /** Review a feedback on commit data */
  reviewCommitFeedback?: Maybe<ReviewCommitFeedbackPayload>;
  /** Send email verify */
  sendEmailVerify?: Maybe<SendEmailVerifyPayload>;
  /** Send member invitation */
  sendMemberInvite?: Maybe<SendMemberInvitePayload>;
  /** Sign out */
  signOut?: Maybe<Scalars['Boolean']>;
  /** Trigger the analysis of a finance standard project version */
  triggerFinanceStandardProjectVersion?: Maybe<TriggerFinanceStandardProjectVersionPayload>;
  /** Trigger the analysis of a Lab model version */
  triggerLabModelVersion?: Maybe<TriggerLabModelVersionPayload>;
  /** Trigger the analysis of a Lab model version project */
  triggerSingleProject?: Maybe<TriggerSingleProjectPayload>;
  /** Trigger a tpc software graduation report */
  triggerTpcSoftwareGraduationReport?: Maybe<TriggerTpcSoftwareGraduationReportPayload>;
  /** Trigger a tpc software lectotype report */
  triggerTpcSoftwareLectotypeReport?: Maybe<TriggerTpcSoftwareLectotypeReportPayload>;
  /** Trigger a tpc software selection report */
  triggerTpcSoftwareSelectionReport?: Maybe<TriggerTpcSoftwareSelectionReportPayload>;
  /** Update a Lab model */
  updateLabModel?: Maybe<UpdateLabModelPayload>;
  /** Update a comment for a lab model */
  updateLabModelComment?: Maybe<UpdateLabModelCommentPayload>;
  /** Update a lab report dataset */
  updateLabModelReport?: Maybe<UpdateLabModelReportPayload>;
  /** Update a Lab model version */
  updateLabModelVersion?: Maybe<UpdateLabModelVersionPayload>;
  /** Update a member permission */
  updateMemberPermission?: Maybe<UpdateMemberPermissionPayload>;
  /** Update a Subject access level */
  updateSubjectAccessLevel?: Maybe<UpdateSubjectAccessLevelPayload>;
  /** Update a Subject sig */
  updateSubjectSig?: Maybe<UpdateSubjectSigPayload>;
  /** Update a tpc software graduation */
  updateTpcSoftwareGraduation?: Maybe<UpdateTpcSoftwareGraduationPayload>;
  /** Update a tpc software graduation report */
  updateTpcSoftwareGraduationReport?: Maybe<UpdateTpcSoftwareGraduationReportPayload>;
  /** Update a tpc software lectotype */
  updateTpcSoftwareLectotype?: Maybe<UpdateTpcSoftwareLectotypePayload>;
  /** Update a tpc software lectotype report */
  updateTpcSoftwareLectotypeReport?: Maybe<UpdateTpcSoftwareLectotypeReportPayload>;
  /** Update a tpc software report metric clarification */
  updateTpcSoftwareReportMetricClarification?: Maybe<UpdateTpcSoftwareReportMetricClarificationPayload>;
  /** Update a tpc software selection */
  updateTpcSoftwareSelection?: Maybe<UpdateTpcSoftwareSelectionPayload>;
  /** Update a tpc software comment */
  updateTpcSoftwareSelectionComment?: Maybe<UpdateTpcSoftwareSelectionCommentPayload>;
  /** Update a tpc software selection report */
  updateTpcSoftwareSelectionReport?: Maybe<UpdateTpcSoftwareSelectionReportPayload>;
  /** User unbind */
  userUnbind?: Maybe<UserUnbindPayload>;
};

export type MutationAcceptTpcSoftwareGraduationArgs = {
  input: AcceptTpcSoftwareGraduationInput;
};

export type MutationAcceptTpcSoftwareLectotypeArgs = {
  input: AcceptTpcSoftwareLectotypeInput;
};

export type MutationAcceptTpcSoftwareReportMetricClarificationArgs = {
  input: AcceptTpcSoftwareReportMetricClarificationInput;
};

export type MutationAcceptTpcSoftwareSelectionArgs = {
  input: AcceptTpcSoftwareSelectionInput;
};

export type MutationAddRepoExtensionArgs = {
  input: AddRepoExtensionInput;
};

export type MutationBindWechatLinkArgs = {
  input: BindWechatLinkInput;
};

export type MutationCancelMemberInviteArgs = {
  input: CancelMemberInviteInput;
};

export type MutationCancelSubscriptionArgs = {
  input: CancelSubscriptionInput;
};

export type MutationCreateAuthTokenArgs = {
  input: CreateAuthTokenInput;
};

export type MutationCreateCommitFeedbackArgs = {
  input: CreateCommitFeedbackInput;
};

export type MutationCreateLabDatasetArgs = {
  input: CreateLabDatasetInput;
};

export type MutationCreateLabModelArgs = {
  input: CreateLabModelInput;
};

export type MutationCreateLabModelCommentArgs = {
  input: CreateLabModelCommentInput;
};

export type MutationCreateLabModelDatasetArgs = {
  input: CreateLabModelDatasetInput;
};

export type MutationCreateLabModelVersionArgs = {
  input: CreateLabModelVersionInput;
};

export type MutationCreateProjectTaskArgs = {
  input: CreateProjectTaskInput;
};

export type MutationCreateRepoTaskArgs = {
  input: CreateRepoTaskInput;
};

export type MutationCreateSubjectAccessLevelArgs = {
  input: CreateSubjectAccessLevelInput;
};

export type MutationCreateSubjectSigArgs = {
  input: CreateSubjectSigInput;
};

export type MutationCreateSubscriptionArgs = {
  input: CreateSubscriptionInput;
};

export type MutationCreateTpcSoftwareGraduationArgs = {
  input: CreateTpcSoftwareGraduationInput;
};

export type MutationCreateTpcSoftwareGraduationReportArgs = {
  input: CreateTpcSoftwareGraduationReportInput;
};

export type MutationCreateTpcSoftwareLectotypeArgs = {
  input: CreateTpcSoftwareLectotypeInput;
};

export type MutationCreateTpcSoftwareLectotypeReportArgs = {
  input: CreateTpcSoftwareLectotypeReportInput;
};

export type MutationCreateTpcSoftwareReportMetricClarificationArgs = {
  input: CreateTpcSoftwareReportMetricClarificationInput;
};

export type MutationCreateTpcSoftwareSelectionArgs = {
  input: CreateTpcSoftwareSelectionInput;
};

export type MutationCreateTpcSoftwareSelectionCommentArgs = {
  input: CreateTpcSoftwareSelectionCommentInput;
};

export type MutationCreateTpcSoftwareSelectionReportArgs = {
  input: CreateTpcSoftwareSelectionReportInput;
};

export type MutationDeleteAuthTokenArgs = {
  input: DeleteAuthTokenInput;
};

export type MutationDeleteLabMemberArgs = {
  input: DeleteLabMemberInput;
};

export type MutationDeleteLabModelArgs = {
  input: DeleteLabModelInput;
};

export type MutationDeleteLabModelCommentArgs = {
  input: DeleteLabModelCommentInput;
};

export type MutationDeleteLabModelReportArgs = {
  input: DeleteLabModelReportInput;
};

export type MutationDeleteLabModelVersionArgs = {
  input: DeleteLabModelVersionInput;
};

export type MutationDeleteOrganizationArgs = {
  input: DeleteOrganizationInput;
};

export type MutationDeleteSubjectAccessLevelArgs = {
  input: DeleteSubjectAccessLevelInput;
};

export type MutationDeleteSubjectSigArgs = {
  input: DeleteSubjectSigInput;
};

export type MutationDeleteTpcSoftwareReportMetricClarificationArgs = {
  input: DeleteTpcSoftwareReportMetricClarificationInput;
};

export type MutationDeleteTpcSoftwareSelectionCommentArgs = {
  input: DeleteTpcSoftwareSelectionCommentInput;
};

export type MutationManageUserOrgsArgs = {
  input: ManageUserOrgsInput;
};

export type MutationModifyOrganizationArgs = {
  input: ModifyOrganizationInput;
};

export type MutationModifyUserArgs = {
  input: ModifyUserInput;
};

export type MutationModifyUserOrgsArgs = {
  input: ModifyUserOrgsInput;
};

export type MutationReviewCommitFeedbackArgs = {
  input: ReviewCommitFeedbackInput;
};

export type MutationSendEmailVerifyArgs = {
  input: SendEmailVerifyInput;
};

export type MutationSendMemberInviteArgs = {
  input: SendMemberInviteInput;
};

export type MutationTriggerFinanceStandardProjectVersionArgs = {
  input: TriggerFinanceStandardProjectVersionInput;
};

export type MutationTriggerLabModelVersionArgs = {
  input: TriggerLabModelVersionInput;
};

export type MutationTriggerSingleProjectArgs = {
  input: TriggerSingleProjectInput;
};

export type MutationTriggerTpcSoftwareGraduationReportArgs = {
  input: TriggerTpcSoftwareGraduationReportInput;
};

export type MutationTriggerTpcSoftwareLectotypeReportArgs = {
  input: TriggerTpcSoftwareLectotypeReportInput;
};

export type MutationTriggerTpcSoftwareSelectionReportArgs = {
  input: TriggerTpcSoftwareSelectionReportInput;
};

export type MutationUpdateLabModelArgs = {
  input: UpdateLabModelInput;
};

export type MutationUpdateLabModelCommentArgs = {
  input: UpdateLabModelCommentInput;
};

export type MutationUpdateLabModelReportArgs = {
  input: UpdateLabModelReportInput;
};

export type MutationUpdateLabModelVersionArgs = {
  input: UpdateLabModelVersionInput;
};

export type MutationUpdateMemberPermissionArgs = {
  input: UpdateMemberPermissionInput;
};

export type MutationUpdateSubjectAccessLevelArgs = {
  input: UpdateSubjectAccessLevelInput;
};

export type MutationUpdateSubjectSigArgs = {
  input: UpdateSubjectSigInput;
};

export type MutationUpdateTpcSoftwareGraduationArgs = {
  input: UpdateTpcSoftwareGraduationInput;
};

export type MutationUpdateTpcSoftwareGraduationReportArgs = {
  input: UpdateTpcSoftwareGraduationReportInput;
};

export type MutationUpdateTpcSoftwareLectotypeArgs = {
  input: UpdateTpcSoftwareLectotypeInput;
};

export type MutationUpdateTpcSoftwareLectotypeReportArgs = {
  input: UpdateTpcSoftwareLectotypeReportInput;
};

export type MutationUpdateTpcSoftwareReportMetricClarificationArgs = {
  input: UpdateTpcSoftwareReportMetricClarificationInput;
};

export type MutationUpdateTpcSoftwareSelectionArgs = {
  input: UpdateTpcSoftwareSelectionInput;
};

export type MutationUpdateTpcSoftwareSelectionCommentArgs = {
  input: UpdateTpcSoftwareSelectionCommentInput;
};

export type MutationUpdateTpcSoftwareSelectionReportArgs = {
  input: UpdateTpcSoftwareSelectionReportInput;
};

export type MutationUserUnbindArgs = {
  input: UserUnbindInput;
};

export type MyModelVersion = {
  __typename?: 'MyModelVersion';
  algorithm?: Maybe<Algorithm>;
  dataset?: Maybe<Dataset>;
  datasetStatus?: Maybe<DatasetStatus>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  isPublic?: Maybe<Scalars['Boolean']>;
  metrics?: Maybe<Array<ModelMetric>>;
  modelId: Scalars['Int'];
  modelName?: Maybe<Scalars['String']>;
  parentLabModel?: Maybe<ModelDetail>;
  parentModelId?: Maybe<Scalars['Int']>;
  reportId: Scalars['Int'];
  triggerStatus?: Maybe<Scalars['String']>;
  triggerUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  version?: Maybe<Scalars['String']>;
  versionId: Scalars['Int'];
};

export type MyModels = {
  __typename?: 'MyModels';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<ModelDetail>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type MyReport = {
  __typename?: 'MyReport';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<MyModelVersion>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type OrgCompletionRow = {
  __typename?: 'OrgCompletionRow';
  /** organization name */
  orgName?: Maybe<Scalars['String']>;
};

export type OrgContributionDetail = {
  __typename?: 'OrgContributionDetail';
  orgContributionDetails?: Maybe<ContributionDetail>;
  repoUrl?: Maybe<Scalars['String']>;
};

export type Organization = {
  __typename?: 'Organization';
  domain?: Maybe<Array<Scalars['String']>>;
  orgName?: Maybe<Scalars['String']>;
};

export type OrganizationPage = {
  __typename?: 'OrganizationPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<Organization>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type Panel = {
  __typename?: 'Panel';
  /** specific fields and chart types for metric data */
  diagrams?: Maybe<Array<Diagram>>;
  /** panel corresponding metric data */
  metric?: Maybe<ModelMetric>;
};

export type Permission = {
  __typename?: 'Permission';
  canDestroy: Scalars['Boolean'];
  canExecute: Scalars['Boolean'];
  canRead: Scalars['Boolean'];
  canUpdate: Scalars['Boolean'];
};

export type PictureCountDetail = {
  __typename?: 'PictureCountDetail';
  audios?: Maybe<Scalars['Int']>;
  codeBlocks?: Maybe<Scalars['Int']>;
  externalLinks?: Maybe<Scalars['Int']>;
  images?: Maybe<Scalars['Int']>;
  videos?: Maybe<Scalars['Int']>;
};

export type ProjectCompletionRow = {
  __typename?: 'ProjectCompletionRow';
  /** second collections of this label */
  collections?: Maybe<Array<Scalars['String']>>;
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level (project or repo) */
  level?: Maybe<Scalars['String']>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
  /** metric task status (pending/progress/success/error/canceled/unsumbit) */
  status?: Maybe<Scalars['String']>;
  /** metric model last update time */
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type ProjectTypeInput = {
  /** project's repositories list */
  repoList: Array<Scalars['String']>;
  /** project type label */
  type: Scalars['String'];
};

export type ProjectVersionModel = {
  __typename?: 'ProjectVersionModel';
  items?: Maybe<Array<ProjectVersionModelDetail>>;
};

export type ProjectVersionModelDetail = {
  __typename?: 'ProjectVersionModelDetail';
  activityQuarterlyContribution?: Maybe<Array<Scalars['Int']>>;
  activityQuarterlyContributionBot?: Maybe<Array<Scalars['Int']>>;
  activityQuarterlyContributionWithoutBot?: Maybe<Array<Scalars['Int']>>;
  codeReadability?: Maybe<Scalars['Int']>;
  codeReadabilityDetail?: Maybe<Array<CodeReadabilityDetail>>;
  docNumber?: Maybe<Scalars['Int']>;
  docQuarty?: Maybe<Scalars['Int']>;
  docQuartyDetails?: Maybe<Array<DocQuartyDetail>>;
  folderDocumentDetails?: Maybe<Array<FolderDocumentDetail>>;
  label: Scalars['String'];
  licenseChangeClaimsRequired?: Maybe<Scalars['Int']>;
  licenseChangeClaimsRequiredDetails?: Maybe<Scalars['String']>;
  licenseCommercialAllowed?: Maybe<Scalars['Int']>;
  licenseCommercialAllowedDetails?: Maybe<Scalars['String']>;
  licenseConflictsExist?: Maybe<Scalars['Int']>;
  licenseDepConflictsExist?: Maybe<Scalars['Int']>;
  licenseDepConflictsExistDetails?: Maybe<Scalars['String']>;
  licenseDepConflictsExistStatus?: Maybe<Scalars['String']>;
  licenseIsWeak?: Maybe<Scalars['Int']>;
  licenseIsWeakDetails?: Maybe<Scalars['String']>;
  licenseList?: Maybe<Array<Scalars['String']>>;
  licensesRequiringClaims?: Maybe<Array<Scalars['String']>>;
  nonCommercialLicenses?: Maybe<Array<Scalars['String']>>;
  nonOsiLicenses?: Maybe<Array<Scalars['String']>>;
  orgContribution?: Maybe<Scalars['Int']>;
  orgContributionDetails?: Maybe<Array<OrgContributionDetail>>;
  osiLicenseList?: Maybe<Array<Scalars['String']>>;
  scanner?: Maybe<Scalars['String']>;
  securityScanned?: Maybe<Scalars['Int']>;
  securityScannedInfo?: Maybe<Scalars['String']>;
  securityVulFixed?: Maybe<Scalars['Int']>;
  securityVulFixedInfo?: Maybe<Scalars['String']>;
  securityVulStat?: Maybe<Scalars['Int']>;
  securityVulStatInfo?: Maybe<Scalars['String']>;
  securityVulUnfixed?: Maybe<Scalars['Int']>;
  uuid: Scalars['String'];
  versionNumber: Scalars['String'];
  vulDetectTime?: Maybe<Scalars['Int']>;
  vulDetectTimeDetails?: Maybe<Array<VulDetectTimeDetail>>;
  vulLevelDetails?: Maybe<Array<VulLevelDetail>>;
  vulLevels?: Maybe<Scalars['Int']>;
  vulnerablityFeedbackChannels?: Maybe<Scalars['Int']>;
  vulnerablityFeedbackChannelsDetails?: Maybe<
    Array<VulnerablityFeedbackChannelDetail>
  >;
  zhFilesDetails?: Maybe<Array<ZhFileDetail>>;
  zhFilesNumber?: Maybe<Scalars['Int']>;
};

export type ProjectVersionModelsStatus = {
  __typename?: 'ProjectVersionModelsStatus';
  triggerStatus?: Maybe<Scalars['String']>;
};

export type ProjectVersionTypeInput = {
  /** metric model object identification */
  label: Scalars['String'];
  /** version of the project */
  versionNumber?: InputMaybe<Scalars['String']>;
};

export type PullDetail = {
  __typename?: 'PullDetail';
  closedAt?: Maybe<Scalars['ISO8601DateTime']>;
  createdAt?: Maybe<Scalars['ISO8601DateTime']>;
  idInRepo?: Maybe<Scalars['Int']>;
  labels?: Maybe<Array<Scalars['String']>>;
  mergeAuthorLogin?: Maybe<Scalars['String']>;
  numReviewComments?: Maybe<Scalars['Int']>;
  repository?: Maybe<Scalars['String']>;
  reviewersLogin?: Maybe<Array<Scalars['String']>>;
  state?: Maybe<Scalars['String']>;
  timeToCloseDays?: Maybe<Scalars['Float']>;
  timeToFirstAttentionWithoutBot?: Maybe<Scalars['Float']>;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  userLogin?: Maybe<Scalars['String']>;
};

export type PullDetailOverview = {
  __typename?: 'PullDetailOverview';
  commitCount?: Maybe<Scalars['Int']>;
  pullCommentDistribution?: Maybe<Array<Distribution>>;
  pullCompletionCount?: Maybe<Scalars['Int']>;
  pullCompletionRatio?: Maybe<Scalars['Float']>;
  pullCount?: Maybe<Scalars['Int']>;
  pullStateDistribution?: Maybe<Array<Distribution>>;
  pullUnresponsiveCount?: Maybe<Scalars['Int']>;
  pullUnresponsiveRatio?: Maybe<Scalars['Float']>;
};

export type PullDetailPage = {
  __typename?: 'PullDetailPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<PullDetail>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type QuartyDetail = {
  __typename?: 'QuartyDetail';
  docQuarty?: Maybe<Scalars['Int']>;
  docQuartyDetails?: Maybe<Array<QuartyDocDetail>>;
};

export type QuartyDocDetail = {
  __typename?: 'QuartyDocDetail';
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  pictureCount?: Maybe<PictureCountDetail>;
  wordCount?: Maybe<Scalars['Int']>;
};

export type Query = {
  __typename?: 'Query';
  /** repo or project analysis status (pending/progress/success/error/canceled/unsumbit) */
  analysisStatus: Scalars['String'];
  /** repo or project analysis status (pending/progress/success/error/canceled/unsumbit) */
  analysisStatusVerify: ProjectCompletionRow;
  /** return beta metric overview */
  betaMetricOverview: BetaMetricOverview;
  /** return beta metrics list */
  betaMetricsIndex: Array<BetaMetric>;
  /** Get bulk label and level by a short code list */
  bulkLabelWithLevel: Array<LabelRow>;
  /** Get bulk reports for a label list */
  bulkOverview: Array<Repo>;
  /** Get bulk shortened id for a label list */
  bulkShortenedLabel: Array<LabelRow>;
  /** Get code check detail list of a repo or community */
  codesCheckDetailPage: CodeCheckDetailPage;
  /** Get code check detail list of a repo or community */
  codesCheckPage: CodeCheckPage;
  /** Get code detail list of a repo or community */
  codesDetailPage: CodeDetailPage;
  /** Get code list of a repo or community */
  codesRepoPage: CodeRepoPage;
  /** Get code trend data */
  codesTrend: Array<CodeTrend>;
  /** Get hottest reports of a collection */
  collectionHottest: Array<ProjectCompletionRow>;
  /** Get collection list by a ident */
  collectionList: CollectionPage;
  /** Get commit feedback list of a repo or community */
  commitFeedbackPage: CommitFeedbackPage;
  /** Get Top20 commits Contributor list of a repo or community */
  commitsContributorList: Array<CommitContributor>;
  /** Get commits detail list of a repo or community */
  commitsDetailPage: CommitDetailPage;
  /** Get commits Organization list of a repo or community */
  commitsOrganizationPage: CommitOrganizationPage;
  /** Get commits list of a repo or community */
  commitsRepoPage: CommitRepoPage;
  /** Get commits tech type list of a repo or community */
  commitsSigPage: CommitSigPage;
  /** Get overview data of a contributor detail */
  communityDetailOverview: CommunityDetailOverview;
  /** Get overview data of a community */
  communityOverview: CommunityOverview;
  /** Get repos list of a community */
  communityRepos: RepoPage;
  /** Overview of the value of contributions */
  contributionDetailOverview: ContributionOverview;
  /** Get contributors detail list of a repo or community */
  contributorsDetailList: ContributorDetailPage;
  /** Get overview data of a contributor detail */
  contributorsDetailOverview: ContributorDetailOverview;
  currentUser?: Maybe<User>;
  /** Get custom lab model analysis status (pending/progress/success/error/canceled/unsumbit) */
  customAnalysisStatus: Scalars['String'];
  /** Fuzzy search dataset by keyword */
  datasetFuzzySearch?: Maybe<Array<DatasetCompletionRow>>;
  /** Get data of Compass Collections */
  datasetOverview?: Maybe<Array<Scalars['String']>>;
  /** Get contributors overview by ecological type */
  ecoContributorsOverview: Array<ContributorTopOverview>;
  /** Fuzzy search project by keyword */
  fuzzySearch: Array<ProjectCompletionRow>;
  /** Get invitations data of a lab model */
  invitationOverview?: Maybe<InvitationPage>;
  /** Get issues detail list of a repo or community */
  issuesDetailList: IssueDetailPage;
  /** Get overview data of a issue detail */
  issuesDetailOverview: IssueDetailOverview;
  /** Get comment detail data with comment id */
  labModelCommentDetail?: Maybe<ModelComment>;
  /** Get comments data of a lab model */
  labModelComments?: Maybe<ModelCommentPage>;
  /** Get detail data of a lab model */
  labModelDetail?: Maybe<ModelDetail>;
  /** Get public lab model data of OSS Compass */
  labModelPublicOverview?: Maybe<ModelPublicPage>;
  /** Get detail data of a lab model version */
  labModelVersion?: Maybe<ModelVersion>;
  /** Get thumbnail data of a lab model version reports */
  labModelVersionReportDetail?: Maybe<Report>;
  /** Get thumbnail data of a lab model version reports */
  labModelVersionReportList?: Maybe<Array<SimpleReport>>;
  /** Get latest metrics data of the specified label */
  latestMetrics: LatestMetrics;
  /** Get members data of a lab model */
  memberOverview?: Maybe<MemberPage>;
  /** Get activity metrics data of compass */
  metricActivity: Array<ActivityMetric>;
  /** Get code quality metrics data of compass */
  metricCodequality: Array<CodequalityMetric>;
  /** Get community metrics data of compass */
  metricCommunity: Array<CommunityMetric>;
  /** Get domain persona metrics */
  metricDomainPersona: Array<DomainPersonaMetric>;
  /** Get group activity metrics data of compass */
  metricGroupActivity: Array<GroupActivityMetric>;
  /** Get milestone persona metrics */
  metricMilestonePersona: Array<MilestonePersonaMetric>;
  /** Metric models graph */
  metricModelsOverview: Array<Model>;
  /** Get role persona metrics */
  metricRolePersona: Array<RolePersonaMetric>;
  /** Get overview data of metrics set on compass lab */
  metricSetOverview?: Maybe<Array<ModelMetric>>;
  /** Get my member permissions of a lab model */
  myMemberPermission?: Maybe<Permission>;
  /** Get report data of my lab models */
  myModelReports?: Maybe<MyReport>;
  /** Get detail data of my lab models */
  myModels?: Maybe<MyModels>;
  /** Get organization contributors distribution */
  orgContributionDistribution: Array<ContributorTopOverview>;
  /** Get organization contributors distribution */
  orgContributorsDistribution: Array<ContributorTopOverview>;
  /** Get organization contributors overview */
  orgContributorsOverview: Array<ContributorTopOverview>;
  /** Fuzzy search organization by keyword */
  orgFuzzySearch: Array<OrgCompletionRow>;
  /** Get organization list */
  organizationPage: OrganizationPage;
  /** Get project trigger status */
  projectVersionModelsStatusType?: Maybe<ProjectVersionModelsStatus>;
  /** Get project detail */
  projectVersionModelsType?: Maybe<ProjectVersionModel>;
  /** Get overview data of a repo */
  pullsDetailList: PullDetailPage;
  /** Get overview data of a pull detail */
  pullsDetailOverview: PullDetailOverview;
  /** Get report data of the lab model */
  referenceModelReports?: Maybe<MyReport>;
  /** Search for community where specifical repos are included */
  repoBelongsTo: Array<ProjectCompletionRow>;
  /** Get detail data of my lab models */
  subjectAccessLevelPage?: Maybe<SubjectAccessLevelPage>;
  /** Get subject customization list */
  subjectCustomizationList?: Maybe<Array<SubjectCustomization>>;
  /** Get community sig activity metrics data of compass */
  subjectSigActivityMetric: Array<SubjectSigMetric>;
  /** Get community sig activity metrics data of compass */
  subjectSigCommitMetric: Array<SubjectSigMetric>;
  /** Get community sig activity metrics data of compass */
  subjectSigCommunityMetric: Array<SubjectSigMetric>;
  /** Get subject sig data of my lab models */
  subjectSigPage?: Maybe<SubjectSigPage>;
  subjectSubscriptionCount: SubjectSubscriptionCount;
  /** Get activity summary data of compass */
  summaryActivity: Array<ActivitySummary>;
  /** Get codequality summary data of compass */
  summaryCodequality: Array<CodequalitySummary>;
  /** Get community summary data of compass */
  summaryCommunity: Array<CommunitySummary>;
  /** Get group activity summary data of compass */
  summaryGroupActivity: Array<GroupActivitySummary>;
  /** Get list of token */
  tokenList?: Maybe<Array<Token>>;
  /** Get tpc software graduation */
  tpcSoftwareGraduation?: Maybe<TpcSoftwareGraduation>;
  /** Get tpc software graduation list */
  tpcSoftwareGraduationPage?: Maybe<TpcSoftwareGraduationPage>;
  /** Get tpc software graduation report apply page */
  tpcSoftwareGraduationReport?: Maybe<TpcSoftwareGraduationReport>;
  /** Get tpc software graduation report apply page */
  tpcSoftwareGraduationReportPage?: Maybe<TpcSoftwareGraduationReportPage>;
  /** Get tpc software lectotype */
  tpcSoftwareLectotype?: Maybe<TpcSoftwareLectotype>;
  /** Get tpc software lectotype list */
  tpcSoftwareLectotypePage?: Maybe<TpcSoftwareLectotypePage>;
  /** Get tpc software lectotype report apply page */
  tpcSoftwareLectotypeReport?: Maybe<TpcSoftwareLectotypeReport>;
  /** Get tpc software lectotype report apply page */
  tpcSoftwareLectotypeReportPage?: Maybe<TpcSoftwareLectotypeReportPage>;
  /** Get tpc software lectotype search */
  tpcSoftwareLectotypeSearch?: Maybe<Array<TpcSoftwareLectotypeSearch>>;
  /** Get tpc software my creation overview */
  tpcSoftwareMyCreationOverview?: Maybe<TpcSoftwareMyCreationAndReviewOverview>;
  /** Get tpc software my creation page */
  tpcSoftwareMyCreationPage?: Maybe<TpcSoftwareMyCreationAndReviewPage>;
  /** Get tpc software my review overview */
  tpcSoftwareMyReviewOverview?: Maybe<TpcSoftwareMyCreationAndReviewOverview>;
  /** Get tpc software my review page */
  tpcSoftwareMyReviewPage?: Maybe<TpcSoftwareMyCreationAndReviewPage>;
  /** Get tpc software report metric clarification page */
  tpcSoftwareReportMetricClarificationPage?: Maybe<TpcSoftwareCommentPage>;
  /** Get tpc software report metric clarification permission */
  tpcSoftwareReportMetricClarificationPermission?: Maybe<TpcSoftwareReportMetricClarificationPermission>;
  /** Get tpc software selection */
  tpcSoftwareSelection?: Maybe<TpcSoftwareSelection>;
  /** Get tpc software selection comment page */
  tpcSoftwareSelectionCommentPage?: Maybe<TpcSoftwareCommentPage>;
  /** Get tpc software selection list */
  tpcSoftwareSelectionPage?: Maybe<TpcSoftwareSelectionPage>;
  /** Get tpc software selection report apply page */
  tpcSoftwareSelectionReport?: Maybe<TpcSoftwareSelectionReport>;
  /** Get tpc software selection report apply page */
  tpcSoftwareSelectionReportPage?: Maybe<TpcSoftwareSelectionReportPage>;
  /** Get tpc software selection search */
  tpcSoftwareSelectionSearch?: Maybe<Array<TpcSoftwareSelectionSearch>>;
  /** Get tpc software sig list */
  tpcSoftwareSigList?: Maybe<Array<TpcSoftwareSig>>;
  /** Get trending data of compass */
  trending: Array<Trending>;
  /** Fuzzy search by mailbox and name */
  userSearch: Array<User>;
  /** Check if the data range is valid */
  verifyDetailDataRange: ValidDataRange;
};

export type QueryAnalysisStatusArgs = {
  label: Scalars['String'];
};

export type QueryAnalysisStatusVerifyArgs = {
  label?: InputMaybe<Scalars['String']>;
  shortCode?: InputMaybe<Scalars['String']>;
};

export type QueryBetaMetricOverviewArgs = {
  id: Scalars['Int'];
  limit?: InputMaybe<Scalars['Int']>;
};

export type QueryBetaMetricsIndexArgs = {
  dimensionality?: InputMaybe<Scalars['String']>;
  metric?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  status?: InputMaybe<Scalars['String']>;
};

export type QueryBulkLabelWithLevelArgs = {
  shortCodes: Array<Scalars['String']>;
};

export type QueryBulkOverviewArgs = {
  labels: Array<Scalars['String']>;
};

export type QueryBulkShortenedLabelArgs = {
  labels: Array<LabelRowInput>;
};

export type QueryCodesCheckDetailPageArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  branch?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryCodesCheckPageArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  branch?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryCodesDetailPageArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  branch?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryCodesRepoPageArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  branch?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryCodesTrendArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  branch?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QueryCollectionHottestArgs = {
  ident: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  limit?: InputMaybe<Scalars['Int']>;
};

export type QueryCollectionListArgs = {
  ident: Scalars['String'];
  keyword?: InputMaybe<Scalars['String']>;
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryCommitFeedbackPageArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryCommitsContributorListArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  branch?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QueryCommitsDetailPageArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  branch?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryCommitsOrganizationPageArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  branch?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryCommitsRepoPageArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  branch?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryCommitsSigPageArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  branch?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryCommunityDetailOverviewArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QueryCommunityOverviewArgs = {
  label: Scalars['String'];
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<Scalars['String']>;
};

export type QueryCommunityReposArgs = {
  label: Scalars['String'];
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<Scalars['String']>;
};

export type QueryContributionDetailOverviewArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QueryContributorsDetailListArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryContributorsDetailOverviewArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QueryCustomAnalysisStatusArgs = {
  modelId: Scalars['Int'];
  versionId: Scalars['Int'];
};

export type QueryDatasetFuzzySearchArgs = {
  keyword: Scalars['String'];
};

export type QueryDatasetOverviewArgs = {
  firstIdent?: InputMaybe<Scalars['String']>;
  secondIdent?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
};

export type QueryEcoContributorsOverviewArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QueryFuzzySearchArgs = {
  keyword: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QueryInvitationOverviewArgs = {
  modelId?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
};

export type QueryIssuesDetailListArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryIssuesDetailOverviewArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QueryLabModelCommentDetailArgs = {
  commentId: Scalars['Int'];
  modelId: Scalars['Int'];
};

export type QueryLabModelCommentsArgs = {
  direction?: InputMaybe<Scalars['String']>;
  modelId: Scalars['Int'];
  modelMetricId?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['Int']>;
  parentId?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<Scalars['String']>;
  versionId?: InputMaybe<Scalars['Int']>;
};

export type QueryLabModelDetailArgs = {
  modelId: Scalars['Int'];
};

export type QueryLabModelPublicOverviewArgs = {
  direction?: InputMaybe<Scalars['String']>;
  metricId?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<Scalars['String']>;
};

export type QueryLabModelVersionArgs = {
  modelId: Scalars['Int'];
  versionId: Scalars['Int'];
};

export type QueryLabModelVersionReportDetailArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label?: InputMaybe<Scalars['String']>;
  modelId: Scalars['Int'];
  shortCode?: InputMaybe<Scalars['String']>;
  versionId: Scalars['Int'];
};

export type QueryLabModelVersionReportListArgs = {
  modelId: Scalars['Int'];
  versionId: Scalars['Int'];
};

export type QueryLatestMetricsArgs = {
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QueryMemberOverviewArgs = {
  modelId?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
};

export type QueryMetricActivityArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  repoType?: InputMaybe<Scalars['String']>;
};

export type QueryMetricCodequalityArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  repoType?: InputMaybe<Scalars['String']>;
};

export type QueryMetricCommunityArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  repoType?: InputMaybe<Scalars['String']>;
};

export type QueryMetricDomainPersonaArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  repoType?: InputMaybe<Scalars['String']>;
};

export type QueryMetricGroupActivityArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  repoType?: InputMaybe<Scalars['String']>;
};

export type QueryMetricMilestonePersonaArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  repoType?: InputMaybe<Scalars['String']>;
};

export type QueryMetricModelsOverviewArgs = {
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  repoType?: InputMaybe<Scalars['String']>;
};

export type QueryMetricRolePersonaArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  repoType?: InputMaybe<Scalars['String']>;
};

export type QueryMyMemberPermissionArgs = {
  modelId?: InputMaybe<Scalars['Int']>;
};

export type QueryMyModelReportsArgs = {
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
};

export type QueryMyModelsArgs = {
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
};

export type QueryOrgContributionDistributionArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QueryOrgContributorsDistributionArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QueryOrgContributorsOverviewArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QueryOrgFuzzySearchArgs = {
  keyword: Scalars['String'];
};

export type QueryOrganizationPageArgs = {
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryProjectVersionModelsStatusTypeArgs = {
  label: Scalars['String'];
  versionNumber: Scalars['String'];
};

export type QueryProjectVersionModelsTypeArgs = {
  label: Scalars['String'];
  versionNumber: Scalars['String'];
};

export type QueryPullsDetailListArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryPullsDetailOverviewArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QueryReferenceModelReportsArgs = {
  modelId: Scalars['Int'];
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
};

export type QueryRepoBelongsToArgs = {
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QuerySubjectAccessLevelPageArgs = {
  accessLevel?: InputMaybe<Scalars['Int']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
};

export type QuerySubjectSigActivityMetricArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QuerySubjectSigCommitMetricArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QuerySubjectSigCommunityMetricArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
};

export type QuerySubjectSigPageArgs = {
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
};

export type QuerySubjectSubscriptionCountArgs = {
  label: Scalars['String'];
  level: Scalars['String'];
};

export type QuerySummaryActivityArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
};

export type QuerySummaryCodequalityArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
};

export type QuerySummaryCommunityArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
};

export type QuerySummaryGroupActivityArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
};

export type QueryTpcSoftwareGraduationArgs = {
  graduationId: Scalars['Int'];
};

export type QueryTpcSoftwareGraduationPageArgs = {
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label?: InputMaybe<Scalars['String']>;
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryTpcSoftwareGraduationReportArgs = {
  shortCode: Scalars['String'];
};

export type QueryTpcSoftwareGraduationReportPageArgs = {
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label?: InputMaybe<Scalars['String']>;
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryTpcSoftwareLectotypeArgs = {
  lectotypeId: Scalars['Int'];
};

export type QueryTpcSoftwareLectotypePageArgs = {
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label?: InputMaybe<Scalars['String']>;
  lectotypeType: Scalars['Int'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryTpcSoftwareLectotypeReportArgs = {
  shortCode: Scalars['String'];
};

export type QueryTpcSoftwareLectotypeReportPageArgs = {
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label?: InputMaybe<Scalars['String']>;
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  reportTypeList: Array<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryTpcSoftwareLectotypeSearchArgs = {
  keyword: Scalars['String'];
  label?: InputMaybe<Scalars['String']>;
  level?: InputMaybe<Scalars['String']>;
};

export type QueryTpcSoftwareMyCreationOverviewArgs = {
  label: Scalars['String'];
  level: Scalars['String'];
};

export type QueryTpcSoftwareMyCreationPageArgs = {
  applicationType: Scalars['Int'];
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level: Scalars['String'];
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryTpcSoftwareMyReviewOverviewArgs = {
  label?: InputMaybe<Scalars['String']>;
  level?: InputMaybe<Scalars['String']>;
};

export type QueryTpcSoftwareMyReviewPageArgs = {
  applicationType: Scalars['Int'];
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label: Scalars['String'];
  level: Scalars['String'];
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryTpcSoftwareReportMetricClarificationPageArgs = {
  metricName: Scalars['String'];
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  reportType?: InputMaybe<Scalars['Int']>;
  shortCode: Scalars['String'];
};

export type QueryTpcSoftwareReportMetricClarificationPermissionArgs = {
  reportType?: InputMaybe<Scalars['Int']>;
  shortCode: Scalars['String'];
};

export type QueryTpcSoftwareSelectionArgs = {
  selectionId: Scalars['Int'];
};

export type QueryTpcSoftwareSelectionCommentPageArgs = {
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  reportType?: InputMaybe<Scalars['Int']>;
  selectionId: Scalars['Int'];
};

export type QueryTpcSoftwareSelectionPageArgs = {
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label?: InputMaybe<Scalars['String']>;
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  selectionType: Scalars['Int'];
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryTpcSoftwareSelectionReportArgs = {
  shortCode: Scalars['String'];
};

export type QueryTpcSoftwareSelectionReportPageArgs = {
  filterOpts?: InputMaybe<Array<FilterOptionInput>>;
  label?: InputMaybe<Scalars['String']>;
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  reportTypeList: Array<Scalars['Int']>;
  sortOpts?: InputMaybe<Array<SortOptionInput>>;
};

export type QueryTpcSoftwareSelectionSearchArgs = {
  keyword: Scalars['String'];
  label?: InputMaybe<Scalars['String']>;
  level?: InputMaybe<Scalars['String']>;
  selectionType: Scalars['Int'];
};

export type QueryTpcSoftwareSigListArgs = {
  label?: InputMaybe<Scalars['String']>;
  level?: InputMaybe<Scalars['String']>;
};

export type QueryTrendingArgs = {
  level?: InputMaybe<Scalars['String']>;
};

export type QueryUserSearchArgs = {
  keyword: Scalars['String'];
};

export type QueryVerifyDetailDataRangeArgs = {
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  label?: InputMaybe<Scalars['String']>;
  shortCode?: InputMaybe<Scalars['String']>;
};

export type Repo = {
  __typename?: 'Repo';
  backend?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  forksCount?: Maybe<Scalars['Int']>;
  language?: Maybe<Scalars['String']>;
  metricActivity: Array<ActivityMetric>;
  name?: Maybe<Scalars['String']>;
  openIssuesCount?: Maybe<Scalars['Int']>;
  origin: Scalars['String'];
  path?: Maybe<Scalars['String']>;
  shortCode?: Maybe<Scalars['String']>;
  stargazersCount?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
  watchersCount?: Maybe<Scalars['Int']>;
};

export type RepoExtensionInput = {
  /** Repository manager or administrator */
  manager: Scalars['String'];
  /** Repository manager email or administrator email */
  managerEmail: Scalars['String'];
  /** Repository attribute type, either self-developed or third-party */
  repoAttributeType: Scalars['String'];
  /** Repository name */
  repoName: Scalars['String'];
};

export type RepoPage = {
  __typename?: 'RepoPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<SubRepo>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type Report = {
  __typename?: 'Report';
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level */
  level?: Maybe<Scalars['String']>;
  /** main score diagram for metric model */
  mainScore?: Maybe<Diagram>;
  /** metric panels data of lab model */
  panels?: Maybe<Array<Panel>>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
  /** metric scores for repositories type, only for community (software-artifact/governance) */
  type?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ReviewCommitFeedback */
export type ReviewCommitFeedbackInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Commit feedback id */
  id: Scalars['String'];
  /** repo or project label */
  label: Scalars['String'];
  /** repo or community */
  level?: InputMaybe<Scalars['String']>;
  /** Review comments */
  reviewMsg: Scalars['String'];
  /** Review conclusions: 'approved', 'rejected' ,default: 'approved' */
  state: Scalars['String'];
};

/** Autogenerated return type of ReviewCommitFeedback. */
export type ReviewCommitFeedbackPayload = {
  __typename?: 'ReviewCommitFeedbackPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

export type RolePersonaMetric = {
  __typename?: 'RolePersonaMetric';
  /** activity individual contribution per person */
  activityIndividualContributionPerPerson?: Maybe<Scalars['Float']>;
  /** activity individual contributor count */
  activityIndividualContributorCount?: Maybe<Scalars['Float']>;
  /** activity organization contribution per person */
  activityOrganizationContributionPerPerson?: Maybe<Scalars['Float']>;
  /** activity organization contributor count */
  activityOrganizationContributorCount?: Maybe<Scalars['Float']>;
  /** metric model creatiton time */
  grimoireCreationDate?: Maybe<Scalars['ISO8601DateTime']>;
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level */
  level?: Maybe<Scalars['String']>;
  /** role persona score */
  rolePersonaScore?: Maybe<Scalars['Float']>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
  /** metric scores for repositories type, only for community (software-artifact/governance) */
  type?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of SendEmailVerify */
export type SendEmailVerifyInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of SendEmailVerify. */
export type SendEmailVerifyPayload = {
  __typename?: 'SendEmailVerifyPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of SendMemberInvite */
export type SendMemberInviteInput = {
  /** permission to execute model analysis, `default: false` */
  canExecute?: InputMaybe<Scalars['Boolean']>;
  /** permission to change model properties, `default: false` */
  canUpdate?: InputMaybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** target member emails */
  emails: Array<Scalars['String']>;
  /** lab model id */
  modelId: Scalars['Int'];
};

/** Autogenerated return type of SendMemberInvite. */
export type SendMemberInvitePayload = {
  __typename?: 'SendMemberInvitePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

export type SimpleReport = {
  __typename?: 'SimpleReport';
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level */
  level?: Maybe<Scalars['String']>;
  /** main score diagram for metric model */
  mainScore?: Maybe<Diagram>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
  /** metric scores for repositories type, only for community (software-artifact/governance) */
  type?: Maybe<Scalars['String']>;
};

export type SimpleUser = {
  __typename?: 'SimpleUser';
  avatarUrl?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  name: Scalars['String'];
};

export type SortOptionInput = {
  /** sort direction, optional: desc, asc, default: desc */
  direction: Scalars['String'];
  /** sort type value */
  type: Scalars['String'];
};

export type SubRepo = {
  __typename?: 'SubRepo';
  label?: Maybe<Scalars['String']>;
};

export type SubjectAccessLevel = {
  __typename?: 'SubjectAccessLevel';
  /** NORMAL/COMMITTER: 0, PRIVILEGED/LEADER: 1 */
  accessLevel: Scalars['Int'];
  id: Scalars['Int'];
  subjectId: Scalars['Int'];
  user?: Maybe<User>;
  userId: Scalars['Int'];
};

export type SubjectAccessLevelPage = {
  __typename?: 'SubjectAccessLevelPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<SubjectAccessLevel>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type SubjectCustomization = {
  __typename?: 'SubjectCustomization';
  label: Scalars['String'];
  level: Scalars['String'];
  name: Scalars['String'];
};

export type SubjectLinkSig = {
  __typename?: 'SubjectLinkSig';
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** metric model object level (project or repo) */
  level?: Maybe<Scalars['String']>;
  repos?: Maybe<Array<Scalars['String']>>;
};

export type SubjectSig = {
  __typename?: 'SubjectSig';
  description: Scalars['String'];
  emails: Array<Scalars['String']>;
  id: Scalars['Int'];
  linkSig?: Maybe<SubjectLinkSig>;
  maintainers: Array<Scalars['String']>;
  name: Scalars['String'];
};

export type SubjectSigMetric = {
  __typename?: 'SubjectSigMetric';
  detailList?: Maybe<Array<SubjectSigMetricDetail>>;
  label?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
  sigName?: Maybe<Scalars['String']>;
};

export type SubjectSigMetricDetail = {
  __typename?: 'SubjectSigMetricDetail';
  date?: Maybe<Scalars['ISO8601DateTime']>;
  score?: Maybe<Scalars['Float']>;
};

export type SubjectSigPage = {
  __typename?: 'SubjectSigPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<SubjectSig>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type SubjectSubscriptionCount = {
  __typename?: 'SubjectSubscriptionCount';
  count: Scalars['Int'];
  subscribed: Scalars['Boolean'];
};

export type Subscription = {
  __typename?: 'Subscription';
  collectAt?: Maybe<Scalars['ISO8601DateTime']>;
  completeAt?: Maybe<Scalars['ISO8601DateTime']>;
  count: Scalars['Int'];
  id: Scalars['Int'];
  label: Scalars['String'];
  level: Scalars['String'];
  status: Scalars['String'];
  statusUpdatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type SubscriptionPage = {
  __typename?: 'SubscriptionPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<Subscription>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type Token = {
  __typename?: 'Token';
  expiresAt?: Maybe<Scalars['ISO8601DateTime']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
};

export type TpcSoftwareComment = {
  __typename?: 'TpcSoftwareComment';
  content?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ISO8601DateTime']>;
  id: Scalars['Int'];
  metricName?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user?: Maybe<User>;
  userId?: Maybe<Scalars['String']>;
};

export type TpcSoftwareCommentPage = {
  __typename?: 'TpcSoftwareCommentPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<TpcSoftwareComment>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareCommentState = {
  __typename?: 'TpcSoftwareCommentState';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['Int'];
  /** committer: 0, sig lead: 1 */
  memberType?: Maybe<Scalars['Int']>;
  metricName?: Maybe<Scalars['String']>;
  /** reject: -1, accept: 1 */
  state?: Maybe<Scalars['Int']>;
  updatedAt: Scalars['ISO8601DateTime'];
  user?: Maybe<User>;
  userId: Scalars['Int'];
};

export type TpcSoftwareGraduation = {
  __typename?: 'TpcSoftwareGraduation';
  awaitingClarificationCount?: Maybe<Scalars['Int']>;
  awaitingConfirmationCount?: Maybe<Scalars['Int']>;
  clarifiedCount?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentCommitterPermission?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentCompliancePermission?: Maybe<Scalars['Int']>;
  commentCount?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentLegalPermission?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentQaPermission?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentSigLeadPermission?: Maybe<Scalars['Int']>;
  commentState?: Maybe<Array<TpcSoftwareCommentState>>;
  committerCount?: Maybe<Scalars['Int']>;
  committers?: Maybe<Array<Scalars['String']>>;
  complianceCount?: Maybe<Scalars['Int']>;
  confirmedCount?: Maybe<Scalars['Int']>;
  createdAt: Scalars['ISO8601DateTime'];
  demandSource?: Maybe<Scalars['String']>;
  functionalDescription?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  incubationStartTime?: Maybe<Scalars['ISO8601DateTime']>;
  incubationTime?: Maybe<Scalars['String']>;
  issueUrl?: Maybe<Scalars['String']>;
  legalCount?: Maybe<Scalars['Int']>;
  riskCount?: Maybe<Scalars['Int']>;
  sigLeadCount?: Maybe<Scalars['Int']>;
  /** 0: awaiting_clarification 1: awaiting_confirmation 2: awaiting_review 3: completed -1:rejected */
  state?: Maybe<Scalars['Int']>;
  tpcSoftwareGraduationReportIds?: Maybe<Array<Scalars['Int']>>;
  tpcSoftwareGraduationReports?: Maybe<Array<TpcSoftwareGraduationReport>>;
  updatedAt: Scalars['ISO8601DateTime'];
  user?: Maybe<User>;
  userId: Scalars['Int'];
};

export type TpcSoftwareGraduationMetricEcologyCodeReview = {
  __typename?: 'TpcSoftwareGraduationMetricEcologyCodeReview';
  pullCount?: Maybe<Scalars['Int']>;
  pullReviewCount?: Maybe<Scalars['Int']>;
  pullReviewRatio?: Maybe<Scalars['Float']>;
};

export type TpcSoftwareGraduationMetricEcologyIssueManagement = {
  __typename?: 'TpcSoftwareGraduationMetricEcologyIssueManagement';
  issueCount?: Maybe<Scalars['Int']>;
  issueTypeList?: Maybe<Array<Scalars['String']>>;
};

export type TpcSoftwareGraduationMetricEcologyIssueResponseRatio = {
  __typename?: 'TpcSoftwareGraduationMetricEcologyIssueResponseRatio';
  issueCount?: Maybe<Scalars['Int']>;
  issueResponseCount?: Maybe<Scalars['Int']>;
  issueResponseRatio?: Maybe<Scalars['Float']>;
};

export type TpcSoftwareGraduationMetricEcologyIssueResponseTime = {
  __typename?: 'TpcSoftwareGraduationMetricEcologyIssueResponseTime';
  issueResponseCount?: Maybe<Scalars['Int']>;
  issueResponseTime?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareGraduationPage = {
  __typename?: 'TpcSoftwareGraduationPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<TpcSoftwareGraduation>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareGraduationReport = {
  __typename?: 'TpcSoftwareGraduationReport';
  adaptationMethod?: Maybe<Scalars['String']>;
  architectureDiagrams?: Maybe<Array<Image>>;
  codeCount?: Maybe<Scalars['Int']>;
  codeUrl?: Maybe<Scalars['String']>;
  graduationReportMetric?: Maybe<TpcSoftwareGraduationReportMetric>;
  graduationReportMetricRaw?: Maybe<TpcSoftwareGraduationReportMetricRaw>;
  id: Scalars['Int'];
  isIncubation?: Maybe<Scalars['Int']>;
  license?: Maybe<Scalars['String']>;
  lifecyclePolicy?: Maybe<Scalars['String']>;
  metricClarificationCount?: Maybe<TpcSoftwareGraduationReportMetricClarificationCount>;
  metricClarificationState?: Maybe<TpcSoftwareGraduationReportMetricClarificationState>;
  name?: Maybe<Scalars['String']>;
  ohCommitSha?: Maybe<Scalars['String']>;
  programmingLanguage?: Maybe<Scalars['String']>;
  roundUpstream?: Maybe<Scalars['String']>;
  shortCode: Scalars['String'];
  tpcSoftwareSig?: Maybe<TpcSoftwareSig>;
  tpcSoftwareSigId?: Maybe<Scalars['Int']>;
  upstreamCodeUrl?: Maybe<Scalars['String']>;
  user?: Maybe<User>;
  userId: Scalars['Int'];
};

export type TpcSoftwareGraduationReportInput = {
  adaptationMethod: Scalars['String'];
  architectureDiagrams?: InputMaybe<Array<Base64ImageInput>>;
  codeUrl: Scalars['String'];
  isIncubation: Scalars['Int'];
  lifecyclePolicy: Scalars['String'];
  name: Scalars['String'];
  ohCommitSha: Scalars['String'];
  programmingLanguage: Scalars['String'];
  roundUpstream?: InputMaybe<Scalars['String']>;
  tpcSoftwareSigId: Scalars['Int'];
  upstreamCodeUrl?: InputMaybe<Scalars['String']>;
};

export type TpcSoftwareGraduationReportMetric = {
  __typename?: 'TpcSoftwareGraduationReportMetric';
  codeUrl?: Maybe<Scalars['String']>;
  complianceCopyrightStatement?: Maybe<Scalars['Int']>;
  complianceCopyrightStatementAntiTamper?: Maybe<Scalars['Int']>;
  complianceCopyrightStatementAntiTamperDetail?: Maybe<Scalars['String']>;
  complianceCopyrightStatementDetail?: Maybe<TpcSoftwareReportMetricComplianceCopyrightStatement>;
  complianceDco?: Maybe<Scalars['Int']>;
  complianceDcoDetail?: Maybe<TpcSoftwareReportMetricComplianceDco>;
  complianceLicense?: Maybe<Scalars['Int']>;
  complianceLicenseCompatibility?: Maybe<Scalars['Int']>;
  complianceLicenseCompatibilityDetail?: Maybe<TpcSoftwareReportMetricComplianceLicenseCompatibility>;
  complianceLicenseDetail?: Maybe<TpcSoftwareGraduationReportMetricComplianceLicense>;
  complianceSnippetReference?: Maybe<Scalars['Int']>;
  complianceSnippetReferenceDetail?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ISO8601DateTime']>;
  ecologyBuild?: Maybe<Scalars['Int']>;
  ecologyBuildDetail?: Maybe<Scalars['String']>;
  ecologyBuildDoc?: Maybe<Scalars['Int']>;
  ecologyBuildDocDetail?: Maybe<Scalars['String']>;
  ecologyCi?: Maybe<Scalars['Int']>;
  ecologyCiDetail?: Maybe<Scalars['String']>;
  ecologyCodeReview?: Maybe<Scalars['Int']>;
  ecologyCodeReviewDetail?: Maybe<TpcSoftwareGraduationMetricEcologyCodeReview>;
  ecologyCodeUpstream?: Maybe<Scalars['Int']>;
  ecologyCodeUpstreamDetail?: Maybe<Scalars['String']>;
  ecologyInterfaceDoc?: Maybe<Scalars['Int']>;
  ecologyInterfaceDocDetail?: Maybe<Scalars['String']>;
  ecologyIssueManagement?: Maybe<Scalars['Int']>;
  ecologyIssueManagementDetail?: Maybe<TpcSoftwareGraduationMetricEcologyIssueManagement>;
  ecologyIssueResponseRatio?: Maybe<Scalars['Int']>;
  ecologyIssueResponseRatioDetail?: Maybe<TpcSoftwareGraduationMetricEcologyIssueResponseRatio>;
  ecologyIssueResponseTime?: Maybe<Scalars['Int']>;
  ecologyIssueResponseTimeDetail?: Maybe<TpcSoftwareGraduationMetricEcologyIssueResponseTime>;
  ecologyMaintainerDoc?: Maybe<Scalars['Int']>;
  ecologyMaintainerDocDetail?: Maybe<Scalars['String']>;
  ecologyReadme?: Maybe<Scalars['Int']>;
  ecologyReadmeDetail?: Maybe<Scalars['String']>;
  ecologyTestCoverage?: Maybe<Scalars['Int']>;
  ecologyTestCoverageDetail?: Maybe<TpcSoftwareReportMetricEcologySoftwareQuality>;
  id: Scalars['Int'];
  importValid?: Maybe<Scalars['Int']>;
  importValidDetail?: Maybe<Array<Scalars['String']>>;
  lifecycleReleaseNote?: Maybe<Scalars['Int']>;
  lifecycleReleaseNoteDetail?: Maybe<Array<Scalars['String']>>;
  lifecycleStatement?: Maybe<Scalars['Int']>;
  lifecycleStatementDetail?: Maybe<Scalars['String']>;
  securityBinaryArtifact?: Maybe<Scalars['Int']>;
  securityBinaryArtifactDetail?: Maybe<TpcSoftwareReportMetricSecurityBinaryArtifact>;
  securityPackageSig?: Maybe<Scalars['Int']>;
  securityPackageSigDetail?: Maybe<Array<Scalars['String']>>;
  securityVulnerability?: Maybe<Scalars['Int']>;
  securityVulnerabilityDetail?: Maybe<
    Array<TpcSoftwareReportMetricSecurityVulnerability>
  >;
  /** progress/success */
  status?: Maybe<Scalars['String']>;
  tpcSoftwareGraduationReportId?: Maybe<Scalars['Int']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type TpcSoftwareGraduationReportMetricClarificationCount = {
  __typename?: 'TpcSoftwareGraduationReportMetricClarificationCount';
  complianceCopyrightStatement?: Maybe<Scalars['Int']>;
  complianceCopyrightStatementAntiTamper?: Maybe<Scalars['Int']>;
  complianceDco?: Maybe<Scalars['Int']>;
  complianceLicense?: Maybe<Scalars['Int']>;
  complianceLicenseCompatibility?: Maybe<Scalars['Int']>;
  complianceSnippetReference?: Maybe<Scalars['Int']>;
  ecologyBuild?: Maybe<Scalars['Int']>;
  ecologyBuildDoc?: Maybe<Scalars['Int']>;
  ecologyCi?: Maybe<Scalars['Int']>;
  ecologyCodeReview?: Maybe<Scalars['Int']>;
  ecologyCodeUpstream?: Maybe<Scalars['Int']>;
  ecologyInterfaceDoc?: Maybe<Scalars['Int']>;
  ecologyIssueManagement?: Maybe<Scalars['Int']>;
  ecologyIssueResponseRatio?: Maybe<Scalars['Int']>;
  ecologyIssueResponseTime?: Maybe<Scalars['Int']>;
  ecologyMaintainerDoc?: Maybe<Scalars['Int']>;
  ecologyReadme?: Maybe<Scalars['Int']>;
  ecologyTestCoverage?: Maybe<Scalars['Int']>;
  lifecycleReleaseNote?: Maybe<Scalars['Int']>;
  lifecycleStatement?: Maybe<Scalars['Int']>;
  securityBinaryArtifact?: Maybe<Scalars['Int']>;
  securityPackageSig?: Maybe<Scalars['Int']>;
  securityVulnerability?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareGraduationReportMetricClarificationState = {
  __typename?: 'TpcSoftwareGraduationReportMetricClarificationState';
  complianceCopyrightStatement?: Maybe<Array<TpcSoftwareCommentState>>;
  complianceCopyrightStatementAntiTamper?: Maybe<
    Array<TpcSoftwareCommentState>
  >;
  complianceDco?: Maybe<Array<TpcSoftwareCommentState>>;
  complianceLicense?: Maybe<Array<TpcSoftwareCommentState>>;
  complianceLicenseCompatibility?: Maybe<Array<TpcSoftwareCommentState>>;
  complianceSnippetReference?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyBuild?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyBuildDoc?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyCi?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyCodeReview?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyCodeUpstream?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyInterfaceDoc?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyIssueManagement?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyIssueResponseRatio?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyIssueResponseTime?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyMaintainerDoc?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyReadme?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyTestCoverage?: Maybe<Array<TpcSoftwareCommentState>>;
  lifecycleReleaseNote?: Maybe<Array<TpcSoftwareCommentState>>;
  lifecycleStatement?: Maybe<Array<TpcSoftwareCommentState>>;
  securityBinaryArtifact?: Maybe<Array<TpcSoftwareCommentState>>;
  securityPackageSig?: Maybe<Array<TpcSoftwareCommentState>>;
  securityVulnerability?: Maybe<Array<TpcSoftwareCommentState>>;
};

export type TpcSoftwareGraduationReportMetricComplianceLicense = {
  __typename?: 'TpcSoftwareGraduationReportMetricComplianceLicense';
  nonOsiLicenses?: Maybe<Array<Scalars['String']>>;
  oatDetail?: Maybe<Array<Scalars['String']>>;
  osiPermissiveLicenses?: Maybe<Array<Scalars['String']>>;
  readmeOpensource?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareGraduationReportMetricRaw = {
  __typename?: 'TpcSoftwareGraduationReportMetricRaw';
  codeUrl?: Maybe<Scalars['String']>;
  complianceCopyrightStatementAntiTamperRaw?: Maybe<Scalars['String']>;
  complianceCopyrightStatementRaw?: Maybe<Scalars['String']>;
  complianceDcoRaw?: Maybe<Scalars['String']>;
  complianceLicenseCompatibilityRaw?: Maybe<Scalars['String']>;
  complianceLicenseRaw?: Maybe<Scalars['String']>;
  complianceSnippetReferenceRaw?: Maybe<Scalars['String']>;
  ecologyBuildDocRaw?: Maybe<Scalars['String']>;
  ecologyBuildRaw?: Maybe<Scalars['String']>;
  ecologyCiRaw?: Maybe<Scalars['String']>;
  ecologyCodeReviewRaw?: Maybe<Scalars['String']>;
  ecologyCodeUpstreamRaw?: Maybe<Scalars['String']>;
  ecologyInterfaceDocRaw?: Maybe<Scalars['String']>;
  ecologyIssueManagementRaw?: Maybe<Scalars['String']>;
  ecologyIssueResponseRatioRaw?: Maybe<Scalars['String']>;
  ecologyIssueResponseTimeRaw?: Maybe<Scalars['String']>;
  ecologyMaintainerDocRaw?: Maybe<Scalars['String']>;
  ecologyReadmeRaw?: Maybe<Scalars['String']>;
  ecologyTestCoverageRaw?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  lifecycleReleaseNoteRaw?: Maybe<Scalars['String']>;
  lifecycleStatementRaw?: Maybe<Scalars['String']>;
  securityBinaryArtifactRaw?: Maybe<Scalars['String']>;
  securityPackageSigRaw?: Maybe<Scalars['String']>;
  securityVulnerabilityRaw?: Maybe<Scalars['String']>;
};

export type TpcSoftwareGraduationReportPage = {
  __typename?: 'TpcSoftwareGraduationReportPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<TpcSoftwareGraduationReport>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareGraduationReportUpdateInput = {
  adaptationMethod: Scalars['String'];
  architectureDiagrams?: InputMaybe<Array<Base64ImageInput>>;
  isIncubation: Scalars['Int'];
  lifecyclePolicy: Scalars['String'];
  name: Scalars['String'];
  ohCommitSha?: InputMaybe<Scalars['String']>;
  programmingLanguage: Scalars['String'];
  roundUpstream?: InputMaybe<Scalars['String']>;
  tpcSoftwareSigId: Scalars['Int'];
  upstreamCodeUrl?: InputMaybe<Scalars['String']>;
};

export type TpcSoftwareLectotype = {
  __typename?: 'TpcSoftwareLectotype';
  awaitingClarificationCount?: Maybe<Scalars['Int']>;
  awaitingConfirmationCount?: Maybe<Scalars['Int']>;
  clarifiedCount?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentCommitterPermission?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentCompliancePermission?: Maybe<Scalars['Int']>;
  commentCount?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentLegalPermission?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentQaPermission?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentSigLeadPermission?: Maybe<Scalars['Int']>;
  commentState?: Maybe<Array<TpcSoftwareCommentState>>;
  committerCount?: Maybe<Scalars['Int']>;
  committers?: Maybe<Array<Scalars['String']>>;
  complianceCount?: Maybe<Scalars['Int']>;
  confirmedCount?: Maybe<Scalars['Int']>;
  createdAt: Scalars['ISO8601DateTime'];
  demandSource?: Maybe<Scalars['String']>;
  functionalDescription?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  incubationTime?: Maybe<Scalars['String']>;
  isSameTypeCheck?: Maybe<Scalars['Int']>;
  issueUrl?: Maybe<Scalars['String']>;
  legalCount?: Maybe<Scalars['Int']>;
  reason?: Maybe<Scalars['String']>;
  repoUrl?: Maybe<Array<Scalars['String']>>;
  riskCount?: Maybe<Scalars['Int']>;
  sameTypeSoftwareName?: Maybe<Scalars['String']>;
  sigLeadCount?: Maybe<Scalars['Int']>;
  /** 0: awaiting_clarification 1: awaiting_confirmation 2: awaiting_review 3: completed -1:rejected */
  state?: Maybe<Scalars['Int']>;
  targetSoftware?: Maybe<Scalars['String']>;
  tpcSoftwareLectotypeReportIds?: Maybe<Array<Scalars['String']>>;
  tpcSoftwareLectotypeReports?: Maybe<Array<TpcSoftwareLectotypeReport>>;
  updatedAt: Scalars['ISO8601DateTime'];
  user?: Maybe<User>;
  userId: Scalars['Int'];
};

export type TpcSoftwareLectotypePage = {
  __typename?: 'TpcSoftwareLectotypePage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<TpcSoftwareLectotype>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareLectotypeReport = {
  __typename?: 'TpcSoftwareLectotypeReport';
  adaptationMethod?: Maybe<Scalars['String']>;
  architectureDiagrams?: Maybe<Array<Image>>;
  codeCount?: Maybe<Scalars['Int']>;
  codeUrl?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  license?: Maybe<Scalars['String']>;
  manufacturer?: Maybe<Scalars['String']>;
  metricClarificationCount?: Maybe<TpcSoftwareReportMetricClarificationCount>;
  metricClarificationState?: Maybe<TpcSoftwareReportMetricClarificationState>;
  name?: Maybe<Scalars['String']>;
  programmingLanguage?: Maybe<Scalars['String']>;
  reportType: Scalars['Int'];
  shortCode: Scalars['String'];
  tpcSoftwareReportMetric?: Maybe<TpcSoftwareReportMetric>;
  tpcSoftwareReportMetricRaw?: Maybe<TpcSoftwareReportMetricRaw>;
  tpcSoftwareSig?: Maybe<TpcSoftwareSig>;
  tpcSoftwareSigId?: Maybe<Scalars['Int']>;
  user?: Maybe<User>;
  userId: Scalars['Int'];
  vulnerabilityDisclosure?: Maybe<Scalars['String']>;
  vulnerabilityResponse?: Maybe<Scalars['String']>;
  websiteUrl?: Maybe<Scalars['String']>;
};

export type TpcSoftwareLectotypeReportInput = {
  adaptationMethod: Scalars['String'];
  architectureDiagrams?: InputMaybe<Array<Base64ImageInput>>;
  codeUrl: Scalars['String'];
  name: Scalars['String'];
  ohCommitSha: Scalars['String'];
  programmingLanguage: Scalars['String'];
  tpcSoftwareSigId: Scalars['Int'];
  vulnerabilityResponse: Scalars['String'];
};

export type TpcSoftwareLectotypeReportPage = {
  __typename?: 'TpcSoftwareLectotypeReportPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<TpcSoftwareLectotypeReport>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareLectotypeReportSearch = {
  __typename?: 'TpcSoftwareLectotypeReportSearch';
  adaptationMethod?: Maybe<Scalars['String']>;
  codeUrl?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  programmingLanguage?: Maybe<Scalars['String']>;
  reportType: Scalars['Int'];
  tpcSoftwareSigId?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareLectotypeReportUpdateInput = {
  adaptationMethod: Scalars['String'];
  architectureDiagrams?: InputMaybe<Array<Base64ImageInput>>;
  name: Scalars['String'];
  programmingLanguage: Scalars['String'];
  tpcSoftwareSigId: Scalars['Int'];
  vulnerabilityResponse: Scalars['String'];
};

export type TpcSoftwareLectotypeSearch = {
  __typename?: 'TpcSoftwareLectotypeSearch';
  committers?: Maybe<Array<Scalars['String']>>;
  createdAt: Scalars['ISO8601DateTime'];
  demandSource?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  incubationTime?: Maybe<Scalars['String']>;
  /** incubation: 0, sandbox: 1, graduation: 2 */
  lectotypeType?: Maybe<Scalars['Int']>;
  repoUrl?: Maybe<Array<Scalars['String']>>;
  targetSoftware?: Maybe<Scalars['String']>;
  tpcSoftwareLectotypeReport?: Maybe<TpcSoftwareLectotypeReportSearch>;
  tpcSoftwareLectotypeReportIds?: Maybe<Array<Scalars['String']>>;
};

export type TpcSoftwareMember = {
  __typename?: 'TpcSoftwareMember';
  company?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  giteeAccount?: Maybe<Scalars['String']>;
  githubAccount?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

export type TpcSoftwareMyCreationAndReview = {
  __typename?: 'TpcSoftwareMyCreationAndReview';
  /** 0: incubation 1: graduation */
  applicationType?: Maybe<Scalars['Int']>;
  awaitingClarificationCount?: Maybe<Scalars['Int']>;
  awaitingConfirmationCount?: Maybe<Scalars['Int']>;
  clarifiedCount?: Maybe<Scalars['Int']>;
  committerCount?: Maybe<Scalars['Int']>;
  complianceCount?: Maybe<Scalars['Int']>;
  confirmedCount?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['ISO8601DateTime']>;
  id?: Maybe<Scalars['Int']>;
  issueUrl?: Maybe<Scalars['String']>;
  legalCount?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  riskCount?: Maybe<Scalars['Int']>;
  sigLeadCount?: Maybe<Scalars['Int']>;
  softwareReportShortCodes?: Maybe<Array<Scalars['String']>>;
  /** 0: awaiting_clarification 1: awaiting_confirmation 2: awaiting_review 3: completed -1:rejected */
  state?: Maybe<Scalars['Int']>;
  targetSoftwareReportId?: Maybe<Scalars['Int']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user?: Maybe<User>;
  userId?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareMyCreationAndReviewOverview = {
  __typename?: 'TpcSoftwareMyCreationAndReviewOverview';
  awaitingClarificationCount?: Maybe<Scalars['Int']>;
  awaitingConfirmationCount?: Maybe<Scalars['Int']>;
  awaitingReviewCount?: Maybe<Scalars['Int']>;
  completedCount?: Maybe<Scalars['Int']>;
  graduationCount?: Maybe<Scalars['Int']>;
  incubationCount?: Maybe<Scalars['Int']>;
  rejectedCount?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareMyCreationAndReviewPage = {
  __typename?: 'TpcSoftwareMyCreationAndReviewPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<TpcSoftwareMyCreationAndReview>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareReportMetric = {
  __typename?: 'TpcSoftwareReportMetric';
  baseCodeUrl?: Maybe<Scalars['Int']>;
  baseCodeUrlDetail?: Maybe<Scalars['String']>;
  baseRepoName?: Maybe<Scalars['Int']>;
  baseRepoNameDetail?: Maybe<Scalars['String']>;
  baseWebsiteUrl?: Maybe<Scalars['Int']>;
  baseWebsiteUrlDetail?: Maybe<Scalars['String']>;
  codeUrl?: Maybe<Scalars['String']>;
  complianceDco?: Maybe<Scalars['Int']>;
  complianceDcoDetail?: Maybe<TpcSoftwareReportMetricComplianceDco>;
  complianceLicense?: Maybe<Scalars['Int']>;
  complianceLicenseCompatibility?: Maybe<Scalars['Int']>;
  complianceLicenseCompatibilityDetail?: Maybe<TpcSoftwareReportMetricComplianceLicenseCompatibility>;
  complianceLicenseDetail?: Maybe<TpcSoftwareReportMetricComplianceLicense>;
  compliancePackageSig?: Maybe<Scalars['Int']>;
  compliancePackageSigDetail?: Maybe<Array<Scalars['String']>>;
  createdAt?: Maybe<Scalars['ISO8601DateTime']>;
  ecologyAdaptationMethod?: Maybe<Scalars['Int']>;
  ecologyAdaptationMethodDetail?: Maybe<Scalars['String']>;
  ecologyAdoptionAnalysis?: Maybe<Scalars['Int']>;
  ecologyAdoptionAnalysisDetail?: Maybe<Scalars['String']>;
  ecologyCodeMaintenance?: Maybe<Scalars['Int']>;
  ecologyCodeMaintenanceDetail?: Maybe<Scalars['String']>;
  ecologyCommunitySupport?: Maybe<Scalars['Int']>;
  ecologyCommunitySupportDetail?: Maybe<Scalars['String']>;
  ecologyDependencyAcquisition?: Maybe<Scalars['Int']>;
  ecologyDependencyAcquisitionDetail?: Maybe<Array<Scalars['String']>>;
  ecologyPatentRisk?: Maybe<Scalars['Int']>;
  ecologyPatentRiskDetail?: Maybe<Scalars['String']>;
  ecologySoftwareQuality?: Maybe<Scalars['Int']>;
  ecologySoftwareQualityDetail?: Maybe<TpcSoftwareReportMetricEcologySoftwareQuality>;
  id: Scalars['Int'];
  lifecycleVersionLifecycle?: Maybe<Scalars['Int']>;
  lifecycleVersionLifecycleDetail?: Maybe<TpcSoftwareReportMetricLifecycleVersionLifecycle>;
  lifecycleVersionNormalization?: Maybe<Scalars['Int']>;
  lifecycleVersionNormalizationDetail?: Maybe<Scalars['String']>;
  lifecycleVersionNumber?: Maybe<Scalars['Int']>;
  lifecycleVersionNumberDetail?: Maybe<Scalars['String']>;
  securityBinaryArtifact?: Maybe<Scalars['Int']>;
  securityBinaryArtifactDetail?: Maybe<TpcSoftwareReportMetricSecurityBinaryArtifact>;
  securityHistoryVulnerability?: Maybe<Scalars['Int']>;
  securityHistoryVulnerabilityDetail?: Maybe<
    Array<TpcSoftwareReportMetricSecurityHistoryVulnerability>
  >;
  securityVulnerability?: Maybe<Scalars['Int']>;
  securityVulnerabilityDetail?: Maybe<
    Array<TpcSoftwareReportMetricSecurityVulnerability>
  >;
  securityVulnerabilityDisclosure?: Maybe<Scalars['Int']>;
  securityVulnerabilityDisclosureDetail?: Maybe<Scalars['String']>;
  securityVulnerabilityResponse?: Maybe<Scalars['Int']>;
  securityVulnerabilityResponseDetail?: Maybe<Scalars['String']>;
  /** progress/success */
  status?: Maybe<Scalars['String']>;
  tpcSoftwareReportId?: Maybe<Scalars['Int']>;
  tpcSoftwareReportType?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type TpcSoftwareReportMetricClarificationCount = {
  __typename?: 'TpcSoftwareReportMetricClarificationCount';
  complianceDco?: Maybe<Scalars['Int']>;
  complianceLicense?: Maybe<Scalars['Int']>;
  complianceLicenseCompatibility?: Maybe<Scalars['Int']>;
  compliancePackageSig?: Maybe<Scalars['Int']>;
  ecologyAdaptationMethod?: Maybe<Scalars['Int']>;
  ecologyAdoptionAnalysis?: Maybe<Scalars['Int']>;
  ecologyCodeMaintenance?: Maybe<Scalars['Int']>;
  ecologyCommunitySupport?: Maybe<Scalars['Int']>;
  ecologyDependencyAcquisition?: Maybe<Scalars['Int']>;
  ecologyPatentRisk?: Maybe<Scalars['Int']>;
  ecologySoftwareQuality?: Maybe<Scalars['Int']>;
  lifecycleVersionLifecycle?: Maybe<Scalars['Int']>;
  lifecycleVersionNormalization?: Maybe<Scalars['Int']>;
  lifecycleVersionNumber?: Maybe<Scalars['Int']>;
  securityBinaryArtifact?: Maybe<Scalars['Int']>;
  securityHistoryVulnerability?: Maybe<Scalars['Int']>;
  securityVulnerability?: Maybe<Scalars['Int']>;
  securityVulnerabilityDisclosure?: Maybe<Scalars['Int']>;
  securityVulnerabilityResponse?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareReportMetricClarificationPermission = {
  __typename?: 'TpcSoftwareReportMetricClarificationPermission';
  /** 1: permissioned, 0: unpermissioned */
  clarificationCommitterPermission?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  clarificationCompliancePermission?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  clarificationLegalPermission?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  clarificationSigLeadPermission?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareReportMetricClarificationState = {
  __typename?: 'TpcSoftwareReportMetricClarificationState';
  complianceDco?: Maybe<Array<TpcSoftwareCommentState>>;
  complianceLicense?: Maybe<Array<TpcSoftwareCommentState>>;
  complianceLicenseCompatibility?: Maybe<Array<TpcSoftwareCommentState>>;
  compliancePackageSig?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyAdaptationMethod?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyAdoptionAnalysis?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyCodeMaintenance?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyCommunitySupport?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyDependencyAcquisition?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologyPatentRisk?: Maybe<Array<TpcSoftwareCommentState>>;
  ecologySoftwareQuality?: Maybe<Array<TpcSoftwareCommentState>>;
  lifecycleVersionLifecycle?: Maybe<Array<TpcSoftwareCommentState>>;
  lifecycleVersionNormalization?: Maybe<Array<TpcSoftwareCommentState>>;
  lifecycleVersionNumber?: Maybe<Array<TpcSoftwareCommentState>>;
  securityBinaryArtifact?: Maybe<Array<TpcSoftwareCommentState>>;
  securityHistoryVulnerability?: Maybe<Array<TpcSoftwareCommentState>>;
  securityVulnerability?: Maybe<Array<TpcSoftwareCommentState>>;
  securityVulnerabilityDisclosure?: Maybe<Array<TpcSoftwareCommentState>>;
  securityVulnerabilityResponse?: Maybe<Array<TpcSoftwareCommentState>>;
};

export type TpcSoftwareReportMetricComplianceCopyrightStatement = {
  __typename?: 'TpcSoftwareReportMetricComplianceCopyrightStatement';
  includeCopyrights?: Maybe<Array<Scalars['String']>>;
  notIncludedCopyrights?: Maybe<Array<Scalars['String']>>;
  oatDetail?: Maybe<Array<Scalars['String']>>;
};

export type TpcSoftwareReportMetricComplianceDco = {
  __typename?: 'TpcSoftwareReportMetricComplianceDco';
  commitCount?: Maybe<Scalars['Int']>;
  commitDcoCount?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareReportMetricComplianceLicense = {
  __typename?: 'TpcSoftwareReportMetricComplianceLicense';
  nonOsiLicenses?: Maybe<Array<Scalars['String']>>;
  osiCopyleftLimitedLicenses?: Maybe<Array<Scalars['String']>>;
  osiFreeRestrictedLicenses?: Maybe<Array<Scalars['String']>>;
  osiPermissiveLicenses?: Maybe<Array<Scalars['String']>>;
};

export type TpcSoftwareReportMetricComplianceLicenseCompatibility = {
  __typename?: 'TpcSoftwareReportMetricComplianceLicenseCompatibility';
  oatDetail?: Maybe<Array<Scalars['String']>>;
  tpcDetail?: Maybe<
    Array<TpcSoftwareReportMetricComplianceLicenseCompatibilityTpc>
  >;
};

export type TpcSoftwareReportMetricComplianceLicenseCompatibilityTpc = {
  __typename?: 'TpcSoftwareReportMetricComplianceLicenseCompatibilityTpc';
  license?: Maybe<Scalars['String']>;
  licenseConflictList?: Maybe<Array<Scalars['String']>>;
};

export type TpcSoftwareReportMetricEcologySoftwareQuality = {
  __typename?: 'TpcSoftwareReportMetricEcologySoftwareQuality';
  coverageRatio?: Maybe<Scalars['Float']>;
  coverageScore?: Maybe<Scalars['Int']>;
  duplicationRatio?: Maybe<Scalars['Float']>;
  duplicationScore?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareReportMetricLifecycleVersionLifecycle = {
  __typename?: 'TpcSoftwareReportMetricLifecycleVersionLifecycle';
  archived?: Maybe<Scalars['Boolean']>;
  latestVersionCreatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  latestVersionName?: Maybe<Scalars['String']>;
};

export type TpcSoftwareReportMetricRaw = {
  __typename?: 'TpcSoftwareReportMetricRaw';
  codeUrl?: Maybe<Scalars['String']>;
  complianceDcoRaw?: Maybe<Scalars['String']>;
  complianceLicenseCompatibilityRaw?: Maybe<Scalars['String']>;
  complianceLicenseRaw?: Maybe<Scalars['String']>;
  compliancePackageSigRaw?: Maybe<Scalars['String']>;
  ecologyAdaptationMethodRaw?: Maybe<Scalars['String']>;
  ecologyAdoptionAnalysisRaw?: Maybe<Scalars['String']>;
  ecologyCodeMaintenanceRaw?: Maybe<Scalars['String']>;
  ecologyCommunitySupportRaw?: Maybe<Scalars['String']>;
  ecologyDependencyAcquisitionRaw?: Maybe<Scalars['String']>;
  ecologyPatentRiskRaw?: Maybe<Scalars['String']>;
  ecologySoftwareQualityRaw?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  lifecycleVersionLifecycleRaw?: Maybe<Scalars['String']>;
  lifecycleVersionNormalizationRaw?: Maybe<Scalars['String']>;
  lifecycleVersionNumberRaw?: Maybe<Scalars['String']>;
  securityBinaryArtifactRaw?: Maybe<Scalars['String']>;
  securityHistoryVulnerabilityRaw?: Maybe<Scalars['String']>;
  securityVulnerabilityDisclosureRaw?: Maybe<Scalars['String']>;
  securityVulnerabilityRaw?: Maybe<Scalars['String']>;
  securityVulnerabilityResponseRaw?: Maybe<Scalars['String']>;
};

export type TpcSoftwareReportMetricSecurityBinaryArtifact = {
  __typename?: 'TpcSoftwareReportMetricSecurityBinaryArtifact';
  oatDetail?: Maybe<Array<Scalars['String']>>;
  tpcDetail?: Maybe<Array<Scalars['String']>>;
};

export type TpcSoftwareReportMetricSecurityHistoryVulnerability = {
  __typename?: 'TpcSoftwareReportMetricSecurityHistoryVulnerability';
  summary?: Maybe<Scalars['String']>;
  vulnerability?: Maybe<Scalars['String']>;
};

export type TpcSoftwareReportMetricSecurityVulnerability = {
  __typename?: 'TpcSoftwareReportMetricSecurityVulnerability';
  packageName?: Maybe<Scalars['String']>;
  packageVersion?: Maybe<Scalars['String']>;
  vulnerabilities?: Maybe<Array<Scalars['String']>>;
};

export type TpcSoftwareSelection = {
  __typename?: 'TpcSoftwareSelection';
  awaitingClarificationCount?: Maybe<Scalars['Int']>;
  awaitingConfirmationCount?: Maybe<Scalars['Int']>;
  clarifiedCount?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentCommitterPermission?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentCompliancePermission?: Maybe<Scalars['Int']>;
  commentCount?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentLegalPermission?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentQaPermission?: Maybe<Scalars['Int']>;
  /** 1: permissioned, 0: unpermissioned */
  commentSigLeadPermission?: Maybe<Scalars['Int']>;
  commentState?: Maybe<Array<TpcSoftwareCommentState>>;
  committerCount?: Maybe<Scalars['Int']>;
  committers?: Maybe<Array<Scalars['String']>>;
  complianceCount?: Maybe<Scalars['Int']>;
  confirmedCount?: Maybe<Scalars['Int']>;
  createdAt: Scalars['ISO8601DateTime'];
  demandSource?: Maybe<Scalars['String']>;
  functionalDescription?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  incubationTime?: Maybe<Scalars['String']>;
  isSameTypeCheck?: Maybe<Scalars['Int']>;
  issueUrl?: Maybe<Scalars['String']>;
  legalCount?: Maybe<Scalars['Int']>;
  reason?: Maybe<Scalars['String']>;
  repoUrl?: Maybe<Array<Scalars['String']>>;
  riskCount?: Maybe<Scalars['Int']>;
  sameTypeSoftwareName?: Maybe<Scalars['String']>;
  /** incubation: 0, sandbox: 1, graduation: 2 */
  selectionType?: Maybe<Scalars['Int']>;
  sigLeadCount?: Maybe<Scalars['Int']>;
  /** 0: awaiting_clarification 1: awaiting_confirmation 2: awaiting_review 3: completed -1:rejected */
  state?: Maybe<Scalars['Int']>;
  targetSoftware?: Maybe<Scalars['String']>;
  tpcSoftwareSelectionReportIds?: Maybe<Array<Scalars['String']>>;
  tpcSoftwareSelectionReports?: Maybe<Array<TpcSoftwareSelectionReport>>;
  updatedAt: Scalars['ISO8601DateTime'];
  user?: Maybe<User>;
  userId: Scalars['Int'];
};

export type TpcSoftwareSelectionPage = {
  __typename?: 'TpcSoftwareSelectionPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<TpcSoftwareSelection>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareSelectionReport = {
  __typename?: 'TpcSoftwareSelectionReport';
  adaptationMethod?: Maybe<Scalars['String']>;
  architectureDiagrams?: Maybe<Array<Image>>;
  codeCount?: Maybe<Scalars['Int']>;
  codeUrl?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  license?: Maybe<Scalars['String']>;
  manufacturer?: Maybe<Scalars['String']>;
  metricClarificationCount?: Maybe<TpcSoftwareReportMetricClarificationCount>;
  metricClarificationState?: Maybe<TpcSoftwareReportMetricClarificationState>;
  name?: Maybe<Scalars['String']>;
  programmingLanguage?: Maybe<Scalars['String']>;
  reportCategory?: Maybe<Scalars['Int']>;
  reportType: Scalars['Int'];
  shortCode: Scalars['String'];
  tpcSoftwareReportMetric?: Maybe<TpcSoftwareReportMetric>;
  tpcSoftwareReportMetricRaw?: Maybe<TpcSoftwareReportMetricRaw>;
  tpcSoftwareSig?: Maybe<TpcSoftwareSig>;
  tpcSoftwareSigId?: Maybe<Scalars['Int']>;
  user?: Maybe<User>;
  userId: Scalars['Int'];
  vulnerabilityDisclosure?: Maybe<Scalars['String']>;
  vulnerabilityResponse?: Maybe<Scalars['String']>;
  websiteUrl?: Maybe<Scalars['String']>;
};

export type TpcSoftwareSelectionReportInput = {
  adaptationMethod: Scalars['String'];
  architectureDiagrams?: InputMaybe<Array<Base64ImageInput>>;
  codeUrl: Scalars['String'];
  name: Scalars['String'];
  ohCommitSha: Scalars['String'];
  programmingLanguage: Scalars['String'];
  reportCategory?: InputMaybe<Scalars['Int']>;
  tpcSoftwareSigId: Scalars['Int'];
  vulnerabilityResponse: Scalars['String'];
};

export type TpcSoftwareSelectionReportPage = {
  __typename?: 'TpcSoftwareSelectionReportPage';
  count?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<TpcSoftwareSelectionReport>>;
  page?: Maybe<Scalars['Int']>;
  totalPage?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareSelectionReportSearch = {
  __typename?: 'TpcSoftwareSelectionReportSearch';
  adaptationMethod?: Maybe<Scalars['String']>;
  codeUrl?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  programmingLanguage?: Maybe<Scalars['String']>;
  reportType: Scalars['Int'];
  tpcSoftwareSigId?: Maybe<Scalars['Int']>;
};

export type TpcSoftwareSelectionReportUpdateInput = {
  adaptationMethod: Scalars['String'];
  architectureDiagrams?: InputMaybe<Array<Base64ImageInput>>;
  name: Scalars['String'];
  programmingLanguage: Scalars['String'];
  tpcSoftwareSigId: Scalars['Int'];
  vulnerabilityResponse: Scalars['String'];
};

export type TpcSoftwareSelectionSearch = {
  __typename?: 'TpcSoftwareSelectionSearch';
  committers?: Maybe<Array<Scalars['String']>>;
  createdAt: Scalars['ISO8601DateTime'];
  demandSource?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  incubationTime?: Maybe<Scalars['String']>;
  repoUrl?: Maybe<Array<Scalars['String']>>;
  /** incubation: 0, sandbox: 1, graduation: 2 */
  selectionType?: Maybe<Scalars['Int']>;
  targetSoftware?: Maybe<Scalars['String']>;
  tpcSoftwareSelectionReport?: Maybe<TpcSoftwareSelectionReportSearch>;
  tpcSoftwareSelectionReportIds?: Maybe<Array<Scalars['String']>>;
};

export type TpcSoftwareSig = {
  __typename?: 'TpcSoftwareSig';
  description: Scalars['String'];
  id: Scalars['Int'];
  name: Scalars['String'];
  sigCommitter?: Maybe<Array<TpcSoftwareMember>>;
};

export type Trending = {
  __typename?: 'Trending';
  /** repo or community latest activity avg */
  activityScore?: Maybe<Scalars['Float']>;
  /** second collections of this label */
  collections?: Maybe<Array<Scalars['String']>>;
  /** repo or community full_path, if community: equals name */
  fullPath?: Maybe<Scalars['String']>;
  /** repo or community label */
  label?: Maybe<Scalars['String']>;
  /** repo or community level */
  level?: Maybe<Scalars['String']>;
  /** repo or community logo_url */
  logoUrl?: Maybe<Scalars['String']>;
  /** repo or community name */
  name?: Maybe<Scalars['String']>;
  /** repo or community origin (gitee/github/combine) */
  origin?: Maybe<Scalars['String']>;
  /** repositories count */
  reposCount?: Maybe<Scalars['Float']>;
  /** repo or community short code */
  shortCode?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of TriggerFinanceStandardProjectVersion */
export type TriggerFinanceStandardProjectVersionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** the collection of the repositories */
  datasets: Array<ProjectVersionTypeInput>;
};

/** Autogenerated return type of TriggerFinanceStandardProjectVersion. */
export type TriggerFinanceStandardProjectVersionPayload = {
  __typename?: 'TriggerFinanceStandardProjectVersionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of TriggerLabModelVersion */
export type TriggerLabModelVersionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** lab model report id */
  reportId: Scalars['Int'];
};

/** Autogenerated return type of TriggerLabModelVersion. */
export type TriggerLabModelVersionPayload = {
  __typename?: 'TriggerLabModelVersionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of TriggerSingleProject */
export type TriggerSingleProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** level */
  level: Scalars['String'];
  /** project url or community name */
  projectUrl: Scalars['String'];
  /** lab model report id */
  reportId: Scalars['Int'];
};

/** Autogenerated return type of TriggerSingleProject. */
export type TriggerSingleProjectPayload = {
  __typename?: 'TriggerSingleProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of TriggerTpcSoftwareGraduationReport */
export type TriggerTpcSoftwareGraduationReportInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  reportId: Scalars['Int'];
};

/** Autogenerated return type of TriggerTpcSoftwareGraduationReport. */
export type TriggerTpcSoftwareGraduationReportPayload = {
  __typename?: 'TriggerTpcSoftwareGraduationReportPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of TriggerTpcSoftwareLectotypeReport */
export type TriggerTpcSoftwareLectotypeReportInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  reportId: Scalars['Int'];
};

/** Autogenerated return type of TriggerTpcSoftwareLectotypeReport. */
export type TriggerTpcSoftwareLectotypeReportPayload = {
  __typename?: 'TriggerTpcSoftwareLectotypeReportPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of TriggerTpcSoftwareSelectionReport */
export type TriggerTpcSoftwareSelectionReportInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  reportId: Scalars['Int'];
};

/** Autogenerated return type of TriggerTpcSoftwareSelectionReport. */
export type TriggerTpcSoftwareSelectionReportPayload = {
  __typename?: 'TriggerTpcSoftwareSelectionReportPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of UpdateLabModelComment */
export type UpdateLabModelCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** lab model comment id */
  commentId: Scalars['Int'];
  /** comment content */
  content?: InputMaybe<Scalars['String']>;
  /** related images under this comment */
  images?: InputMaybe<Array<Base64ImageInput>>;
  /** lab model id */
  modelId: Scalars['Int'];
};

/** Autogenerated return type of UpdateLabModelComment. */
export type UpdateLabModelCommentPayload = {
  __typename?: 'UpdateLabModelCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  data?: Maybe<ModelComment>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateLabModel */
export type UpdateLabModelInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** lab model description */
  description?: InputMaybe<Scalars['String']>;
  /** whether or not a public model, default: false */
  isPublic?: InputMaybe<Scalars['Boolean']>;
  /** lab model id */
  modelId: Scalars['Int'];
  /** lab model name */
  name?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateLabModel. */
export type UpdateLabModelPayload = {
  __typename?: 'UpdateLabModelPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  data?: Maybe<ModelDetail>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateLabModelReport */
export type UpdateLabModelReportInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** the collection of the repositories */
  datasets?: InputMaybe<Array<DatasetRowTypeInput>>;
  /** whether or not a public model, default: false */
  isPublic?: InputMaybe<Scalars['Boolean']>;
  /** report id */
  reportId: Scalars['Int'];
};

/** Autogenerated return type of UpdateLabModelReport. */
export type UpdateLabModelReportPayload = {
  __typename?: 'UpdateLabModelReportPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  data?: Maybe<ModelReport>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateLabModelVersion */
export type UpdateLabModelVersionInput = {
  /** the ident of algorithm */
  algorithm?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** the collection of the repositories */
  datasets?: InputMaybe<Array<DatasetRowTypeInput>>;
  /** whether or not calculate the score, default: false */
  isScore?: InputMaybe<Scalars['Boolean']>;
  /** lab model metrics */
  metrics?: InputMaybe<Array<LabModelMetricInput>>;
  /** lab model id */
  modelId: Scalars['Int'];
  /** version string */
  version?: InputMaybe<Scalars['String']>;
  /** lab model version id */
  versionId: Scalars['Int'];
};

/** Autogenerated return type of UpdateLabModelVersion. */
export type UpdateLabModelVersionPayload = {
  __typename?: 'UpdateLabModelVersionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  data?: Maybe<ModelVersion>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateMemberPermission */
export type UpdateMemberPermissionInput = {
  /** permission to execute model analysis */
  canExecute?: InputMaybe<Scalars['Boolean']>;
  /** permission to change model properties */
  canUpdate?: InputMaybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** lab member id */
  memberId: Scalars['Int'];
  /** lab model id */
  modelId: Scalars['Int'];
};

/** Autogenerated return type of UpdateMemberPermission. */
export type UpdateMemberPermissionPayload = {
  __typename?: 'UpdateMemberPermissionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  data?: Maybe<LabMember>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateSubjectAccessLevel */
export type UpdateSubjectAccessLevelInput = {
  /** subject access level: `NORMAL/COMMITTER: 0, PRIVILEGED/LEADER: 1 default: 0` */
  accessLevel: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Subject access level id */
  id: Scalars['Int'];
  /** repo or project label */
  label: Scalars['String'];
  /** repo or comunity */
  level?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateSubjectAccessLevel. */
export type UpdateSubjectAccessLevelPayload = {
  __typename?: 'UpdateSubjectAccessLevelPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of UpdateSubjectSig */
export type UpdateSubjectSigInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** subject sig description */
  description?: InputMaybe<Scalars['String']>;
  /** subject sig emails */
  emails?: InputMaybe<Array<Scalars['String']>>;
  /** Subject sig id */
  id: Scalars['Int'];
  /** repo or project label */
  label: Scalars['String'];
  /** repo or comunity */
  level?: InputMaybe<Scalars['String']>;
  /** link sig label */
  linkSigLabel: Scalars['String'];
  /** subject sig maintainers */
  maintainers?: InputMaybe<Array<Scalars['String']>>;
  /** subject sig name */
  name: Scalars['String'];
};

/** Autogenerated return type of UpdateSubjectSig. */
export type UpdateSubjectSigPayload = {
  __typename?: 'UpdateSubjectSigPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of UpdateTpcSoftwareGraduation */
export type UpdateTpcSoftwareGraduationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  committers: Array<Scalars['String']>;
  demandSource: Scalars['String'];
  functionalDescription: Scalars['String'];
  graduationId: Scalars['Int'];
  incubationStartTime?: InputMaybe<Scalars['ISO8601DateTime']>;
  incubationTime?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateTpcSoftwareGraduation. */
export type UpdateTpcSoftwareGraduationPayload = {
  __typename?: 'UpdateTpcSoftwareGraduationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of UpdateTpcSoftwareGraduationReport */
export type UpdateTpcSoftwareGraduationReportInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  reportId: Scalars['Int'];
  softwareReport: TpcSoftwareGraduationReportUpdateInput;
};

/** Autogenerated return type of UpdateTpcSoftwareGraduationReport. */
export type UpdateTpcSoftwareGraduationReportPayload = {
  __typename?: 'UpdateTpcSoftwareGraduationReportPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of UpdateTpcSoftwareLectotype */
export type UpdateTpcSoftwareLectotypeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  committers: Array<Scalars['String']>;
  demandSource: Scalars['String'];
  functionalDescription: Scalars['String'];
  incubationTime: Scalars['String'];
  isSameTypeCheck: Scalars['Int'];
  lectotypeId: Scalars['Int'];
  reason: Scalars['String'];
  repoUrl: Array<Scalars['String']>;
  sameTypeSoftwareName?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateTpcSoftwareLectotype. */
export type UpdateTpcSoftwareLectotypePayload = {
  __typename?: 'UpdateTpcSoftwareLectotypePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of UpdateTpcSoftwareLectotypeReport */
export type UpdateTpcSoftwareLectotypeReportInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  reportId: Scalars['Int'];
  softwareReport: TpcSoftwareLectotypeReportUpdateInput;
};

/** Autogenerated return type of UpdateTpcSoftwareLectotypeReport. */
export type UpdateTpcSoftwareLectotypeReportPayload = {
  __typename?: 'UpdateTpcSoftwareLectotypeReportPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of UpdateTpcSoftwareReportMetricClarification */
export type UpdateTpcSoftwareReportMetricClarificationInput = {
  clarificationId: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  content: Scalars['String'];
};

/** Autogenerated return type of UpdateTpcSoftwareReportMetricClarification. */
export type UpdateTpcSoftwareReportMetricClarificationPayload = {
  __typename?: 'UpdateTpcSoftwareReportMetricClarificationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of UpdateTpcSoftwareSelectionComment */
export type UpdateTpcSoftwareSelectionCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  commentId: Scalars['Int'];
  content: Scalars['String'];
};

/** Autogenerated return type of UpdateTpcSoftwareSelectionComment. */
export type UpdateTpcSoftwareSelectionCommentPayload = {
  __typename?: 'UpdateTpcSoftwareSelectionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of UpdateTpcSoftwareSelection */
export type UpdateTpcSoftwareSelectionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  committers: Array<Scalars['String']>;
  demandSource: Scalars['String'];
  functionalDescription: Scalars['String'];
  incubationTime: Scalars['String'];
  isSameTypeCheck: Scalars['Int'];
  reason: Scalars['String'];
  repoUrl: Array<Scalars['String']>;
  sameTypeSoftwareName?: InputMaybe<Scalars['String']>;
  selectionId: Scalars['Int'];
};

/** Autogenerated return type of UpdateTpcSoftwareSelection. */
export type UpdateTpcSoftwareSelectionPayload = {
  __typename?: 'UpdateTpcSoftwareSelectionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** Autogenerated input type of UpdateTpcSoftwareSelectionReport */
export type UpdateTpcSoftwareSelectionReportInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  reportId: Scalars['Int'];
  softwareReport: TpcSoftwareSelectionReportUpdateInput;
};

/** Autogenerated return type of UpdateTpcSoftwareSelectionReport. */
export type UpdateTpcSoftwareSelectionReportPayload = {
  __typename?: 'UpdateTpcSoftwareSelectionReportPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

export type User = {
  __typename?: 'User';
  contributingOrgs?: Maybe<Array<ContributorOrg>>;
  email: Scalars['String'];
  emailVerified: Scalars['Boolean'];
  id: Scalars['Int'];
  language: Scalars['String'];
  loginBinds?: Maybe<Array<LoginBind>>;
  name: Scalars['String'];
  roleLevel: Scalars['Int'];
  subscriptions: SubscriptionPage;
};

export type UserSubscriptionsArgs = {
  label?: InputMaybe<Scalars['String']>;
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated input type of UserUnbind */
export type UserUnbindInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** provider name */
  provider: Scalars['String'];
};

/** Autogenerated return type of UserUnbind. */
export type UserUnbindPayload = {
  __typename?: 'UserUnbindPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

export type ValidDataRange = {
  __typename?: 'ValidDataRange';
  /** metric model object identification */
  label?: Maybe<Scalars['String']>;
  /** whether current is a repo admin for this label */
  labelAdmin?: Maybe<Scalars['Boolean']>;
  /** metric model object level (project or repo) */
  level?: Maybe<Scalars['String']>;
  /** max valid date */
  max?: Maybe<Scalars['ISO8601DateTime']>;
  /** min valid date */
  min?: Maybe<Scalars['ISO8601DateTime']>;
  /** metric model object short code */
  shortCode?: Maybe<Scalars['String']>;
  /** whether it is a valid data range */
  status?: Maybe<Scalars['Boolean']>;
};

export type VulDetectTimeDetail = {
  __typename?: 'VulDetectTimeDetail';
  error?: Maybe<Scalars['String']>;
  repoUrl?: Maybe<Scalars['String']>;
  vulDetectTimeDetails?: Maybe<Scalars['Int']>;
};

export type VulLevel = {
  __typename?: 'VulLevel';
  vulLevelDetails?: Maybe<Array<VulPackage>>;
  vulLevels?: Maybe<Scalars['Int']>;
};

export type VulLevelDetail = {
  __typename?: 'VulLevelDetail';
  repoUrl?: Maybe<Scalars['String']>;
  vulLevelDetails?: Maybe<VulLevel>;
};

export type VulPackage = {
  __typename?: 'VulPackage';
  packageName?: Maybe<Scalars['String']>;
  packageVersion?: Maybe<Scalars['String']>;
  severity?: Maybe<Scalars['String']>;
  vulnerabilities?: Maybe<Array<Scalars['String']>>;
};

export type VulnerablityFeedback = {
  __typename?: 'VulnerablityFeedback';
  vulnerablityFeedbackChannels?: Maybe<Scalars['Int']>;
  vulnerablityFeedbackChannelsDetails?: Maybe<Array<Feedback>>;
};

export type VulnerablityFeedbackChannelDetail = {
  __typename?: 'VulnerablityFeedbackChannelDetail';
  repoUrl?: Maybe<Scalars['String']>;
  vulnerablityFeedbackChannelsDetails?: Maybe<VulnerablityFeedback>;
};

export type ZhFile = {
  __typename?: 'ZhFile';
  zhFilesDetails?: Maybe<Array<FileDetail>>;
  zhFilesNumber?: Maybe<Scalars['Int']>;
};

export type ZhFileDetail = {
  __typename?: 'ZhFileDetail';
  repoUrl?: Maybe<Scalars['String']>;
  zhFilesDetails?: Maybe<ZhFile>;
};

export type CommentFragment = {
  __typename?: 'ModelComment';
  content: string;
  createdAt: any;
  id: number;
  updatedAt: any;
  metric?: {
    __typename?: 'ModelMetric';
    category?: string | null;
    defaultThreshold?: number | null;
    defaultWeight?: number | null;
    from?: string | null;
    id?: number | null;
    metricId?: number | null;
    ident?: string | null;
    name?: string | null;
    threshold?: number | null;
    weight?: number | null;
  } | null;
  images?: Array<{
    __typename?: 'Image';
    filename: string;
    url: string;
    id: number;
  }> | null;
  model: {
    __typename?: 'ModelDetail';
    id: number;
    isPublic: boolean;
    name: string;
    description?: string | null;
    triggerRemainingCount: number;
    userId: number;
  };
  parent?: {
    __typename?: 'ModelComment';
    content: string;
    createdAt: any;
    id: number;
    updatedAt: any;
    images?: Array<{
      __typename?: 'Image';
      filename: string;
      url: string;
      id: number;
    }> | null;
  } | null;
  replies?: Array<{
    __typename?: 'ModelComment';
    content: string;
    createdAt: any;
    id: number;
    updatedAt: any;
    images?: Array<{
      __typename?: 'Image';
      filename: string;
      url: string;
      id: number;
    }> | null;
    user: {
      __typename?: 'SimpleUser';
      avatarUrl?: string | null;
      id: number;
      name: string;
    };
    replies?: Array<{
      __typename?: 'ModelComment';
      content: string;
      createdAt: any;
      id: number;
      updatedAt: any;
      images?: Array<{
        __typename?: 'Image';
        id: number;
        filename: string;
        url: string;
      }> | null;
    }> | null;
    model: {
      __typename?: 'ModelDetail';
      id: number;
      isPublic: boolean;
      name: string;
      description?: string | null;
      triggerRemainingCount: number;
      userId: number;
    };
  }> | null;
  user: {
    __typename?: 'SimpleUser';
    avatarUrl?: string | null;
    id: number;
    name: string;
  };
};

export type ReplyFragment = {
  __typename?: 'ModelComment';
  content: string;
  createdAt: any;
  id: number;
  updatedAt: any;
  images?: Array<{
    __typename?: 'Image';
    filename: string;
    url: string;
    id: number;
  }> | null;
  user: {
    __typename?: 'SimpleUser';
    avatarUrl?: string | null;
    id: number;
    name: string;
  };
  replies?: Array<{
    __typename?: 'ModelComment';
    content: string;
    createdAt: any;
    id: number;
    updatedAt: any;
    images?: Array<{
      __typename?: 'Image';
      id: number;
      filename: string;
      url: string;
    }> | null;
  }> | null;
  model: {
    __typename?: 'ModelDetail';
    id: number;
    isPublic: boolean;
    name: string;
    description?: string | null;
    triggerRemainingCount: number;
    userId: number;
  };
};

export type ParentCommentFragment = {
  __typename?: 'ModelComment';
  content: string;
  createdAt: any;
  id: number;
  updatedAt: any;
  images?: Array<{
    __typename?: 'Image';
    filename: string;
    url: string;
    id: number;
  }> | null;
};

export type ModelDetailFragment = {
  __typename?: 'ModelDetail';
  id: number;
  isPublic: boolean;
  name: string;
  description?: string | null;
  triggerRemainingCount: number;
  userId: number;
};

export type UserFragment = {
  __typename?: 'SimpleUser';
  avatarUrl?: string | null;
  id: number;
  name: string;
};

export type AlgorithmFragment = {
  __typename?: 'Algorithm';
  ident: string;
  name: string;
};

export type DatasetFragment = {
  __typename?: 'Dataset';
  ident?: string | null;
  name?: string | null;
  items?: Array<{
    __typename?: 'DatasetCompletionRow';
    firstIdent?: string | null;
    label?: string | null;
    shortCode?: string | null;
    level?: string | null;
    secondIdent?: string | null;
  }> | null;
};

export type DatasetStatusFragment = {
  __typename?: 'DatasetStatus';
  ident?: string | null;
  name?: string | null;
  items?: Array<{
    __typename?: 'DatasetCompletionRowStatus';
    firstIdent?: string | null;
    label?: string | null;
    shortCode?: string | null;
    level?: string | null;
    logoUrl?: string | null;
    secondIdent?: string | null;
    triggerStatus?: string | null;
    triggerUpdatedAt?: any | null;
  }> | null;
};

export type MetricsFragment = {
  __typename?: 'ModelMetric';
  category?: string | null;
  defaultThreshold?: number | null;
  defaultWeight?: number | null;
  from?: string | null;
  id?: number | null;
  metricId?: number | null;
  ident?: string | null;
  name?: string | null;
  threshold?: number | null;
  weight?: number | null;
};

export type ModelVersionFragment = {
  __typename?: 'ModelVersion';
  id: number;
  version?: string | null;
  isScore?: boolean | null;
  algorithm?: { __typename?: 'Algorithm'; ident: string; name: string } | null;
  metrics: Array<{
    __typename?: 'ModelMetric';
    category?: string | null;
    defaultThreshold?: number | null;
    defaultWeight?: number | null;
    from?: string | null;
    id?: number | null;
    metricId?: number | null;
    ident?: string | null;
    name?: string | null;
    threshold?: number | null;
    weight?: number | null;
  }>;
};

export type LabMemberFragment = {
  __typename?: 'LabMember';
  avatarUrl?: string | null;
  canExecute: boolean;
  canRead: boolean;
  canUpdate: boolean;
  id: number;
  isOwner: boolean;
  joinedAt: any;
  name: string;
};

export type DatasetFuzzySearchQueryVariables = Exact<{
  keyword: Scalars['String'];
}>;

export type DatasetFuzzySearchQuery = {
  __typename?: 'Query';
  datasetFuzzySearch?: Array<{
    __typename?: 'DatasetCompletionRow';
    firstIdent?: string | null;
    label?: string | null;
    level?: string | null;
    secondIdent?: string | null;
    shortCode?: string | null;
  }> | null;
};

export type MyLabModelsQueryVariables = Exact<{
  page: Scalars['Int'];
  per: Scalars['Int'];
}>;

export type MyLabModelsQuery = {
  __typename?: 'Query';
  myModels?: {
    __typename?: 'MyModels';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'ModelDetail';
      id: number;
      description?: string | null;
      isPublic: boolean;
      triggerRemainingCount: number;
      name: string;
      userId: number;
      latestVersions?: Array<{
        __typename?: 'ModelVersion';
        id: number;
        isScore?: boolean | null;
        version?: string | null;
        triggerStatus?: string | null;
        triggerUpdatedAt?: any | null;
        algorithm?: {
          __typename?: 'Algorithm';
          ident: string;
          name: string;
        } | null;
        metrics: Array<{
          __typename?: 'ModelMetric';
          category?: string | null;
          defaultThreshold?: number | null;
          defaultWeight?: number | null;
          from?: string | null;
          id?: number | null;
          metricId?: number | null;
          ident?: string | null;
          name?: string | null;
          threshold?: number | null;
          weight?: number | null;
        }>;
      }> | null;
      defaultVersion?: {
        __typename?: 'ModelVersion';
        id: number;
        isScore?: boolean | null;
        version?: string | null;
        algorithm?: {
          __typename?: 'Algorithm';
          ident: string;
          name: string;
        } | null;
        metrics: Array<{
          __typename?: 'ModelMetric';
          category?: string | null;
          defaultThreshold?: number | null;
          defaultWeight?: number | null;
          from?: string | null;
          id?: number | null;
          metricId?: number | null;
          ident?: string | null;
          name?: string | null;
          threshold?: number | null;
          weight?: number | null;
        }>;
      } | null;
      permissions?: {
        __typename?: 'Permission';
        canDestroy: boolean;
        canExecute: boolean;
        canRead: boolean;
        canUpdate: boolean;
      } | null;
      parentLabModel?: {
        __typename?: 'ModelDetail';
        name: string;
        id: number;
        loginBinds?: {
          __typename?: 'LoginBind';
          account?: string | null;
          avatarUrl?: string | null;
          nickname?: string | null;
        } | null;
      } | null;
    }> | null;
  } | null;
};

export type LabModelDetailQueryVariables = Exact<{
  modelId: Scalars['Int'];
}>;

export type LabModelDetailQuery = {
  __typename?: 'Query';
  labModelDetail?: {
    __typename?: 'ModelDetail';
    createdAt?: any | null;
    id: number;
    description?: string | null;
    isPublic: boolean;
    triggerRemainingCount: number;
    name: string;
    userId: number;
    referenceCount?: number | null;
    loginBinds?: {
      __typename?: 'LoginBind';
      account?: string | null;
      avatarUrl?: string | null;
      nickname?: string | null;
      provider?: string | null;
    } | null;
    latestVersions?: Array<{
      __typename?: 'ModelVersion';
      id: number;
      isScore?: boolean | null;
      version?: string | null;
      triggerStatus?: string | null;
      triggerUpdatedAt?: any | null;
      algorithm?: {
        __typename?: 'Algorithm';
        ident: string;
        name: string;
      } | null;
      metrics: Array<{
        __typename?: 'ModelMetric';
        category?: string | null;
        defaultThreshold?: number | null;
        defaultWeight?: number | null;
        from?: string | null;
        id?: number | null;
        metricId?: number | null;
        ident?: string | null;
        name?: string | null;
        threshold?: number | null;
        weight?: number | null;
      }>;
    }> | null;
    defaultVersion?: {
      __typename?: 'ModelVersion';
      id: number;
      isScore?: boolean | null;
      version?: string | null;
      algorithm?: {
        __typename?: 'Algorithm';
        ident: string;
        name: string;
      } | null;
      metrics: Array<{
        __typename?: 'ModelMetric';
        category?: string | null;
        defaultThreshold?: number | null;
        defaultWeight?: number | null;
        from?: string | null;
        id?: number | null;
        metricId?: number | null;
        ident?: string | null;
        name?: string | null;
        threshold?: number | null;
        weight?: number | null;
      }>;
    } | null;
    permissions?: {
      __typename?: 'Permission';
      canDestroy: boolean;
      canExecute: boolean;
      canRead: boolean;
      canUpdate: boolean;
    } | null;
    parentLabModel?: {
      __typename?: 'ModelDetail';
      id: number;
      name: string;
      loginBinds?: {
        __typename?: 'LoginBind';
        account?: string | null;
        avatarUrl?: string | null;
        nickname?: string | null;
      } | null;
    } | null;
  } | null;
};

export type LabModelVersionQueryVariables = Exact<{
  modelId: Scalars['Int'];
  versionId: Scalars['Int'];
}>;

export type LabModelVersionQuery = {
  __typename?: 'Query';
  labModelVersion?: {
    __typename?: 'ModelVersion';
    id: number;
    version?: string | null;
    isScore?: boolean | null;
    triggerStatus?: string | null;
    triggerUpdatedAt?: any | null;
    algorithm?: {
      __typename?: 'Algorithm';
      ident: string;
      name: string;
    } | null;
    metrics: Array<{
      __typename?: 'ModelMetric';
      category?: string | null;
      defaultThreshold?: number | null;
      defaultWeight?: number | null;
      from?: string | null;
      id?: number | null;
      metricId?: number | null;
      ident?: string | null;
      name?: string | null;
      threshold?: number | null;
      weight?: number | null;
    }>;
  } | null;
};

export type DataSetListQueryVariables = Exact<{
  type?: InputMaybe<Scalars['String']>;
  firstIdent?: InputMaybe<Scalars['String']>;
  secondIdent?: InputMaybe<Scalars['String']>;
}>;

export type DataSetListQuery = {
  __typename?: 'Query';
  datasetOverview?: Array<string> | null;
};

export type MetricSetListQueryVariables = Exact<{ [key: string]: never }>;

export type MetricSetListQuery = {
  __typename?: 'Query';
  metricSetOverview?: Array<{
    __typename?: 'ModelMetric';
    category?: string | null;
    defaultThreshold?: number | null;
    defaultWeight?: number | null;
    from?: string | null;
    id?: number | null;
    ident?: string | null;
    name?: string | null;
    threshold?: number | null;
    weight?: number | null;
  }> | null;
};

export type LabModelCommentsQueryVariables = Exact<{
  direction?: InputMaybe<Scalars['String']>;
  modelId: Scalars['Int'];
  modelMetricId?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['Int']>;
  parentId?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<Scalars['String']>;
  versionId?: InputMaybe<Scalars['Int']>;
}>;

export type LabModelCommentsQuery = {
  __typename?: 'Query';
  labModelComments?: {
    __typename?: 'ModelCommentPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'ModelComment';
      content: string;
      createdAt: any;
      id: number;
      updatedAt: any;
      metric?: {
        __typename?: 'ModelMetric';
        category?: string | null;
        defaultThreshold?: number | null;
        defaultWeight?: number | null;
        from?: string | null;
        id?: number | null;
        metricId?: number | null;
        ident?: string | null;
        name?: string | null;
        threshold?: number | null;
        weight?: number | null;
      } | null;
      images?: Array<{
        __typename?: 'Image';
        filename: string;
        url: string;
        id: number;
      }> | null;
      model: {
        __typename?: 'ModelDetail';
        id: number;
        isPublic: boolean;
        name: string;
        description?: string | null;
        triggerRemainingCount: number;
        userId: number;
      };
      parent?: {
        __typename?: 'ModelComment';
        content: string;
        createdAt: any;
        id: number;
        updatedAt: any;
        images?: Array<{
          __typename?: 'Image';
          filename: string;
          url: string;
          id: number;
        }> | null;
      } | null;
      replies?: Array<{
        __typename?: 'ModelComment';
        content: string;
        createdAt: any;
        id: number;
        updatedAt: any;
        images?: Array<{
          __typename?: 'Image';
          filename: string;
          url: string;
          id: number;
        }> | null;
        user: {
          __typename?: 'SimpleUser';
          avatarUrl?: string | null;
          id: number;
          name: string;
        };
        replies?: Array<{
          __typename?: 'ModelComment';
          content: string;
          createdAt: any;
          id: number;
          updatedAt: any;
          images?: Array<{
            __typename?: 'Image';
            id: number;
            filename: string;
            url: string;
          }> | null;
        }> | null;
        model: {
          __typename?: 'ModelDetail';
          id: number;
          isPublic: boolean;
          name: string;
          description?: string | null;
          triggerRemainingCount: number;
          userId: number;
        };
      }> | null;
      user: {
        __typename?: 'SimpleUser';
        avatarUrl?: string | null;
        id: number;
        name: string;
      };
    }> | null;
  } | null;
};

export type LabModelCommentDetailQueryVariables = Exact<{
  modelId: Scalars['Int'];
  commentId: Scalars['Int'];
}>;

export type LabModelCommentDetailQuery = {
  __typename?: 'Query';
  labModelCommentDetail?: {
    __typename?: 'ModelComment';
    content: string;
    createdAt: any;
    id: number;
    updatedAt: any;
    images?: Array<{
      __typename?: 'Image';
      filename: string;
      url: string;
      id: number;
    }> | null;
    model: {
      __typename?: 'ModelDetail';
      id: number;
      isPublic: boolean;
      name: string;
      description?: string | null;
      triggerRemainingCount: number;
      userId: number;
    };
    parent?: {
      __typename?: 'ModelComment';
      content: string;
      createdAt: any;
      id: number;
      updatedAt: any;
      metric?: {
        __typename?: 'ModelMetric';
        category?: string | null;
        defaultThreshold?: number | null;
        defaultWeight?: number | null;
        from?: string | null;
        id?: number | null;
        metricId?: number | null;
        ident?: string | null;
        name?: string | null;
        threshold?: number | null;
        weight?: number | null;
      } | null;
      images?: Array<{
        __typename?: 'Image';
        filename: string;
        url: string;
        id: number;
      }> | null;
      model: {
        __typename?: 'ModelDetail';
        id: number;
        isPublic: boolean;
        name: string;
        description?: string | null;
        triggerRemainingCount: number;
        userId: number;
      };
      parent?: {
        __typename?: 'ModelComment';
        content: string;
        createdAt: any;
        id: number;
        updatedAt: any;
        images?: Array<{
          __typename?: 'Image';
          filename: string;
          url: string;
          id: number;
        }> | null;
      } | null;
      replies?: Array<{
        __typename?: 'ModelComment';
        content: string;
        createdAt: any;
        id: number;
        updatedAt: any;
        images?: Array<{
          __typename?: 'Image';
          filename: string;
          url: string;
          id: number;
        }> | null;
        user: {
          __typename?: 'SimpleUser';
          avatarUrl?: string | null;
          id: number;
          name: string;
        };
        replies?: Array<{
          __typename?: 'ModelComment';
          content: string;
          createdAt: any;
          id: number;
          updatedAt: any;
          images?: Array<{
            __typename?: 'Image';
            id: number;
            filename: string;
            url: string;
          }> | null;
        }> | null;
        model: {
          __typename?: 'ModelDetail';
          id: number;
          isPublic: boolean;
          name: string;
          description?: string | null;
          triggerRemainingCount: number;
          userId: number;
        };
      }> | null;
      user: {
        __typename?: 'SimpleUser';
        avatarUrl?: string | null;
        id: number;
        name: string;
      };
    } | null;
    replies?: Array<{
      __typename?: 'ModelComment';
      content: string;
      createdAt: any;
      id: number;
      updatedAt: any;
      metric?: {
        __typename?: 'ModelMetric';
        category?: string | null;
        defaultThreshold?: number | null;
        defaultWeight?: number | null;
        from?: string | null;
        id?: number | null;
        metricId?: number | null;
        ident?: string | null;
        name?: string | null;
        threshold?: number | null;
        weight?: number | null;
      } | null;
      images?: Array<{
        __typename?: 'Image';
        filename: string;
        url: string;
        id: number;
      }> | null;
      model: {
        __typename?: 'ModelDetail';
        id: number;
        isPublic: boolean;
        name: string;
        description?: string | null;
        triggerRemainingCount: number;
        userId: number;
      };
      parent?: {
        __typename?: 'ModelComment';
        content: string;
        createdAt: any;
        id: number;
        updatedAt: any;
        images?: Array<{
          __typename?: 'Image';
          filename: string;
          url: string;
          id: number;
        }> | null;
      } | null;
      replies?: Array<{
        __typename?: 'ModelComment';
        content: string;
        createdAt: any;
        id: number;
        updatedAt: any;
        images?: Array<{
          __typename?: 'Image';
          filename: string;
          url: string;
          id: number;
        }> | null;
        user: {
          __typename?: 'SimpleUser';
          avatarUrl?: string | null;
          id: number;
          name: string;
        };
        replies?: Array<{
          __typename?: 'ModelComment';
          content: string;
          createdAt: any;
          id: number;
          updatedAt: any;
          images?: Array<{
            __typename?: 'Image';
            id: number;
            filename: string;
            url: string;
          }> | null;
        }> | null;
        model: {
          __typename?: 'ModelDetail';
          id: number;
          isPublic: boolean;
          name: string;
          description?: string | null;
          triggerRemainingCount: number;
          userId: number;
        };
      }> | null;
      user: {
        __typename?: 'SimpleUser';
        avatarUrl?: string | null;
        id: number;
        name: string;
      };
    }> | null;
    user: {
      __typename?: 'SimpleUser';
      avatarUrl?: string | null;
      id: number;
      name: string;
    };
  } | null;
};

export type MemberOverviewQueryVariables = Exact<{
  modelId?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
}>;

export type MemberOverviewQuery = {
  __typename?: 'Query';
  memberOverview?: {
    __typename?: 'MemberPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'LabMember';
      avatarUrl?: string | null;
      canExecute: boolean;
      canRead: boolean;
      canUpdate: boolean;
      id: number;
      isOwner: boolean;
      joinedAt: any;
      name: string;
    }> | null;
    model?: { __typename?: 'ModelDetail'; name: string } | null;
  } | null;
};

export type MyMemberPermissionQueryVariables = Exact<{
  modelId?: InputMaybe<Scalars['Int']>;
}>;

export type MyMemberPermissionQuery = {
  __typename?: 'Query';
  myMemberPermission?: {
    __typename?: 'Permission';
    canDestroy: boolean;
    canExecute: boolean;
    canRead: boolean;
    canUpdate: boolean;
  } | null;
};

export type InvitationOverviewQueryVariables = Exact<{
  modelId?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
}>;

export type InvitationOverviewQuery = {
  __typename?: 'Query';
  invitationOverview?: {
    __typename?: 'InvitationPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'LabInvitation';
      canExecute: boolean;
      canRead: boolean;
      canUpdate: boolean;
      email: string;
      id: number;
      sentAt: any;
      status: string;
    }> | null;
  } | null;
};

export type SimpleReportFragment = {
  __typename?: 'SimpleReport';
  label?: string | null;
  level?: string | null;
  shortCode?: string | null;
  type?: string | null;
  mainScore?: {
    __typename?: 'Diagram';
    dates?: Array<any | null> | null;
    tabIdent?: string | null;
    type?: string | null;
    values?: Array<number | null> | null;
  } | null;
};

export type LabModelPublicOverviewQueryVariables = Exact<{
  sort?: InputMaybe<Scalars['String']>;
  direction?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  metricId?: InputMaybe<Scalars['Int']>;
}>;

export type LabModelPublicOverviewQuery = {
  __typename?: 'Query';
  labModelPublicOverview?: {
    __typename?: 'ModelPublicPage';
    page?: number | null;
    totalPage?: number | null;
    count?: number | null;
    items?: Array<{
      __typename?: 'ModelPublicOverview';
      description?: string | null;
      createdAt?: any | null;
      modelId?: number | null;
      modelName?: string | null;
      version?: string | null;
      versionId?: number | null;
      loginBinds?: {
        __typename?: 'LoginBind';
        account?: string | null;
        avatarUrl?: string | null;
        nickname?: string | null;
        provider?: string | null;
      } | null;
      metrics?: Array<{
        __typename?: 'ModelMetric';
        category?: string | null;
        defaultThreshold?: number | null;
        defaultWeight?: number | null;
        from?: string | null;
        id?: number | null;
        metricId?: number | null;
        ident?: string | null;
        name?: string | null;
        threshold?: number | null;
        weight?: number | null;
      }> | null;
    }> | null;
  } | null;
};

export type LabModelVersionReportDetailQueryVariables = Exact<{
  modelId: Scalars['Int'];
  versionId: Scalars['Int'];
  label?: InputMaybe<Scalars['String']>;
  shortCode?: InputMaybe<Scalars['String']>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type LabModelVersionReportDetailQuery = {
  __typename?: 'Query';
  labModelVersionReportDetail?: {
    __typename?: 'Report';
    label?: string | null;
    level?: string | null;
    shortCode?: string | null;
    type?: string | null;
    mainScore?: {
      __typename?: 'Diagram';
      dates?: Array<any | null> | null;
      tabIdent?: string | null;
      type?: string | null;
      values?: Array<number | null> | null;
    } | null;
    panels?: Array<{
      __typename?: 'Panel';
      diagrams?: Array<{
        __typename?: 'Diagram';
        dates?: Array<any | null> | null;
        tabIdent?: string | null;
        type?: string | null;
        values?: Array<number | null> | null;
      }> | null;
      metric?: {
        __typename?: 'ModelMetric';
        category?: string | null;
        defaultThreshold?: number | null;
        defaultWeight?: number | null;
        from?: string | null;
        id?: number | null;
        metricId?: number | null;
        ident?: string | null;
        name?: string | null;
        threshold?: number | null;
        weight?: number | null;
      } | null;
    }> | null;
  } | null;
};

export type CreateLabModelMutationVariables = Exact<{
  algorithm?: InputMaybe<Scalars['String']>;
  isScore: Scalars['Boolean'];
  isPublic: Scalars['Boolean'];
  metrics: Array<LabModelMetricInput> | LabModelMetricInput;
  name: Scalars['String'];
  description: Scalars['String'];
}>;

export type CreateLabModelMutation = {
  __typename?: 'Mutation';
  createLabModel?: {
    __typename?: 'CreateLabModelPayload';
    clientMutationId?: string | null;
    message?: string | null;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type CreateLabModelVersionMutationVariables = Exact<{
  algorithm?: InputMaybe<Scalars['String']>;
  isScore: Scalars['Boolean'];
  metrics: Array<LabModelMetricInput> | LabModelMetricInput;
  modelId: Scalars['Int'];
  version: Scalars['String'];
}>;

export type CreateLabModelVersionMutation = {
  __typename?: 'Mutation';
  createLabModelVersion?: {
    __typename?: 'CreateLabModelVersionPayload';
    clientMutationId?: string | null;
    message?: string | null;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type UpdateLabModelMutationVariables = Exact<{
  isPublic?: InputMaybe<Scalars['Boolean']>;
  modelId: Scalars['Int'];
  name?: InputMaybe<Scalars['String']>;
  description: Scalars['String'];
}>;

export type UpdateLabModelMutation = {
  __typename?: 'Mutation';
  updateLabModel?: {
    __typename?: 'UpdateLabModelPayload';
    message?: string | null;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type UpdateLabModelVersionMutationVariables = Exact<{
  modelId: Scalars['Int'];
  versionId: Scalars['Int'];
  version?: InputMaybe<Scalars['String']>;
  algorithm?: InputMaybe<Scalars['String']>;
  isScore: Scalars['Boolean'];
  metrics: Array<LabModelMetricInput> | LabModelMetricInput;
}>;

export type UpdateLabModelVersionMutation = {
  __typename?: 'Mutation';
  updateLabModelVersion?: {
    __typename?: 'UpdateLabModelVersionPayload';
    message?: string | null;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type DeleteLabModelMutationVariables = Exact<{
  id: Scalars['Int'];
}>;

export type DeleteLabModelMutation = {
  __typename?: 'Mutation';
  deleteLabModel?: {
    __typename?: 'DeleteLabModelPayload';
    clientMutationId?: string | null;
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type DeleteLabModelVersionMutationVariables = Exact<{
  modelId: Scalars['Int'];
  versionId: Scalars['Int'];
}>;

export type DeleteLabModelVersionMutation = {
  __typename?: 'Mutation';
  deleteLabModelVersion?: {
    __typename?: 'DeleteLabModelVersionPayload';
    clientMutationId?: string | null;
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type DeleteLabMemberMutationVariables = Exact<{
  modelId: Scalars['Int'];
  memberId: Scalars['Int'];
}>;

export type DeleteLabMemberMutation = {
  __typename?: 'Mutation';
  deleteLabMember?: {
    __typename?: 'DeleteLabMemberPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type SendMemberInviteMutationVariables = Exact<{
  modelId: Scalars['Int'];
  emails: Array<Scalars['String']> | Scalars['String'];
  canUpdate?: InputMaybe<Scalars['Boolean']>;
  canExecute?: InputMaybe<Scalars['Boolean']>;
}>;

export type SendMemberInviteMutation = {
  __typename?: 'Mutation';
  sendMemberInvite?: {
    __typename?: 'SendMemberInvitePayload';
    clientMutationId?: string | null;
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type UpdateMemberPermissionMutationVariables = Exact<{
  modelId: Scalars['Int'];
  memberId: Scalars['Int'];
  canUpdate?: InputMaybe<Scalars['Boolean']>;
  canExecute?: InputMaybe<Scalars['Boolean']>;
}>;

export type UpdateMemberPermissionMutation = {
  __typename?: 'Mutation';
  updateMemberPermission?: {
    __typename?: 'UpdateMemberPermissionPayload';
    clientMutationId?: string | null;
    message?: string | null;
    data?: {
      __typename?: 'LabMember';
      avatarUrl?: string | null;
      canExecute: boolean;
      canRead: boolean;
      canUpdate: boolean;
      id: number;
      isOwner: boolean;
      joinedAt: any;
      name: string;
    } | null;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type CancelMemberInviteMutationVariables = Exact<{
  modelId: Scalars['Int'];
  invitationId: Scalars['Int'];
}>;

export type CancelMemberInviteMutation = {
  __typename?: 'Mutation';
  cancelMemberInvite?: {
    __typename?: 'CancelMemberInvitePayload';
    clientMutationId?: string | null;
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type DeleteLabModelCommentMutationVariables = Exact<{
  modelId: Scalars['Int'];
  commentId: Scalars['Int'];
}>;

export type DeleteLabModelCommentMutation = {
  __typename?: 'Mutation';
  deleteLabModelComment?: {
    __typename?: 'DeleteLabModelCommentPayload';
    clientMutationId?: string | null;
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type CreateLabModelCommentMutationVariables = Exact<{
  modelId: Scalars['Int'];
  versionId: Scalars['Int'];
  modelMetricId?: InputMaybe<Scalars['Int']>;
  replyTo?: InputMaybe<Scalars['Int']>;
  content: Scalars['String'];
  images?: InputMaybe<Array<Base64ImageInput> | Base64ImageInput>;
}>;

export type CreateLabModelCommentMutation = {
  __typename?: 'Mutation';
  createLabModelComment?: {
    __typename?: 'CreateLabModelCommentPayload';
    clientMutationId?: string | null;
    message?: string | null;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type UpdateLabModelCommentMutationVariables = Exact<{
  commentId: Scalars['Int'];
  content: Scalars['String'];
  modelId: Scalars['Int'];
  images?: InputMaybe<Array<Base64ImageInput> | Base64ImageInput>;
}>;

export type UpdateLabModelCommentMutation = {
  __typename?: 'Mutation';
  updateLabModelComment?: {
    __typename?: 'UpdateLabModelCommentPayload';
    clientMutationId?: string | null;
    message?: string | null;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type TriggerLabModelVersionMutationVariables = Exact<{
  reportId: Scalars['Int'];
}>;

export type TriggerLabModelVersionMutation = {
  __typename?: 'Mutation';
  triggerLabModelVersion?: {
    __typename?: 'TriggerLabModelVersionPayload';
    clientMutationId?: string | null;
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type CreateLabDatasetMutationVariables = Exact<{
  datasets: Array<DatasetRowTypeInput> | DatasetRowTypeInput;
  modelId: Scalars['Int'];
  versionId: Scalars['Int'];
  isPublic: Scalars['Boolean'];
}>;

export type CreateLabDatasetMutation = {
  __typename?: 'Mutation';
  createLabDataset?: {
    __typename?: 'CreateLabDatasetPayload';
    clientMutationId?: string | null;
    message?: string | null;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type MyModelReportsQueryVariables = Exact<{
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
}>;

export type MyModelReportsQuery = {
  __typename?: 'Query';
  myModelReports?: {
    __typename?: 'MyReport';
    page?: number | null;
    totalPage?: number | null;
    count?: number | null;
    items?: Array<{
      __typename?: 'MyModelVersion';
      id: number;
      isPublic?: boolean | null;
      reportId: number;
      modelId: number;
      modelName?: string | null;
      version?: string | null;
      versionId: number;
      triggerStatus?: string | null;
      triggerUpdatedAt?: any | null;
      datasetStatus?: {
        __typename?: 'DatasetStatus';
        ident?: string | null;
        name?: string | null;
        items?: Array<{
          __typename?: 'DatasetCompletionRowStatus';
          firstIdent?: string | null;
          label?: string | null;
          shortCode?: string | null;
          level?: string | null;
          logoUrl?: string | null;
          secondIdent?: string | null;
          triggerStatus?: string | null;
          triggerUpdatedAt?: any | null;
        }> | null;
      } | null;
      metrics?: Array<{
        __typename?: 'ModelMetric';
        category?: string | null;
        defaultThreshold?: number | null;
        defaultWeight?: number | null;
        from?: string | null;
        id?: number | null;
        metricId?: number | null;
        ident?: string | null;
        name?: string | null;
        threshold?: number | null;
        weight?: number | null;
      }> | null;
      parentLabModel?: {
        __typename?: 'ModelDetail';
        name: string;
        id: number;
        loginBinds?: {
          __typename?: 'LoginBind';
          account?: string | null;
          avatarUrl?: string | null;
          nickname?: string | null;
        } | null;
      } | null;
    }> | null;
  } | null;
};

export type DeleteLabModelReportMutationVariables = Exact<{
  id: Scalars['Int'];
}>;

export type DeleteLabModelReportMutation = {
  __typename?: 'Mutation';
  deleteLabModelReport?: {
    __typename?: 'DeleteLabModelReportPayload';
    clientMutationId?: string | null;
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type UpdateLabModelReportMutationVariables = Exact<{
  datasets: Array<DatasetRowTypeInput> | DatasetRowTypeInput;
  reportId: Scalars['Int'];
  isPublic?: InputMaybe<Scalars['Boolean']>;
}>;

export type UpdateLabModelReportMutation = {
  __typename?: 'Mutation';
  updateLabModelReport?: {
    __typename?: 'UpdateLabModelReportPayload';
    clientMutationId?: string | null;
    message?: string | null;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type ReferenceModelReportsQueryVariables = Exact<{
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  modelId: Scalars['Int'];
}>;

export type ReferenceModelReportsQuery = {
  __typename?: 'Query';
  referenceModelReports?: {
    __typename?: 'MyReport';
    page?: number | null;
    totalPage?: number | null;
    count?: number | null;
    items?: Array<{
      __typename?: 'MyModelVersion';
      id: number;
      isPublic?: boolean | null;
      reportId: number;
      modelId: number;
      modelName?: string | null;
      version?: string | null;
      versionId: number;
      triggerStatus?: string | null;
      triggerUpdatedAt?: any | null;
      datasetStatus?: {
        __typename?: 'DatasetStatus';
        ident?: string | null;
        name?: string | null;
        items?: Array<{
          __typename?: 'DatasetCompletionRowStatus';
          firstIdent?: string | null;
          label?: string | null;
          shortCode?: string | null;
          level?: string | null;
          logoUrl?: string | null;
          secondIdent?: string | null;
          triggerStatus?: string | null;
          triggerUpdatedAt?: any | null;
        }> | null;
      } | null;
      metrics?: Array<{
        __typename?: 'ModelMetric';
        category?: string | null;
        defaultThreshold?: number | null;
        defaultWeight?: number | null;
        from?: string | null;
        id?: number | null;
        metricId?: number | null;
        ident?: string | null;
        name?: string | null;
        threshold?: number | null;
        weight?: number | null;
      }> | null;
      parentLabModel?: {
        __typename?: 'ModelDetail';
        name: string;
        id: number;
        loginBinds?: {
          __typename?: 'LoginBind';
          account?: string | null;
          avatarUrl?: string | null;
          nickname?: string | null;
        } | null;
      } | null;
    }> | null;
  } | null;
};

export type TriggerSingleProjectMutationVariables = Exact<{
  reportId: Scalars['Int'];
  projectUrl: Scalars['String'];
  level: Scalars['String'];
}>;

export type TriggerSingleProjectMutation = {
  __typename?: 'Mutation';
  triggerSingleProject?: {
    __typename?: 'TriggerSingleProjectPayload';
    clientMutationId?: string | null;
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type CreateRepoTaskMutationVariables = Exact<{
  repoUrls: Array<Scalars['String']> | Scalars['String'];
  origin: Scalars['String'];
}>;

export type CreateRepoTaskMutation = {
  __typename?: 'Mutation';
  createRepoTask?: {
    __typename?: 'CreateRepoTaskPayload';
    message?: string | null;
    status: string;
    prUrl?: string | null;
    reportUrl?: string | null;
  } | null;
};

export type CreateProjectTaskMutationVariables = Exact<{
  projectName: Scalars['String'];
  projectTypes: Array<ProjectTypeInput> | ProjectTypeInput;
  origin: Scalars['String'];
  projectUrl?: InputMaybe<Scalars['String']>;
  projectLogoUrl?: InputMaybe<Scalars['String']>;
}>;

export type CreateProjectTaskMutation = {
  __typename?: 'Mutation';
  createProjectTask?: {
    __typename?: 'CreateProjectTaskPayload';
    message?: string | null;
    status: string;
    prUrl?: string | null;
    reportUrl?: string | null;
  } | null;
};

export type ModifyUserMutationVariables = Exact<{
  name: Scalars['String'];
  email: Scalars['String'];
  language?: InputMaybe<Scalars['String']>;
}>;

export type ModifyUserMutation = {
  __typename?: 'Mutation';
  modifyUser?: {
    __typename?: 'ModifyUserPayload';
    message?: string | null;
    status: string;
  } | null;
};

export type UserUnbindMutationVariables = Exact<{
  provider: Scalars['String'];
}>;

export type UserUnbindMutation = {
  __typename?: 'Mutation';
  userUnbind?: {
    __typename?: 'UserUnbindPayload';
    message?: string | null;
    status: string;
  } | null;
};

export type SendEmailVerifyMutationVariables = Exact<{ [key: string]: never }>;

export type SendEmailVerifyMutation = {
  __typename?: 'Mutation';
  sendEmailVerify?: {
    __typename?: 'SendEmailVerifyPayload';
    message?: string | null;
    status: string;
  } | null;
};

export type SignOutMutationVariables = Exact<{ [key: string]: never }>;

export type SignOutMutation = {
  __typename?: 'Mutation';
  signOut?: boolean | null;
};

export type DeleteUserMutationVariables = Exact<{ [key: string]: never }>;

export type DeleteUserMutation = {
  __typename?: 'Mutation';
  destroyUser?: boolean | null;
};

export type BindWechatLinkMutationVariables = Exact<{ [key: string]: never }>;

export type BindWechatLinkMutation = {
  __typename?: 'Mutation';
  bindWechatLink?: {
    __typename?: 'BindWechatLinkPayload';
    url: string;
    message?: string | null;
  } | null;
};

export type CreateSubscriptionMutationVariables = Exact<{
  label: Scalars['String'];
  level: Scalars['String'];
}>;

export type CreateSubscriptionMutation = {
  __typename?: 'Mutation';
  createSubscription?: {
    __typename?: 'CreateSubscriptionPayload';
    message?: string | null;
    status: string;
  } | null;
};

export type CancelSubscriptionMutationVariables = Exact<{
  label: Scalars['String'];
  level: Scalars['String'];
}>;

export type CancelSubscriptionMutation = {
  __typename?: 'Mutation';
  cancelSubscription?: {
    __typename?: 'CancelSubscriptionPayload';
    message?: string | null;
    status: string;
  } | null;
};

export type ModifyUserOrgsMutationVariables = Exact<{
  platform: Scalars['String'];
  organizations: Array<ContributorOrgInput> | ContributorOrgInput;
}>;

export type ModifyUserOrgsMutation = {
  __typename?: 'Mutation';
  modifyUserOrgs?: {
    __typename?: 'ModifyUserOrgsPayload';
    clientMutationId?: string | null;
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type ManageUserOrgsMutationVariables = Exact<{
  platform: Scalars['String'];
  organizations: Array<ContributorOrgInput> | ContributorOrgInput;
  contributor: Scalars['String'];
  label: Scalars['String'];
  level: Scalars['String'];
}>;

export type ManageUserOrgsMutation = {
  __typename?: 'Mutation';
  manageUserOrgs?: {
    __typename?: 'ManageUserOrgsPayload';
    clientMutationId?: string | null;
    message?: string | null;
    prUrl?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type CreateTpcSoftwareSelectionReportMutationVariables = Exact<{
  label: Scalars['String'];
  level: Scalars['String'];
  reportType: Scalars['Int'];
  softwareReport: TpcSoftwareSelectionReportInput;
}>;

export type CreateTpcSoftwareSelectionReportMutation = {
  __typename?: 'Mutation';
  createTpcSoftwareSelectionReport?: {
    __typename?: 'CreateTpcSoftwareSelectionReportPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type CreateTpcSoftwareSelectionMutationVariables = Exact<{
  label: Scalars['String'];
  level: Scalars['String'];
  tpcSoftwareSelectionReportIds: Array<Scalars['Int']> | Scalars['Int'];
  selectionType: Scalars['Int'];
  repoUrl: Array<Scalars['String']> | Scalars['String'];
  committers: Array<Scalars['String']> | Scalars['String'];
  functionalDescription: Scalars['String'];
  incubationTime: Scalars['String'];
  demandSource: Scalars['String'];
  reason: Scalars['String'];
  sameTypeSoftwareName?: InputMaybe<Scalars['String']>;
  targetSoftware: Scalars['String'];
  isSameTypeCheck: Scalars['Int'];
}>;

export type CreateTpcSoftwareSelectionMutation = {
  __typename?: 'Mutation';
  createTpcSoftwareSelection?: {
    __typename?: 'CreateTpcSoftwareSelectionPayload';
    id: number;
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type CreateTpcSoftwareReportMetricClarificationMutationVariables =
  Exact<{
    shortCode: Scalars['String'];
    metricName: Scalars['String'];
    content: Scalars['String'];
    reportType?: InputMaybe<Scalars['Int']>;
  }>;

export type CreateTpcSoftwareReportMetricClarificationMutation = {
  __typename?: 'Mutation';
  createTpcSoftwareReportMetricClarification?: {
    __typename?: 'CreateTpcSoftwareReportMetricClarificationPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type DeleteReportMetricClarificationMutationVariables = Exact<{
  clarificationId: Scalars['Int'];
}>;

export type DeleteReportMetricClarificationMutation = {
  __typename?: 'Mutation';
  deleteTpcSoftwareReportMetricClarification?: {
    __typename?: 'DeleteTpcSoftwareReportMetricClarificationPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type UpdateReportMetricClarificationMutationVariables = Exact<{
  clarificationId: Scalars['Int'];
  content: Scalars['String'];
}>;

export type UpdateReportMetricClarificationMutation = {
  __typename?: 'Mutation';
  updateTpcSoftwareReportMetricClarification?: {
    __typename?: 'UpdateTpcSoftwareReportMetricClarificationPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type AcceptTpcSoftwareReportMetricClarificationMutationVariables =
  Exact<{
    shortCode: Scalars['String'];
    metricName: Scalars['String'];
    state: Scalars['Int'];
    memberType: Scalars['Int'];
    reportType?: InputMaybe<Scalars['Int']>;
  }>;

export type AcceptTpcSoftwareReportMetricClarificationMutation = {
  __typename?: 'Mutation';
  acceptTpcSoftwareReportMetricClarification?: {
    __typename?: 'AcceptTpcSoftwareReportMetricClarificationPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type UpdateTpcSoftwareSelectionReportMutationVariables = Exact<{
  reportId: Scalars['Int'];
  softwareReport: TpcSoftwareSelectionReportUpdateInput;
}>;

export type UpdateTpcSoftwareSelectionReportMutation = {
  __typename?: 'Mutation';
  updateTpcSoftwareSelectionReport?: {
    __typename?: 'UpdateTpcSoftwareSelectionReportPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type UpdateTpcSoftwareSelectionMutationVariables = Exact<{
  selectionId: Scalars['Int'];
  repoUrl: Array<Scalars['String']> | Scalars['String'];
  committers: Array<Scalars['String']> | Scalars['String'];
  functionalDescription: Scalars['String'];
  incubationTime: Scalars['String'];
  demandSource: Scalars['String'];
  reason: Scalars['String'];
  sameTypeSoftwareName?: InputMaybe<Scalars['String']>;
  isSameTypeCheck: Scalars['Int'];
}>;

export type UpdateTpcSoftwareSelectionMutation = {
  __typename?: 'Mutation';
  updateTpcSoftwareSelection?: {
    __typename?: 'UpdateTpcSoftwareSelectionPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type CreateTpcSoftwareSelectionCommentMutationVariables = Exact<{
  selectionId: Scalars['Int'];
  content: Scalars['String'];
  reportType?: InputMaybe<Scalars['Int']>;
}>;

export type CreateTpcSoftwareSelectionCommentMutation = {
  __typename?: 'Mutation';
  createTpcSoftwareSelectionComment?: {
    __typename?: 'CreateTpcSoftwareSelectionCommentPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type DeleteTpcSoftwareSelectionCommentMutationVariables = Exact<{
  commentId: Scalars['Int'];
}>;

export type DeleteTpcSoftwareSelectionCommentMutation = {
  __typename?: 'Mutation';
  deleteTpcSoftwareSelectionComment?: {
    __typename?: 'DeleteTpcSoftwareSelectionCommentPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type UpdateTpcSoftwareSelectionCommentMutationVariables = Exact<{
  commentId: Scalars['Int'];
  content: Scalars['String'];
}>;

export type UpdateTpcSoftwareSelectionCommentMutation = {
  __typename?: 'Mutation';
  updateTpcSoftwareSelectionComment?: {
    __typename?: 'UpdateTpcSoftwareSelectionCommentPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type AcceptTpcSoftwareSelectionMutationVariables = Exact<{
  selectionId: Scalars['Int'];
  state: Scalars['Int'];
  memberType: Scalars['Int'];
}>;

export type AcceptTpcSoftwareSelectionMutation = {
  __typename?: 'Mutation';
  acceptTpcSoftwareSelection?: {
    __typename?: 'AcceptTpcSoftwareSelectionPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type CreateTpcSoftwareGraduationReportMutationVariables = Exact<{
  label: Scalars['String'];
  level: Scalars['String'];
  softwareReport: TpcSoftwareGraduationReportInput;
}>;

export type CreateTpcSoftwareGraduationReportMutation = {
  __typename?: 'Mutation';
  createTpcSoftwareGraduationReport?: {
    __typename?: 'CreateTpcSoftwareGraduationReportPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type UpdateTpcSoftwareGraduationReportMutationVariables = Exact<{
  reportId: Scalars['Int'];
  softwareReport: TpcSoftwareGraduationReportUpdateInput;
}>;

export type UpdateTpcSoftwareGraduationReportMutation = {
  __typename?: 'Mutation';
  updateTpcSoftwareGraduationReport?: {
    __typename?: 'UpdateTpcSoftwareGraduationReportPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type CreateTpcSoftwareGraduationMutationVariables = Exact<{
  label: Scalars['String'];
  level: Scalars['String'];
  tpcSoftwareGraduationReportIds: Array<Scalars['Int']> | Scalars['Int'];
  committers: Array<Scalars['String']> | Scalars['String'];
  demandSource: Scalars['String'];
  functionalDescription: Scalars['String'];
  incubationTime?: InputMaybe<Scalars['String']>;
  incubationStartTime?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type CreateTpcSoftwareGraduationMutation = {
  __typename?: 'Mutation';
  createTpcSoftwareGraduation?: {
    __typename?: 'CreateTpcSoftwareGraduationPayload';
    id: number;
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type UpdateTpcSoftwareGraduationMutationVariables = Exact<{
  graduationId: Scalars['Int'];
  committers: Array<Scalars['String']> | Scalars['String'];
  demandSource: Scalars['String'];
  functionalDescription: Scalars['String'];
  incubationTime: Scalars['String'];
  incubationStartTime?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type UpdateTpcSoftwareGraduationMutation = {
  __typename?: 'Mutation';
  updateTpcSoftwareGraduation?: {
    __typename?: 'UpdateTpcSoftwareGraduationPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type AcceptTpcSoftwareGraduationMutationVariables = Exact<{
  graduationId: Scalars['Int'];
  state: Scalars['Int'];
  memberType: Scalars['Int'];
}>;

export type AcceptTpcSoftwareGraduationMutation = {
  __typename?: 'Mutation';
  acceptTpcSoftwareGraduation?: {
    __typename?: 'AcceptTpcSoftwareGraduationPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type TriggerTpcSoftwareSelectionReportMutationVariables = Exact<{
  reportId: Scalars['Int'];
}>;

export type TriggerTpcSoftwareSelectionReportMutation = {
  __typename?: 'Mutation';
  triggerTpcSoftwareSelectionReport?: {
    __typename?: 'TriggerTpcSoftwareSelectionReportPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type TriggerTpcSoftwareGraduationReportMutationVariables = Exact<{
  reportId: Scalars['Int'];
}>;

export type TriggerTpcSoftwareGraduationReportMutation = {
  __typename?: 'Mutation';
  triggerTpcSoftwareGraduationReport?: {
    __typename?: 'TriggerTpcSoftwareGraduationReportPayload';
    message?: string | null;
    status: string;
    errors?: Array<{
      __typename?: 'Error';
      message?: string | null;
      path?: Array<string> | null;
    }> | null;
  } | null;
};

export type CreateAuthTokenMutationVariables = Exact<{
  name: Scalars['String'];
  expiresAt: Scalars['ISO8601DateTime'];
}>;

export type CreateAuthTokenMutation = {
  __typename?: 'Mutation';
  createAuthToken?: {
    __typename?: 'CreateAuthTokenPayload';
    message?: string | null;
    data?: { __typename?: 'Token'; token?: string | null } | null;
    errors?: Array<{ __typename?: 'Error'; message?: string | null }> | null;
  } | null;
};

export type DeleteAuthTokenMutationVariables = Exact<{
  id: Scalars['Int'];
}>;

export type DeleteAuthTokenMutation = {
  __typename?: 'Mutation';
  deleteAuthToken?: {
    __typename?: 'DeleteAuthTokenPayload';
    message?: string | null;
    status: boolean;
    errors?: Array<{ __typename?: 'Error'; message?: string | null }> | null;
  } | null;
};

export type CommitsRepoDataListQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  branch?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type CommitsRepoDataListQuery = {
  __typename?: 'Query';
  commitsRepoPage: {
    __typename?: 'CommitRepoPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'CommitRepo';
      linesAdded?: number | null;
      linesChanged?: number | null;
      linesRemoved?: number | null;
      repoName?: string | null;
      repoAttributeType?: string | null;
      sigName?: string | null;
    }> | null;
  };
};

export type CommitsDetailDataListQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  branch?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type CommitsDetailDataListQuery = {
  __typename?: 'Query';
  commitsDetailPage: {
    __typename?: 'CommitDetailPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'CommitDetail';
      authorEmail?: string | null;
      commitHash?: string | null;
      grimoireCreationDate?: any | null;
      linesAdded?: number | null;
      linesChanged?: number | null;
      linesRemoved?: number | null;
      mergedAt?: any | null;
      orgName?: string | null;
      prUrl?: string | null;
      repoName?: string | null;
    }> | null;
  };
};

export type CommitsOrganizationDataListQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  branch?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type CommitsOrganizationDataListQuery = {
  __typename?: 'Query';
  commitsOrganizationPage: {
    __typename?: 'CommitOrganizationPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'CommitOrganization';
      linesAdded?: number | null;
      linesChanged?: number | null;
      linesChangedRatio?: number | null;
      linesRemoved?: number | null;
      orgName?: string | null;
    }> | null;
  };
};

export type CommitsContributorListQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  branch?: InputMaybe<Scalars['String']>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type CommitsContributorListQuery = {
  __typename?: 'Query';
  commitsContributorList: Array<{
    __typename?: 'CommitContributor';
    authorEmail?: string | null;
    grimoireCreationDate?: any | null;
    linesAdded?: number | null;
    linesChanged?: number | null;
    linesRemoved?: number | null;
    orgName?: string | null;
  }>;
};

export type CodesRepoPageQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  branch?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type CodesRepoPageQuery = {
  __typename?: 'Query';
  codesRepoPage: {
    __typename?: 'CodeRepoPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'CodeRepo';
      lines?: number | null;
      linesChang?: number | null;
      linesTotal?: number | null;
      manager?: string | null;
      repoAttributeType?: string | null;
      repoName?: string | null;
      sigName?: string | null;
    }> | null;
  };
};

export type CodesDetailPageQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  branch?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type CodesDetailPageQuery = {
  __typename?: 'Query';
  codesDetailPage: {
    __typename?: 'CodeDetailPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'CodeDetail';
      commitUrls?: Array<string> | null;
      createdAt?: any | null;
      issueNum?: string | null;
      linesTotal?: number | null;
      mergedAt?: any | null;
      tag?: string | null;
      title?: string | null;
      url?: string | null;
      userLogin?: string | null;
    }> | null;
  };
};

export type CodesTrendQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  branch?: InputMaybe<Scalars['String']>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type CodesTrendQuery = {
  __typename?: 'Query';
  codesTrend: Array<{
    __typename?: 'CodeTrend';
    sigName?: string | null;
    detailList?: Array<{
      __typename?: 'CodeTrendDetail';
      count?: number | null;
      date?: any | null;
    }> | null;
  }>;
};

export type CommitsSigPageQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  branch?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type CommitsSigPageQuery = {
  __typename?: 'Query';
  commitsSigPage: {
    __typename?: 'CommitSigPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'CommitSig';
      linesAdded?: number | null;
      linesChanged?: number | null;
      linesRemoved?: number | null;
      sigName?: string | null;
    }> | null;
  };
};

export type CodesCheckDetailPageQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  branch?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type CodesCheckDetailPageQuery = {
  __typename?: 'Query';
  codesCheckDetailPage: {
    __typename?: 'CodeCheckDetailPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'CodeCheckDetail';
      commentCreatedAt?: any | null;
      commentNum?: number | null;
      issueNum?: string | null;
      linesAdded?: number | null;
      linesRemoved?: number | null;
      prState?: string | null;
      prUrl?: string | null;
      prUserLogin?: string | null;
      timeCheckHours?: number | null;
      userLogin?: string | null;
    }> | null;
  };
};

export type CodesCheckPageQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  branch?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type CodesCheckPageQuery = {
  __typename?: 'Query';
  codesCheckPage: {
    __typename?: 'CodeCheckPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'CodeCheck';
      commentNum?: number | null;
      linesAdded?: number | null;
      linesRemoved?: number | null;
      timeCheckHours?: number | null;
      userLogin?: string | null;
    }> | null;
  };
};

export type CommitFeedbackPageQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type CommitFeedbackPageQuery = {
  __typename?: 'Query';
  commitFeedbackPage: {
    __typename?: 'CommitFeedbackPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'CommitFeedback';
      commitHash?: string | null;
      contactWay?: string | null;
      createAtDate?: any | null;
      id?: string | null;
      newLinesAdded?: number | null;
      newLinesChanged?: number | null;
      newLinesRemoved?: number | null;
      oldLinesAdded?: number | null;
      oldLinesChanged?: number | null;
      oldLinesRemoved?: number | null;
      prUrl?: string | null;
      repoName?: string | null;
      requestReviewerEmail?: string | null;
      reviewMsg?: string | null;
      reviewerEmail?: string | null;
      reviewerId?: string | null;
      state?: string | null;
      submitReason?: string | null;
      submitUserEmail?: string | null;
      submitUserId?: string | null;
      updateAtDate?: any | null;
    }> | null;
  };
};

export type OrganizationPageQueryVariables = Exact<{
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
}>;

export type OrganizationPageQuery = {
  __typename?: 'Query';
  organizationPage: {
    __typename?: 'OrganizationPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'Organization';
      domain?: Array<string> | null;
      orgName?: string | null;
    }> | null;
  };
};

export type SubjectAccessLevelPageQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  accessLevel?: InputMaybe<Scalars['Int']>;
}>;

export type SubjectAccessLevelPageQuery = {
  __typename?: 'Query';
  subjectAccessLevelPage?: {
    __typename?: 'SubjectAccessLevelPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'SubjectAccessLevel';
      accessLevel: number;
      id: number;
      subjectId: number;
      userId: number;
      user?: {
        __typename?: 'User';
        id: number;
        name: string;
        roleLevel: number;
        email: string;
        language: string;
        emailVerified: boolean;
        loginBinds?: Array<{
          __typename?: 'LoginBind';
          account?: string | null;
          avatarUrl?: string | null;
          nickname?: string | null;
          provider?: string | null;
        }> | null;
        contributingOrgs?: Array<{
          __typename?: 'ContributorOrg';
          firstDate?: any | null;
          lastDate?: any | null;
          orgName?: string | null;
          platformType?: string | null;
        }> | null;
      } | null;
    }> | null;
  } | null;
};

export type SubjectSigPageQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
}>;

export type SubjectSigPageQuery = {
  __typename?: 'Query';
  subjectSigPage?: {
    __typename?: 'SubjectSigPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'SubjectSig';
      description: string;
      emails: Array<string>;
      id: number;
      maintainers: Array<string>;
      name: string;
      linkSig?: {
        __typename?: 'SubjectLinkSig';
        label?: string | null;
        level?: string | null;
        repos?: Array<string> | null;
      } | null;
    }> | null;
  } | null;
};

export type TpcSoftwareSigFragment = {
  __typename?: 'TpcSoftwareSig';
  description: string;
  id: number;
  name: string;
  sigCommitter?: Array<{
    __typename?: 'TpcSoftwareMember';
    giteeAccount?: string | null;
    id?: number | null;
  }> | null;
};

export type TpcSoftwareReportMetricFragment = {
  __typename?: 'TpcSoftwareReportMetric';
  complianceDco?: number | null;
  complianceLicense?: number | null;
  compliancePackageSig?: number | null;
  complianceLicenseCompatibility?: number | null;
  createdAt?: any | null;
  ecologyAdoptionAnalysis?: number | null;
  ecologyCodeMaintenance?: number | null;
  ecologyCommunitySupport?: number | null;
  ecologyDependencyAcquisition?: number | null;
  ecologyPatentRisk?: number | null;
  ecologySoftwareQuality?: number | null;
  ecologyAdaptationMethod?: number | null;
  id: number;
  lifecycleVersionLifecycle?: number | null;
  lifecycleVersionNormalization?: number | null;
  lifecycleVersionNumber?: number | null;
  securityBinaryArtifact?: number | null;
  securityHistoryVulnerability?: number | null;
  securityVulnerability?: number | null;
  securityVulnerabilityDisclosure?: number | null;
  securityVulnerabilityResponse?: number | null;
  status?: string | null;
  tpcSoftwareReportId?: number | null;
  updatedAt?: any | null;
};

export type TpcSoftwareSelectionReportPageQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  reportTypeList: Array<Scalars['Int']> | Scalars['Int'];
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
}>;

export type TpcSoftwareSelectionReportPageQuery = {
  __typename?: 'Query';
  tpcSoftwareSelectionReportPage?: {
    __typename?: 'TpcSoftwareSelectionReportPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'TpcSoftwareSelectionReport';
      adaptationMethod?: string | null;
      codeCount?: number | null;
      codeUrl?: string | null;
      id: number;
      name?: string | null;
      programmingLanguage?: string | null;
      reportType: number;
      shortCode: string;
      userId: number;
      vulnerabilityResponse?: string | null;
      architectureDiagrams?: Array<{
        __typename?: 'Image';
        filename: string;
        id: number;
        url: string;
      }> | null;
      user?: {
        __typename?: 'User';
        name: string;
        loginBinds?: Array<{
          __typename?: 'LoginBind';
          account?: string | null;
          nickname?: string | null;
          provider?: string | null;
        }> | null;
      } | null;
      tpcSoftwareReportMetric?: {
        __typename?: 'TpcSoftwareReportMetric';
        complianceDco?: number | null;
        complianceLicense?: number | null;
        compliancePackageSig?: number | null;
        complianceLicenseCompatibility?: number | null;
        createdAt?: any | null;
        ecologyAdoptionAnalysis?: number | null;
        ecologyCodeMaintenance?: number | null;
        ecologyCommunitySupport?: number | null;
        ecologyDependencyAcquisition?: number | null;
        ecologyPatentRisk?: number | null;
        ecologySoftwareQuality?: number | null;
        ecologyAdaptationMethod?: number | null;
        id: number;
        lifecycleVersionLifecycle?: number | null;
        lifecycleVersionNormalization?: number | null;
        lifecycleVersionNumber?: number | null;
        securityBinaryArtifact?: number | null;
        securityHistoryVulnerability?: number | null;
        securityVulnerability?: number | null;
        securityVulnerabilityDisclosure?: number | null;
        securityVulnerabilityResponse?: number | null;
        status?: string | null;
        tpcSoftwareReportId?: number | null;
        updatedAt?: any | null;
      } | null;
      tpcSoftwareSig?: {
        __typename?: 'TpcSoftwareSig';
        description: string;
        id: number;
        name: string;
        sigCommitter?: Array<{
          __typename?: 'TpcSoftwareMember';
          giteeAccount?: string | null;
          id?: number | null;
        }> | null;
      } | null;
    }> | null;
  } | null;
};

export type TpcSoftwareSelectionPageQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  selectionType: Scalars['Int'];
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
}>;

export type TpcSoftwareSelectionPageQuery = {
  __typename?: 'Query';
  tpcSoftwareSelectionPage?: {
    __typename?: 'TpcSoftwareSelectionPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'TpcSoftwareSelection';
      committers?: Array<string> | null;
      createdAt: any;
      demandSource?: string | null;
      functionalDescription?: string | null;
      id: number;
      incubationTime?: string | null;
      isSameTypeCheck?: number | null;
      issueUrl?: string | null;
      repoUrl?: Array<string> | null;
      reason?: string | null;
      sameTypeSoftwareName?: string | null;
      selectionType?: number | null;
      state?: number | null;
      targetSoftware?: string | null;
      updatedAt: any;
      userId: number;
      tpcSoftwareSelectionReportIds?: Array<string> | null;
      user?: {
        __typename?: 'User';
        name: string;
        loginBinds?: Array<{
          __typename?: 'LoginBind';
          account?: string | null;
          nickname?: string | null;
          provider?: string | null;
        }> | null;
      } | null;
      tpcSoftwareSelectionReports?: Array<{
        __typename?: 'TpcSoftwareSelectionReport';
        name?: string | null;
        shortCode: string;
        codeUrl?: string | null;
      }> | null;
    }> | null;
  } | null;
};

export type TpcSoftwareReportMetricDetailFragment = {
  __typename?: 'TpcSoftwareReportMetric';
  baseCodeUrlDetail?: string | null;
  baseRepoNameDetail?: string | null;
  baseWebsiteUrlDetail?: string | null;
  compliancePackageSigDetail?: Array<string> | null;
  ecologyAdoptionAnalysisDetail?: string | null;
  ecologyCodeMaintenanceDetail?: string | null;
  ecologyCommunitySupportDetail?: string | null;
  ecologyDependencyAcquisitionDetail?: Array<string> | null;
  ecologyPatentRiskDetail?: string | null;
  ecologyAdaptationMethodDetail?: string | null;
  lifecycleVersionNormalizationDetail?: string | null;
  lifecycleVersionNumberDetail?: string | null;
  securityVulnerabilityDisclosureDetail?: string | null;
  securityVulnerabilityResponseDetail?: string | null;
  complianceDcoDetail?: {
    __typename?: 'TpcSoftwareReportMetricComplianceDco';
    commitCount?: number | null;
    commitDcoCount?: number | null;
  } | null;
  complianceLicenseCompatibilityDetail?: {
    __typename?: 'TpcSoftwareReportMetricComplianceLicenseCompatibility';
    oatDetail?: Array<string> | null;
    tpcDetail?: Array<{
      __typename?: 'TpcSoftwareReportMetricComplianceLicenseCompatibilityTpc';
      license?: string | null;
      licenseConflictList?: Array<string> | null;
    }> | null;
  } | null;
  complianceLicenseDetail?: {
    __typename?: 'TpcSoftwareReportMetricComplianceLicense';
    nonOsiLicenses?: Array<string> | null;
    osiCopyleftLimitedLicenses?: Array<string> | null;
    osiFreeRestrictedLicenses?: Array<string> | null;
    osiPermissiveLicenses?: Array<string> | null;
  } | null;
  ecologySoftwareQualityDetail?: {
    __typename?: 'TpcSoftwareReportMetricEcologySoftwareQuality';
    coverageRatio?: number | null;
    coverageScore?: number | null;
    duplicationRatio?: number | null;
    duplicationScore?: number | null;
  } | null;
  lifecycleVersionLifecycleDetail?: {
    __typename?: 'TpcSoftwareReportMetricLifecycleVersionLifecycle';
    archived?: boolean | null;
    latestVersionCreatedAt?: any | null;
    latestVersionName?: string | null;
  } | null;
  securityBinaryArtifactDetail?: {
    __typename?: 'TpcSoftwareReportMetricSecurityBinaryArtifact';
    oatDetail?: Array<string> | null;
    tpcDetail?: Array<string> | null;
  } | null;
  securityHistoryVulnerabilityDetail?: Array<{
    __typename?: 'TpcSoftwareReportMetricSecurityHistoryVulnerability';
    summary?: string | null;
    vulnerability?: string | null;
  }> | null;
  securityVulnerabilityDetail?: Array<{
    __typename?: 'TpcSoftwareReportMetricSecurityVulnerability';
    packageName?: string | null;
    packageVersion?: string | null;
    vulnerabilities?: Array<string> | null;
  }> | null;
};

export type TpcSoftwareReportMetricRawFragment = {
  __typename?: 'TpcSoftwareReportMetricRaw';
  codeUrl?: string | null;
  complianceDcoRaw?: string | null;
  complianceLicenseCompatibilityRaw?: string | null;
  complianceLicenseRaw?: string | null;
  compliancePackageSigRaw?: string | null;
  ecologyAdoptionAnalysisRaw?: string | null;
  ecologyCodeMaintenanceRaw?: string | null;
  ecologyCommunitySupportRaw?: string | null;
  ecologyDependencyAcquisitionRaw?: string | null;
  ecologyPatentRiskRaw?: string | null;
  ecologySoftwareQualityRaw?: string | null;
  ecologyAdaptationMethodRaw?: string | null;
  id: number;
  lifecycleVersionLifecycleRaw?: string | null;
  lifecycleVersionNormalizationRaw?: string | null;
  lifecycleVersionNumberRaw?: string | null;
  securityBinaryArtifactRaw?: string | null;
  securityHistoryVulnerabilityRaw?: string | null;
  securityVulnerabilityDisclosureRaw?: string | null;
  securityVulnerabilityRaw?: string | null;
  securityVulnerabilityResponseRaw?: string | null;
};

export type TpcSoftwareSelectionReportQueryVariables = Exact<{
  shortCode: Scalars['String'];
}>;

export type TpcSoftwareSelectionReportQuery = {
  __typename?: 'Query';
  tpcSoftwareSelectionReport?: {
    __typename?: 'TpcSoftwareSelectionReport';
    adaptationMethod?: string | null;
    codeCount?: number | null;
    codeUrl?: string | null;
    id: number;
    name?: string | null;
    programmingLanguage?: string | null;
    shortCode: string;
    vulnerabilityResponse?: string | null;
    userId: number;
    architectureDiagrams?: Array<{
      __typename?: 'Image';
      filename: string;
      id: number;
      url: string;
    }> | null;
    tpcSoftwareReportMetric?: {
      __typename?: 'TpcSoftwareReportMetric';
      complianceDco?: number | null;
      complianceLicense?: number | null;
      compliancePackageSig?: number | null;
      complianceLicenseCompatibility?: number | null;
      createdAt?: any | null;
      ecologyAdoptionAnalysis?: number | null;
      ecologyCodeMaintenance?: number | null;
      ecologyCommunitySupport?: number | null;
      ecologyDependencyAcquisition?: number | null;
      ecologyPatentRisk?: number | null;
      ecologySoftwareQuality?: number | null;
      ecologyAdaptationMethod?: number | null;
      id: number;
      lifecycleVersionLifecycle?: number | null;
      lifecycleVersionNormalization?: number | null;
      lifecycleVersionNumber?: number | null;
      securityBinaryArtifact?: number | null;
      securityHistoryVulnerability?: number | null;
      securityVulnerability?: number | null;
      securityVulnerabilityDisclosure?: number | null;
      securityVulnerabilityResponse?: number | null;
      status?: string | null;
      tpcSoftwareReportId?: number | null;
      updatedAt?: any | null;
      baseCodeUrlDetail?: string | null;
      baseRepoNameDetail?: string | null;
      baseWebsiteUrlDetail?: string | null;
      compliancePackageSigDetail?: Array<string> | null;
      ecologyAdoptionAnalysisDetail?: string | null;
      ecologyCodeMaintenanceDetail?: string | null;
      ecologyCommunitySupportDetail?: string | null;
      ecologyDependencyAcquisitionDetail?: Array<string> | null;
      ecologyPatentRiskDetail?: string | null;
      ecologyAdaptationMethodDetail?: string | null;
      lifecycleVersionNormalizationDetail?: string | null;
      lifecycleVersionNumberDetail?: string | null;
      securityVulnerabilityDisclosureDetail?: string | null;
      securityVulnerabilityResponseDetail?: string | null;
      complianceDcoDetail?: {
        __typename?: 'TpcSoftwareReportMetricComplianceDco';
        commitCount?: number | null;
        commitDcoCount?: number | null;
      } | null;
      complianceLicenseCompatibilityDetail?: {
        __typename?: 'TpcSoftwareReportMetricComplianceLicenseCompatibility';
        oatDetail?: Array<string> | null;
        tpcDetail?: Array<{
          __typename?: 'TpcSoftwareReportMetricComplianceLicenseCompatibilityTpc';
          license?: string | null;
          licenseConflictList?: Array<string> | null;
        }> | null;
      } | null;
      complianceLicenseDetail?: {
        __typename?: 'TpcSoftwareReportMetricComplianceLicense';
        nonOsiLicenses?: Array<string> | null;
        osiCopyleftLimitedLicenses?: Array<string> | null;
        osiFreeRestrictedLicenses?: Array<string> | null;
        osiPermissiveLicenses?: Array<string> | null;
      } | null;
      ecologySoftwareQualityDetail?: {
        __typename?: 'TpcSoftwareReportMetricEcologySoftwareQuality';
        coverageRatio?: number | null;
        coverageScore?: number | null;
        duplicationRatio?: number | null;
        duplicationScore?: number | null;
      } | null;
      lifecycleVersionLifecycleDetail?: {
        __typename?: 'TpcSoftwareReportMetricLifecycleVersionLifecycle';
        archived?: boolean | null;
        latestVersionCreatedAt?: any | null;
        latestVersionName?: string | null;
      } | null;
      securityBinaryArtifactDetail?: {
        __typename?: 'TpcSoftwareReportMetricSecurityBinaryArtifact';
        oatDetail?: Array<string> | null;
        tpcDetail?: Array<string> | null;
      } | null;
      securityHistoryVulnerabilityDetail?: Array<{
        __typename?: 'TpcSoftwareReportMetricSecurityHistoryVulnerability';
        summary?: string | null;
        vulnerability?: string | null;
      }> | null;
      securityVulnerabilityDetail?: Array<{
        __typename?: 'TpcSoftwareReportMetricSecurityVulnerability';
        packageName?: string | null;
        packageVersion?: string | null;
        vulnerabilities?: Array<string> | null;
      }> | null;
    } | null;
    tpcSoftwareSig?: {
      __typename?: 'TpcSoftwareSig';
      description: string;
      id: number;
      name: string;
      sigCommitter?: Array<{
        __typename?: 'TpcSoftwareMember';
        giteeAccount?: string | null;
        id?: number | null;
      }> | null;
    } | null;
  } | null;
  tpcSoftwareReportMetricClarificationPermission?: {
    __typename?: 'TpcSoftwareReportMetricClarificationPermission';
    clarificationCommitterPermission?: number | null;
    clarificationSigLeadPermission?: number | null;
    clarificationCompliancePermission?: number | null;
    clarificationLegalPermission?: number | null;
  } | null;
};

export type TpcSoftwareSelectionReportRowQueryVariables = Exact<{
  shortCode: Scalars['String'];
}>;

export type TpcSoftwareSelectionReportRowQuery = {
  __typename?: 'Query';
  tpcSoftwareSelectionReport?: {
    __typename?: 'TpcSoftwareSelectionReport';
    id: number;
    tpcSoftwareReportMetricRaw?: {
      __typename?: 'TpcSoftwareReportMetricRaw';
      codeUrl?: string | null;
      complianceDcoRaw?: string | null;
      complianceLicenseCompatibilityRaw?: string | null;
      complianceLicenseRaw?: string | null;
      compliancePackageSigRaw?: string | null;
      ecologyAdoptionAnalysisRaw?: string | null;
      ecologyCodeMaintenanceRaw?: string | null;
      ecologyCommunitySupportRaw?: string | null;
      ecologyDependencyAcquisitionRaw?: string | null;
      ecologyPatentRiskRaw?: string | null;
      ecologySoftwareQualityRaw?: string | null;
      ecologyAdaptationMethodRaw?: string | null;
      id: number;
      lifecycleVersionLifecycleRaw?: string | null;
      lifecycleVersionNormalizationRaw?: string | null;
      lifecycleVersionNumberRaw?: string | null;
      securityBinaryArtifactRaw?: string | null;
      securityHistoryVulnerabilityRaw?: string | null;
      securityVulnerabilityDisclosureRaw?: string | null;
      securityVulnerabilityRaw?: string | null;
      securityVulnerabilityResponseRaw?: string | null;
    } | null;
  } | null;
};

export type TpcSoftwareReportMetricClarificationPageQueryVariables = Exact<{
  shortCode: Scalars['String'];
  metricName: Scalars['String'];
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  reportType?: InputMaybe<Scalars['Int']>;
}>;

export type TpcSoftwareReportMetricClarificationPageQuery = {
  __typename?: 'Query';
  tpcSoftwareReportMetricClarificationPage?: {
    __typename?: 'TpcSoftwareCommentPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'TpcSoftwareComment';
      content?: string | null;
      createdAt?: any | null;
      id: number;
      metricName?: string | null;
      updatedAt?: any | null;
      userId?: string | null;
      user?: {
        __typename?: 'User';
        name: string;
        loginBinds?: Array<{
          __typename?: 'LoginBind';
          account?: string | null;
          avatarUrl?: string | null;
          nickname?: string | null;
          provider?: string | null;
        }> | null;
      } | null;
    }> | null;
  } | null;
};

export type TpcClarificationStateDetailFragment = {
  __typename?: 'TpcSoftwareCommentState';
  createdAt: any;
  id: number;
  memberType?: number | null;
  metricName?: string | null;
  state?: number | null;
  updatedAt: any;
  userId: number;
  user?: { __typename?: 'User'; name: string } | null;
};

export type TpcSoftwareSelectionReportRiskQueryVariables = Exact<{
  shortCode: Scalars['String'];
}>;

export type TpcSoftwareSelectionReportRiskQuery = {
  __typename?: 'Query';
  tpcSoftwareSelectionReport?: {
    __typename?: 'TpcSoftwareSelectionReport';
    codeUrl?: string | null;
    id: number;
    shortCode: string;
    userId: number;
    metricClarificationCount?: {
      __typename?: 'TpcSoftwareReportMetricClarificationCount';
      complianceDco?: number | null;
      complianceLicense?: number | null;
      complianceLicenseCompatibility?: number | null;
      compliancePackageSig?: number | null;
      ecologyAdoptionAnalysis?: number | null;
      ecologyCodeMaintenance?: number | null;
      ecologyCommunitySupport?: number | null;
      ecologyDependencyAcquisition?: number | null;
      ecologyPatentRisk?: number | null;
      ecologySoftwareQuality?: number | null;
      ecologyAdaptationMethod?: number | null;
      lifecycleVersionLifecycle?: number | null;
      lifecycleVersionNormalization?: number | null;
      lifecycleVersionNumber?: number | null;
      securityBinaryArtifact?: number | null;
      securityHistoryVulnerability?: number | null;
      securityVulnerability?: number | null;
      securityVulnerabilityDisclosure?: number | null;
      securityVulnerabilityResponse?: number | null;
    } | null;
    metricClarificationState?: {
      __typename?: 'TpcSoftwareReportMetricClarificationState';
      complianceDco?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      complianceLicense?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      complianceLicenseCompatibility?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      compliancePackageSig?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyAdoptionAnalysis?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyCodeMaintenance?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyCommunitySupport?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyDependencyAcquisition?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyPatentRisk?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologySoftwareQuality?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyAdaptationMethod?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      lifecycleVersionLifecycle?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      lifecycleVersionNormalization?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      lifecycleVersionNumber?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      securityBinaryArtifact?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      securityHistoryVulnerability?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      securityVulnerability?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      securityVulnerabilityDisclosure?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      securityVulnerabilityResponse?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
    } | null;
  } | null;
};

export type TpcSoftwareSelectionCommentPageQueryVariables = Exact<{
  selectionId: Scalars['Int'];
  page: Scalars['Int'];
  per: Scalars['Int'];
  reportType?: InputMaybe<Scalars['Int']>;
}>;

export type TpcSoftwareSelectionCommentPageQuery = {
  __typename?: 'Query';
  tpcSoftwareSelectionCommentPage?: {
    __typename?: 'TpcSoftwareCommentPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'TpcSoftwareComment';
      content?: string | null;
      createdAt?: any | null;
      id: number;
      updatedAt?: any | null;
      userId?: string | null;
      user?: {
        __typename?: 'User';
        name: string;
        loginBinds?: Array<{
          __typename?: 'LoginBind';
          account?: string | null;
          avatarUrl?: string | null;
          nickname?: string | null;
          provider?: string | null;
        }> | null;
      } | null;
    }> | null;
  } | null;
};

export type TpcSoftwareSelectionQueryVariables = Exact<{
  selectionId: Scalars['Int'];
}>;

export type TpcSoftwareSelectionQuery = {
  __typename?: 'Query';
  tpcSoftwareSelection?: {
    __typename?: 'TpcSoftwareSelection';
    commentCompliancePermission?: number | null;
    commentLegalPermission?: number | null;
    commentCommitterPermission?: number | null;
    commentCount?: number | null;
    commentSigLeadPermission?: number | null;
    commentQaPermission?: number | null;
    targetSoftware?: string | null;
    reason?: string | null;
    demandSource?: string | null;
    functionalDescription?: string | null;
    incubationTime?: string | null;
    committers?: Array<string> | null;
    isSameTypeCheck?: number | null;
    sameTypeSoftwareName?: string | null;
    sigLeadCount?: number | null;
    state?: number | null;
    riskCount?: number | null;
    legalCount?: number | null;
    complianceCount?: number | null;
    confirmedCount?: number | null;
    committerCount?: number | null;
    awaitingClarificationCount?: number | null;
    awaitingConfirmationCount?: number | null;
    clarifiedCount?: number | null;
    repoUrl?: Array<string> | null;
    commentState?: Array<{
      __typename?: 'TpcSoftwareCommentState';
      createdAt: any;
      id: number;
      memberType?: number | null;
      state?: number | null;
      updatedAt: any;
      userId: number;
      user?: {
        __typename?: 'User';
        name: string;
        loginBinds?: Array<{
          __typename?: 'LoginBind';
          account?: string | null;
          avatarUrl?: string | null;
          nickname?: string | null;
          provider?: string | null;
        }> | null;
      } | null;
    }> | null;
    tpcSoftwareSelectionReports?: Array<{
      __typename?: 'TpcSoftwareSelectionReport';
      adaptationMethod?: string | null;
      license?: string | null;
      codeUrl?: string | null;
    }> | null;
  } | null;
};

export type TpcSoftwareGraduationReportMetricFragment = {
  __typename?: 'TpcSoftwareGraduationReportMetric';
  complianceCopyrightStatement?: number | null;
  complianceCopyrightStatementAntiTamper?: number | null;
  complianceDco?: number | null;
  complianceLicense?: number | null;
  complianceLicenseCompatibility?: number | null;
  complianceSnippetReference?: number | null;
  ecologyBuild?: number | null;
  ecologyBuildDoc?: number | null;
  ecologyCi?: number | null;
  ecologyCodeReview?: number | null;
  ecologyCodeUpstream?: number | null;
  ecologyInterfaceDoc?: number | null;
  ecologyIssueManagement?: number | null;
  ecologyIssueResponseRatio?: number | null;
  ecologyIssueResponseTime?: number | null;
  ecologyMaintainerDoc?: number | null;
  ecologyReadme?: number | null;
  ecologyTestCoverage?: number | null;
  lifecycleReleaseNote?: number | null;
  lifecycleStatement?: number | null;
  securityBinaryArtifact?: number | null;
  securityPackageSig?: number | null;
  securityVulnerability?: number | null;
  createdAt?: any | null;
  id: number;
  status?: string | null;
  tpcSoftwareGraduationReportId?: number | null;
  updatedAt?: any | null;
  codeUrl?: string | null;
};

export type TpcSoftwareGraduationReportMetricDetailFragment = {
  __typename?: 'TpcSoftwareGraduationReportMetric';
  complianceCopyrightStatementAntiTamperDetail?: string | null;
  complianceSnippetReferenceDetail?: string | null;
  ecologyBuildDetail?: string | null;
  ecologyBuildDocDetail?: string | null;
  ecologyCiDetail?: string | null;
  ecologyCodeUpstreamDetail?: string | null;
  ecologyInterfaceDocDetail?: string | null;
  ecologyMaintainerDocDetail?: string | null;
  ecologyReadmeDetail?: string | null;
  lifecycleReleaseNoteDetail?: Array<string> | null;
  lifecycleStatementDetail?: string | null;
  securityPackageSigDetail?: Array<string> | null;
  complianceCopyrightStatementDetail?: {
    __typename?: 'TpcSoftwareReportMetricComplianceCopyrightStatement';
    includeCopyrights?: Array<string> | null;
    notIncludedCopyrights?: Array<string> | null;
    oatDetail?: Array<string> | null;
  } | null;
  complianceDcoDetail?: {
    __typename?: 'TpcSoftwareReportMetricComplianceDco';
    commitCount?: number | null;
    commitDcoCount?: number | null;
  } | null;
  complianceLicenseCompatibilityDetail?: {
    __typename?: 'TpcSoftwareReportMetricComplianceLicenseCompatibility';
    oatDetail?: Array<string> | null;
    tpcDetail?: Array<{
      __typename?: 'TpcSoftwareReportMetricComplianceLicenseCompatibilityTpc';
      license?: string | null;
      licenseConflictList?: Array<string> | null;
    }> | null;
  } | null;
  complianceLicenseDetail?: {
    __typename?: 'TpcSoftwareGraduationReportMetricComplianceLicense';
    readmeOpensource?: number | null;
    oatDetail?: Array<string> | null;
    nonOsiLicenses?: Array<string> | null;
    osiPermissiveLicenses?: Array<string> | null;
  } | null;
  ecologyCodeReviewDetail?: {
    __typename?: 'TpcSoftwareGraduationMetricEcologyCodeReview';
    pullCount?: number | null;
    pullReviewCount?: number | null;
    pullReviewRatio?: number | null;
  } | null;
  ecologyIssueManagementDetail?: {
    __typename?: 'TpcSoftwareGraduationMetricEcologyIssueManagement';
    issueCount?: number | null;
    issueTypeList?: Array<string> | null;
  } | null;
  ecologyIssueResponseRatioDetail?: {
    __typename?: 'TpcSoftwareGraduationMetricEcologyIssueResponseRatio';
    issueCount?: number | null;
    issueResponseCount?: number | null;
    issueResponseRatio?: number | null;
  } | null;
  ecologyIssueResponseTimeDetail?: {
    __typename?: 'TpcSoftwareGraduationMetricEcologyIssueResponseTime';
    issueResponseCount?: number | null;
    issueResponseTime?: number | null;
  } | null;
  ecologyTestCoverageDetail?: {
    __typename?: 'TpcSoftwareReportMetricEcologySoftwareQuality';
    coverageRatio?: number | null;
    coverageScore?: number | null;
    duplicationRatio?: number | null;
    duplicationScore?: number | null;
  } | null;
  securityBinaryArtifactDetail?: {
    __typename?: 'TpcSoftwareReportMetricSecurityBinaryArtifact';
    oatDetail?: Array<string> | null;
    tpcDetail?: Array<string> | null;
  } | null;
  securityVulnerabilityDetail?: Array<{
    __typename?: 'TpcSoftwareReportMetricSecurityVulnerability';
    packageName?: string | null;
    packageVersion?: string | null;
    vulnerabilities?: Array<string> | null;
  }> | null;
};

export type TpcSoftwareGraduationReportMetricRawFragment = {
  __typename?: 'TpcSoftwareGraduationReportMetricRaw';
  codeUrl?: string | null;
  complianceCopyrightStatementAntiTamperRaw?: string | null;
  complianceCopyrightStatementRaw?: string | null;
  complianceDcoRaw?: string | null;
  complianceLicenseCompatibilityRaw?: string | null;
  complianceLicenseRaw?: string | null;
  complianceSnippetReferenceRaw?: string | null;
  ecologyBuildDocRaw?: string | null;
  ecologyBuildRaw?: string | null;
  ecologyCiRaw?: string | null;
  ecologyCodeReviewRaw?: string | null;
  ecologyCodeUpstreamRaw?: string | null;
  ecologyInterfaceDocRaw?: string | null;
  ecologyIssueManagementRaw?: string | null;
  ecologyIssueResponseRatioRaw?: string | null;
  ecologyIssueResponseTimeRaw?: string | null;
  ecologyMaintainerDocRaw?: string | null;
  ecologyReadmeRaw?: string | null;
  ecologyTestCoverageRaw?: string | null;
  id: number;
  lifecycleReleaseNoteRaw?: string | null;
  lifecycleStatementRaw?: string | null;
  securityBinaryArtifactRaw?: string | null;
  securityPackageSigRaw?: string | null;
  securityVulnerabilityRaw?: string | null;
};

export type TpcSoftwareGraduationReportPageQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
}>;

export type TpcSoftwareGraduationReportPageQuery = {
  __typename?: 'Query';
  tpcSoftwareGraduationReportPage?: {
    __typename?: 'TpcSoftwareGraduationReportPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'TpcSoftwareGraduationReport';
      adaptationMethod?: string | null;
      isIncubation?: number | null;
      roundUpstream?: string | null;
      codeUrl?: string | null;
      id: number;
      name?: string | null;
      upstreamCodeUrl?: string | null;
      lifecyclePolicy?: string | null;
      ohCommitSha?: string | null;
      shortCode: string;
      programmingLanguage?: string | null;
      userId: number;
      architectureDiagrams?: Array<{
        __typename?: 'Image';
        filename: string;
        id: number;
        url: string;
      }> | null;
      user?: {
        __typename?: 'User';
        name: string;
        loginBinds?: Array<{
          __typename?: 'LoginBind';
          account?: string | null;
          nickname?: string | null;
          provider?: string | null;
        }> | null;
      } | null;
      graduationReportMetric?: {
        __typename?: 'TpcSoftwareGraduationReportMetric';
        complianceCopyrightStatement?: number | null;
        complianceCopyrightStatementAntiTamper?: number | null;
        complianceDco?: number | null;
        complianceLicense?: number | null;
        complianceLicenseCompatibility?: number | null;
        complianceSnippetReference?: number | null;
        ecologyBuild?: number | null;
        ecologyBuildDoc?: number | null;
        ecologyCi?: number | null;
        ecologyCodeReview?: number | null;
        ecologyCodeUpstream?: number | null;
        ecologyInterfaceDoc?: number | null;
        ecologyIssueManagement?: number | null;
        ecologyIssueResponseRatio?: number | null;
        ecologyIssueResponseTime?: number | null;
        ecologyMaintainerDoc?: number | null;
        ecologyReadme?: number | null;
        ecologyTestCoverage?: number | null;
        lifecycleReleaseNote?: number | null;
        lifecycleStatement?: number | null;
        securityBinaryArtifact?: number | null;
        securityPackageSig?: number | null;
        securityVulnerability?: number | null;
        createdAt?: any | null;
        id: number;
        status?: string | null;
        tpcSoftwareGraduationReportId?: number | null;
        updatedAt?: any | null;
        codeUrl?: string | null;
      } | null;
      tpcSoftwareSig?: {
        __typename?: 'TpcSoftwareSig';
        description: string;
        id: number;
        name: string;
        sigCommitter?: Array<{
          __typename?: 'TpcSoftwareMember';
          giteeAccount?: string | null;
          id?: number | null;
        }> | null;
      } | null;
    }> | null;
  } | null;
};

export type TpcSoftwareGraduationReportQueryVariables = Exact<{
  shortCode: Scalars['String'];
}>;

export type TpcSoftwareGraduationReportQuery = {
  __typename?: 'Query';
  tpcSoftwareGraduationReport?: {
    __typename?: 'TpcSoftwareGraduationReport';
    adaptationMethod?: string | null;
    codeCount?: number | null;
    license?: string | null;
    lifecyclePolicy?: string | null;
    codeUrl?: string | null;
    id: number;
    name?: string | null;
    ohCommitSha?: string | null;
    upstreamCodeUrl?: string | null;
    shortCode: string;
    programmingLanguage?: string | null;
    userId: number;
    architectureDiagrams?: Array<{
      __typename?: 'Image';
      filename: string;
      id: number;
      url: string;
    }> | null;
    user?: {
      __typename?: 'User';
      name: string;
      loginBinds?: Array<{
        __typename?: 'LoginBind';
        account?: string | null;
        nickname?: string | null;
        provider?: string | null;
      }> | null;
    } | null;
    graduationReportMetric?: {
      __typename?: 'TpcSoftwareGraduationReportMetric';
      complianceCopyrightStatement?: number | null;
      complianceCopyrightStatementAntiTamper?: number | null;
      complianceDco?: number | null;
      complianceLicense?: number | null;
      complianceLicenseCompatibility?: number | null;
      complianceSnippetReference?: number | null;
      ecologyBuild?: number | null;
      ecologyBuildDoc?: number | null;
      ecologyCi?: number | null;
      ecologyCodeReview?: number | null;
      ecologyCodeUpstream?: number | null;
      ecologyInterfaceDoc?: number | null;
      ecologyIssueManagement?: number | null;
      ecologyIssueResponseRatio?: number | null;
      ecologyIssueResponseTime?: number | null;
      ecologyMaintainerDoc?: number | null;
      ecologyReadme?: number | null;
      ecologyTestCoverage?: number | null;
      lifecycleReleaseNote?: number | null;
      lifecycleStatement?: number | null;
      securityBinaryArtifact?: number | null;
      securityPackageSig?: number | null;
      securityVulnerability?: number | null;
      createdAt?: any | null;
      id: number;
      status?: string | null;
      tpcSoftwareGraduationReportId?: number | null;
      updatedAt?: any | null;
      codeUrl?: string | null;
      complianceCopyrightStatementAntiTamperDetail?: string | null;
      complianceSnippetReferenceDetail?: string | null;
      ecologyBuildDetail?: string | null;
      ecologyBuildDocDetail?: string | null;
      ecologyCiDetail?: string | null;
      ecologyCodeUpstreamDetail?: string | null;
      ecologyInterfaceDocDetail?: string | null;
      ecologyMaintainerDocDetail?: string | null;
      ecologyReadmeDetail?: string | null;
      lifecycleReleaseNoteDetail?: Array<string> | null;
      lifecycleStatementDetail?: string | null;
      securityPackageSigDetail?: Array<string> | null;
      complianceCopyrightStatementDetail?: {
        __typename?: 'TpcSoftwareReportMetricComplianceCopyrightStatement';
        includeCopyrights?: Array<string> | null;
        notIncludedCopyrights?: Array<string> | null;
        oatDetail?: Array<string> | null;
      } | null;
      complianceDcoDetail?: {
        __typename?: 'TpcSoftwareReportMetricComplianceDco';
        commitCount?: number | null;
        commitDcoCount?: number | null;
      } | null;
      complianceLicenseCompatibilityDetail?: {
        __typename?: 'TpcSoftwareReportMetricComplianceLicenseCompatibility';
        oatDetail?: Array<string> | null;
        tpcDetail?: Array<{
          __typename?: 'TpcSoftwareReportMetricComplianceLicenseCompatibilityTpc';
          license?: string | null;
          licenseConflictList?: Array<string> | null;
        }> | null;
      } | null;
      complianceLicenseDetail?: {
        __typename?: 'TpcSoftwareGraduationReportMetricComplianceLicense';
        readmeOpensource?: number | null;
        oatDetail?: Array<string> | null;
        nonOsiLicenses?: Array<string> | null;
        osiPermissiveLicenses?: Array<string> | null;
      } | null;
      ecologyCodeReviewDetail?: {
        __typename?: 'TpcSoftwareGraduationMetricEcologyCodeReview';
        pullCount?: number | null;
        pullReviewCount?: number | null;
        pullReviewRatio?: number | null;
      } | null;
      ecologyIssueManagementDetail?: {
        __typename?: 'TpcSoftwareGraduationMetricEcologyIssueManagement';
        issueCount?: number | null;
        issueTypeList?: Array<string> | null;
      } | null;
      ecologyIssueResponseRatioDetail?: {
        __typename?: 'TpcSoftwareGraduationMetricEcologyIssueResponseRatio';
        issueCount?: number | null;
        issueResponseCount?: number | null;
        issueResponseRatio?: number | null;
      } | null;
      ecologyIssueResponseTimeDetail?: {
        __typename?: 'TpcSoftwareGraduationMetricEcologyIssueResponseTime';
        issueResponseCount?: number | null;
        issueResponseTime?: number | null;
      } | null;
      ecologyTestCoverageDetail?: {
        __typename?: 'TpcSoftwareReportMetricEcologySoftwareQuality';
        coverageRatio?: number | null;
        coverageScore?: number | null;
        duplicationRatio?: number | null;
        duplicationScore?: number | null;
      } | null;
      securityBinaryArtifactDetail?: {
        __typename?: 'TpcSoftwareReportMetricSecurityBinaryArtifact';
        oatDetail?: Array<string> | null;
        tpcDetail?: Array<string> | null;
      } | null;
      securityVulnerabilityDetail?: Array<{
        __typename?: 'TpcSoftwareReportMetricSecurityVulnerability';
        packageName?: string | null;
        packageVersion?: string | null;
        vulnerabilities?: Array<string> | null;
      }> | null;
    } | null;
    tpcSoftwareSig?: {
      __typename?: 'TpcSoftwareSig';
      description: string;
      id: number;
      name: string;
      sigCommitter?: Array<{
        __typename?: 'TpcSoftwareMember';
        giteeAccount?: string | null;
        id?: number | null;
      }> | null;
    } | null;
  } | null;
  tpcSoftwareReportMetricClarificationPermission?: {
    __typename?: 'TpcSoftwareReportMetricClarificationPermission';
    clarificationCommitterPermission?: number | null;
    clarificationSigLeadPermission?: number | null;
    clarificationCompliancePermission?: number | null;
    clarificationLegalPermission?: number | null;
  } | null;
};

export type TpcSoftwareGraduationPageQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
}>;

export type TpcSoftwareGraduationPageQuery = {
  __typename?: 'Query';
  tpcSoftwareGraduationPage?: {
    __typename?: 'TpcSoftwareGraduationPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'TpcSoftwareGraduation';
      id: number;
      createdAt: any;
      updatedAt: any;
      demandSource?: string | null;
      committers?: Array<string> | null;
      incubationStartTime?: any | null;
      incubationTime?: string | null;
      issueUrl?: string | null;
      state?: number | null;
      tpcSoftwareGraduationReportIds?: Array<number> | null;
      functionalDescription?: string | null;
      userId: number;
      tpcSoftwareGraduationReports?: Array<{
        __typename?: 'TpcSoftwareGraduationReport';
        name?: string | null;
        shortCode: string;
        codeUrl?: string | null;
        license?: string | null;
        codeCount?: number | null;
      }> | null;
      user?: {
        __typename?: 'User';
        name: string;
        loginBinds?: Array<{
          __typename?: 'LoginBind';
          account?: string | null;
          nickname?: string | null;
          provider?: string | null;
        }> | null;
      } | null;
    }> | null;
  } | null;
};

export type TpcSoftwareGraduationQueryVariables = Exact<{
  graduationId: Scalars['Int'];
}>;

export type TpcSoftwareGraduationQuery = {
  __typename?: 'Query';
  tpcSoftwareGraduation?: {
    __typename?: 'TpcSoftwareGraduation';
    commentCompliancePermission?: number | null;
    commentLegalPermission?: number | null;
    commentCommitterPermission?: number | null;
    commentCount?: number | null;
    commentSigLeadPermission?: number | null;
    commentQaPermission?: number | null;
    demandSource?: string | null;
    incubationTime?: string | null;
    committers?: Array<string> | null;
    functionalDescription?: string | null;
    sigLeadCount?: number | null;
    state?: number | null;
    riskCount?: number | null;
    legalCount?: number | null;
    complianceCount?: number | null;
    confirmedCount?: number | null;
    committerCount?: number | null;
    awaitingClarificationCount?: number | null;
    awaitingConfirmationCount?: number | null;
    clarifiedCount?: number | null;
    userId: number;
    commentState?: Array<{
      __typename?: 'TpcSoftwareCommentState';
      createdAt: any;
      id: number;
      memberType?: number | null;
      state?: number | null;
      updatedAt: any;
      userId: number;
      user?: {
        __typename?: 'User';
        name: string;
        loginBinds?: Array<{
          __typename?: 'LoginBind';
          account?: string | null;
          avatarUrl?: string | null;
          nickname?: string | null;
          provider?: string | null;
        }> | null;
      } | null;
    }> | null;
    tpcSoftwareGraduationReports?: Array<{
      __typename?: 'TpcSoftwareGraduationReport';
      adaptationMethod?: string | null;
      license?: string | null;
      codeUrl?: string | null;
      name?: string | null;
      codeCount?: number | null;
    }> | null;
  } | null;
};

export type TpcSoftwareGraduationReportRiskQueryVariables = Exact<{
  shortCode: Scalars['String'];
}>;

export type TpcSoftwareGraduationReportRiskQuery = {
  __typename?: 'Query';
  tpcSoftwareGraduationReport?: {
    __typename?: 'TpcSoftwareGraduationReport';
    codeUrl?: string | null;
    id: number;
    shortCode: string;
    userId: number;
    metricClarificationCount?: {
      __typename?: 'TpcSoftwareGraduationReportMetricClarificationCount';
      complianceCopyrightStatement?: number | null;
      complianceCopyrightStatementAntiTamper?: number | null;
      complianceDco?: number | null;
      complianceLicense?: number | null;
      complianceLicenseCompatibility?: number | null;
      complianceSnippetReference?: number | null;
      ecologyBuild?: number | null;
      ecologyBuildDoc?: number | null;
      ecologyCi?: number | null;
      ecologyCodeReview?: number | null;
      ecologyCodeUpstream?: number | null;
      ecologyInterfaceDoc?: number | null;
      ecologyIssueManagement?: number | null;
      ecologyIssueResponseRatio?: number | null;
      ecologyIssueResponseTime?: number | null;
      ecologyMaintainerDoc?: number | null;
      ecologyReadme?: number | null;
      ecologyTestCoverage?: number | null;
      lifecycleReleaseNote?: number | null;
      lifecycleStatement?: number | null;
      securityBinaryArtifact?: number | null;
      securityPackageSig?: number | null;
      securityVulnerability?: number | null;
    } | null;
    metricClarificationState?: {
      __typename?: 'TpcSoftwareGraduationReportMetricClarificationState';
      complianceCopyrightStatement?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      complianceCopyrightStatementAntiTamper?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      complianceDco?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      complianceLicense?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      complianceLicenseCompatibility?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      complianceSnippetReference?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyBuild?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyBuildDoc?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyCi?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyCodeReview?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyCodeUpstream?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyInterfaceDoc?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyIssueManagement?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyIssueResponseRatio?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyIssueResponseTime?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyMaintainerDoc?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyReadme?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      ecologyTestCoverage?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      lifecycleReleaseNote?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      lifecycleStatement?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      securityBinaryArtifact?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      securityPackageSig?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
      securityVulnerability?: Array<{
        __typename?: 'TpcSoftwareCommentState';
        createdAt: any;
        id: number;
        memberType?: number | null;
        metricName?: string | null;
        state?: number | null;
        updatedAt: any;
        userId: number;
        user?: { __typename?: 'User'; name: string } | null;
      }> | null;
    } | null;
  } | null;
};

export type TpcSoftwareGraduationReportRowQueryVariables = Exact<{
  shortCode: Scalars['String'];
}>;

export type TpcSoftwareGraduationReportRowQuery = {
  __typename?: 'Query';
  tpcSoftwareGraduationReport?: {
    __typename?: 'TpcSoftwareGraduationReport';
    id: number;
    graduationReportMetricRaw?: {
      __typename?: 'TpcSoftwareGraduationReportMetricRaw';
      codeUrl?: string | null;
      complianceCopyrightStatementAntiTamperRaw?: string | null;
      complianceCopyrightStatementRaw?: string | null;
      complianceDcoRaw?: string | null;
      complianceLicenseCompatibilityRaw?: string | null;
      complianceLicenseRaw?: string | null;
      complianceSnippetReferenceRaw?: string | null;
      ecologyBuildDocRaw?: string | null;
      ecologyBuildRaw?: string | null;
      ecologyCiRaw?: string | null;
      ecologyCodeReviewRaw?: string | null;
      ecologyCodeUpstreamRaw?: string | null;
      ecologyInterfaceDocRaw?: string | null;
      ecologyIssueManagementRaw?: string | null;
      ecologyIssueResponseRatioRaw?: string | null;
      ecologyIssueResponseTimeRaw?: string | null;
      ecologyMaintainerDocRaw?: string | null;
      ecologyReadmeRaw?: string | null;
      ecologyTestCoverageRaw?: string | null;
      id: number;
      lifecycleReleaseNoteRaw?: string | null;
      lifecycleStatementRaw?: string | null;
      securityBinaryArtifactRaw?: string | null;
      securityPackageSigRaw?: string | null;
      securityVulnerabilityRaw?: string | null;
    } | null;
  } | null;
};

export type TpcSoftwareSelectionSearchQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  keyword: Scalars['String'];
  selectionType: Scalars['Int'];
}>;

export type TpcSoftwareSelectionSearchQuery = {
  __typename?: 'Query';
  tpcSoftwareSelectionSearch?: Array<{
    __typename?: 'TpcSoftwareSelectionSearch';
    repoUrl?: Array<string> | null;
    tpcSoftwareSelectionReport?: {
      __typename?: 'TpcSoftwareSelectionReportSearch';
      name?: string | null;
      codeUrl?: string | null;
      tpcSoftwareSigId?: number | null;
      programmingLanguage?: string | null;
      adaptationMethod?: string | null;
    } | null;
  }> | null;
};

export type TpcSoftwareMyCreationOverviewQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
}>;

export type TpcSoftwareMyCreationOverviewQuery = {
  __typename?: 'Query';
  tpcSoftwareMyCreationOverview?: {
    __typename?: 'TpcSoftwareMyCreationAndReviewOverview';
    awaitingClarificationCount?: number | null;
    awaitingConfirmationCount?: number | null;
    awaitingReviewCount?: number | null;
    completedCount?: number | null;
    graduationCount?: number | null;
    incubationCount?: number | null;
    rejectedCount?: number | null;
    totalCount?: number | null;
  } | null;
};

export type TpcSoftwareMyReviewOverviewQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
}>;

export type TpcSoftwareMyReviewOverviewQuery = {
  __typename?: 'Query';
  tpcSoftwareMyReviewOverview?: {
    __typename?: 'TpcSoftwareMyCreationAndReviewOverview';
    awaitingClarificationCount?: number | null;
    awaitingConfirmationCount?: number | null;
    awaitingReviewCount?: number | null;
    completedCount?: number | null;
    graduationCount?: number | null;
    incubationCount?: number | null;
    rejectedCount?: number | null;
    totalCount?: number | null;
  } | null;
};

export type TpcSoftwareMyCreationPageQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  applicationType: Scalars['Int'];
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
}>;

export type TpcSoftwareMyCreationPageQuery = {
  __typename?: 'Query';
  tpcSoftwareMyCreationPage?: {
    __typename?: 'TpcSoftwareMyCreationAndReviewPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'TpcSoftwareMyCreationAndReview';
      applicationType?: number | null;
      awaitingClarificationCount?: number | null;
      awaitingConfirmationCount?: number | null;
      clarifiedCount?: number | null;
      committerCount?: number | null;
      complianceCount?: number | null;
      confirmedCount?: number | null;
      createdAt?: any | null;
      id?: number | null;
      issueUrl?: string | null;
      legalCount?: number | null;
      name?: string | null;
      riskCount?: number | null;
      sigLeadCount?: number | null;
      state?: number | null;
      softwareReportShortCodes?: Array<string> | null;
      targetSoftwareReportId?: number | null;
      updatedAt?: any | null;
      userId?: number | null;
      user?: {
        __typename?: 'User';
        name: string;
        loginBinds?: Array<{
          __typename?: 'LoginBind';
          account?: string | null;
          nickname?: string | null;
          provider?: string | null;
        }> | null;
      } | null;
    }> | null;
  } | null;
};

export type TpcSoftwareMyReviewPageQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  applicationType: Scalars['Int'];
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
}>;

export type TpcSoftwareMyReviewPageQuery = {
  __typename?: 'Query';
  tpcSoftwareMyReviewPage?: {
    __typename?: 'TpcSoftwareMyCreationAndReviewPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'TpcSoftwareMyCreationAndReview';
      applicationType?: number | null;
      awaitingClarificationCount?: number | null;
      awaitingConfirmationCount?: number | null;
      clarifiedCount?: number | null;
      committerCount?: number | null;
      complianceCount?: number | null;
      confirmedCount?: number | null;
      createdAt?: any | null;
      id?: number | null;
      issueUrl?: string | null;
      legalCount?: number | null;
      name?: string | null;
      riskCount?: number | null;
      sigLeadCount?: number | null;
      state?: number | null;
      softwareReportShortCodes?: Array<string> | null;
      targetSoftwareReportId?: number | null;
      updatedAt?: any | null;
      userId?: number | null;
      user?: {
        __typename?: 'User';
        name: string;
        loginBinds?: Array<{
          __typename?: 'LoginBind';
          account?: string | null;
          nickname?: string | null;
          provider?: string | null;
        }> | null;
      } | null;
    }> | null;
  } | null;
};

export type UserinfoQueryVariables = Exact<{ [key: string]: never }>;

export type UserinfoQuery = {
  __typename?: 'Query';
  currentUser?: {
    __typename?: 'User';
    id: number;
    name: string;
    roleLevel: number;
    email: string;
    language: string;
    emailVerified: boolean;
    loginBinds?: Array<{
      __typename?: 'LoginBind';
      account?: string | null;
      avatarUrl?: string | null;
      nickname?: string | null;
      provider?: string | null;
    }> | null;
    contributingOrgs?: Array<{
      __typename?: 'ContributorOrg';
      firstDate?: any | null;
      lastDate?: any | null;
      orgName?: string | null;
      platformType?: string | null;
    }> | null;
  } | null;
};

export type SubscriptionsQueryVariables = Exact<{
  page: Scalars['Int'];
  per: Scalars['Int'];
}>;

export type SubscriptionsQuery = {
  __typename?: 'Query';
  currentUser?: {
    __typename?: 'User';
    subscriptions: {
      __typename?: 'SubscriptionPage';
      count?: number | null;
      page?: number | null;
      totalPage?: number | null;
      items?: Array<{
        __typename?: 'Subscription';
        count: number;
        id: number;
        label: string;
        level: string;
        status: string;
        statusUpdatedAt?: any | null;
        collectAt?: any | null;
        completeAt?: any | null;
      }> | null;
    };
  } | null;
};

export type SubscriptionCountQueryVariables = Exact<{
  label: Scalars['String'];
  level: Scalars['String'];
}>;

export type SubscriptionCountQuery = {
  __typename?: 'Query';
  subjectSubscriptionCount: {
    __typename?: 'SubjectSubscriptionCount';
    count: number;
    subscribed: boolean;
  };
};

export type StatusQueryVariables = Exact<{
  label: Scalars['String'];
}>;

export type StatusQuery = { __typename?: 'Query'; analysisStatus: string };

export type StatusVerifyQueryVariables = Exact<{
  label?: InputMaybe<Scalars['String']>;
  shortCode?: InputMaybe<Scalars['String']>;
}>;

export type StatusVerifyQuery = {
  __typename?: 'Query';
  analysisStatusVerify: {
    __typename?: 'ProjectCompletionRow';
    label?: string | null;
    level?: string | null;
    shortCode?: string | null;
    status?: string | null;
    collections?: Array<string> | null;
  };
};

export type SearchQueryVariables = Exact<{
  keyword: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
}>;

export type SearchQuery = {
  __typename?: 'Query';
  fuzzySearch: Array<{
    __typename?: 'ProjectCompletionRow';
    level?: string | null;
    label?: string | null;
    status?: string | null;
    shortCode?: string | null;
    collections?: Array<string> | null;
  }>;
};

export type LatestMetricsQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
}>;

export type LatestMetricsQuery = {
  __typename?: 'Query';
  latestMetrics: {
    __typename?: 'LatestMetrics';
    activityScore?: number | null;
    activityScoreUpdatedAt?: any | null;
    codeQualityGuarantee?: number | null;
    codeQualityGuaranteeUpdatedAt?: any | null;
    communitySupportScore?: number | null;
    communitySupportScoreUpdatedAt?: any | null;
    label?: string | null;
    level?: string | null;
    shortCode?: string | null;
    organizationsActivity?: number | null;
    organizationsActivityUpdatedAt?: any | null;
    reposCount?: number | null;
  };
};

export type CommunityReposQueryVariables = Exact<{
  label: Scalars['String'];
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<Scalars['String']>;
}>;

export type CommunityReposQuery = {
  __typename?: 'Query';
  communityOverview: {
    __typename?: 'CommunityOverview';
    projectsCount?: number | null;
    communityOrgUrl?: string | null;
    trends?: Array<{
      __typename?: 'Repo';
      backend?: string | null;
      name?: string | null;
      path?: string | null;
      type?: string | null;
      shortCode?: string | null;
      metricActivity: Array<{
        __typename?: 'ActivityMetric';
        activityScore?: number | null;
        grimoireCreationDate?: any | null;
      }>;
    }> | null;
  };
};

export type CommunityReposSearchQueryVariables = Exact<{
  label: Scalars['String'];
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<Scalars['String']>;
}>;

export type CommunityReposSearchQuery = {
  __typename?: 'Query';
  communityRepos: {
    __typename?: 'RepoPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{ __typename?: 'SubRepo'; label?: string | null }> | null;
  };
};

export type MetricQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  start?: InputMaybe<Scalars['ISO8601DateTime']>;
  end?: InputMaybe<Scalars['ISO8601DateTime']>;
  repoType?: InputMaybe<Scalars['String']>;
}>;

export type MetricQuery = {
  __typename?: 'Query';
  metricCodequality: Array<{
    __typename?: 'CodequalityMetric';
    activeC1PrCommentsContributorCount?: number | null;
    activeC1PrCreateContributorCount?: number | null;
    activeC2ContributorCount?: number | null;
    codeMergeRatio?: number | null;
    codeMergedCount?: number | null;
    codeQualityGuarantee?: number | null;
    codeReviewRatio?: number | null;
    codeReviewedCount?: number | null;
    commitFrequency?: number | null;
    commitFrequencyInside?: number | null;
    contributorCount?: number | null;
    gitPrLinkedRatio?: number | null;
    grimoireCreationDate?: any | null;
    isMaintained?: number | null;
    label?: string | null;
    level?: string | null;
    shortCode?: string | null;
    type?: string | null;
    linesAddedFrequency?: number | null;
    linesRemovedFrequency?: number | null;
    locFrequency?: number | null;
    prCommitCount?: number | null;
    prCommitLinkedCount?: number | null;
    prCount?: number | null;
    prIssueLinkedCount?: number | null;
    prIssueLinkedRatio?: number | null;
  }>;
  metricCommunity: Array<{
    __typename?: 'CommunityMetric';
    bugIssueOpenTimeAvg?: number | null;
    bugIssueOpenTimeMid?: number | null;
    closedPrsCount?: number | null;
    codeReviewCount?: number | null;
    commentFrequency?: number | null;
    communitySupportScore?: number | null;
    grimoireCreationDate?: any | null;
    issueFirstReponseAvg?: number | null;
    issueFirstReponseMid?: number | null;
    issueOpenTimeAvg?: number | null;
    issueOpenTimeMid?: number | null;
    label?: string | null;
    level?: string | null;
    shortCode?: string | null;
    type?: string | null;
    prOpenTimeAvg?: number | null;
    prOpenTimeMid?: number | null;
    updatedIssuesCount?: number | null;
  }>;
  metricActivity: Array<{
    __typename?: 'ActivityMetric';
    activeC1IssueCommentsContributorCount?: number | null;
    activeC1IssueCreateContributorCount?: number | null;
    activeC1PrCommentsContributorCount?: number | null;
    activeC1PrCreateContributorCount?: number | null;
    activeC2ContributorCount?: number | null;
    activityScore?: number | null;
    orgCount?: number | null;
    closedIssuesCount?: number | null;
    codeReviewCount?: number | null;
    commentFrequency?: number | null;
    commitFrequency?: number | null;
    contributorCount?: number | null;
    grimoireCreationDate?: any | null;
    label?: string | null;
    level?: string | null;
    shortCode?: string | null;
    type?: string | null;
    recentReleasesCount?: number | null;
    updatedIssuesCount?: number | null;
    updatedSince?: number | null;
  }>;
  metricGroupActivity: Array<{
    __typename?: 'GroupActivityMetric';
    commitFrequency?: number | null;
    contributionLast?: number | null;
    contributorCount?: number | null;
    grimoireCreationDate?: any | null;
    label?: string | null;
    level?: string | null;
    shortCode?: string | null;
    type?: string | null;
    orgCount?: number | null;
    organizationsActivity?: number | null;
  }>;
};

export type SummaryQueryVariables = Exact<{
  start?: InputMaybe<Scalars['ISO8601DateTime']>;
  end?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type SummaryQuery = {
  __typename?: 'Query';
  summaryActivity: Array<{
    __typename?: 'ActivitySummary';
    grimoireCreationDate?: any | null;
    activeC1IssueCommentsContributorCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    activeC1IssueCreateContributorCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    activeC1PrCommentsContributorCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    activeC1PrCreateContributorCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    activeC2ContributorCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    activityScore?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    closedIssuesCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    codeReviewCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    commentFrequency?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    commitFrequency?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    contributorCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    orgCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    recentReleasesCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    updatedIssuesCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    updatedSince?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
  }>;
  summaryCodequality: Array<{
    __typename?: 'CodequalitySummary';
    grimoireCreationDate?: any | null;
    activeC1PrCommentsContributorCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    activeC1PrCreateContributorCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    activeC2ContributorCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    codeMergeRatio?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    codeMergedCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    codeQualityGuarantee?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    codeReviewRatio?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    codeReviewedCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    commitFrequency?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    commitFrequencyInside?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    contributorCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    gitPrLinkedRatio?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    isMaintained?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    linesAddedFrequency?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    linesRemovedFrequency?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    locFrequency?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    prCommitCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    prCommitLinkedCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    prCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    prIssueLinkedCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    prIssueLinkedRatio?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
  }>;
  summaryCommunity: Array<{
    __typename?: 'CommunitySummary';
    grimoireCreationDate?: any | null;
    bugIssueOpenTimeAvg?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    bugIssueOpenTimeMid?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    closedPrsCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    codeReviewCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    commentFrequency?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    communitySupportScore?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    issueFirstReponseAvg?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    issueFirstReponseMid?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    issueOpenTimeAvg?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    issueOpenTimeMid?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    prOpenTimeAvg?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    prOpenTimeMid?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    updatedIssuesCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
  }>;
  summaryGroupActivity: Array<{
    __typename?: 'GroupActivitySummary';
    grimoireCreationDate?: any | null;
    commitFrequency?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    contributionLast?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    contributorCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    orgCount?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
    organizationsActivity?: {
      __typename?: 'MetricStat';
      mean?: number | null;
      median?: number | null;
    } | null;
  }>;
};

export type OrgSearchQueryVariables = Exact<{
  keyword: Scalars['String'];
}>;

export type OrgSearchQuery = {
  __typename?: 'Query';
  orgFuzzySearch: Array<{
    __typename?: 'OrgCompletionRow';
    orgName?: string | null;
  }>;
};

export type MetricStatFragment = {
  __typename?: 'MetricStat';
  mean?: number | null;
  median?: number | null;
};

export type CollectionHottestQueryVariables = Exact<{
  ident: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
}>;

export type CollectionHottestQuery = {
  __typename?: 'Query';
  collectionHottest: Array<{
    __typename?: 'ProjectCompletionRow';
    label?: string | null;
    level?: string | null;
    shortCode?: string | null;
    status?: string | null;
    updatedAt?: any | null;
  }>;
};

export type CollectionListQueryVariables = Exact<{
  ident: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  keyword?: InputMaybe<Scalars['String']>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
}>;

export type CollectionListQuery = {
  __typename?: 'Query';
  collectionList: {
    __typename?: 'CollectionPage';
    page?: number | null;
    totalPage?: number | null;
    count?: number | null;
    items?: Array<{
      __typename?: 'Repo';
      backend?: string | null;
      language?: string | null;
      name?: string | null;
      openIssuesCount?: number | null;
      origin: string;
      path?: string | null;
      shortCode?: string | null;
      metricActivity: Array<{
        __typename?: 'ActivityMetric';
        activityScore?: number | null;
      }>;
    }> | null;
  };
};

export type BulkOverviewQueryVariables = Exact<{
  labels: Array<Scalars['String']> | Scalars['String'];
}>;

export type BulkOverviewQuery = {
  __typename?: 'Query';
  bulkOverview: Array<{
    __typename?: 'Repo';
    backend?: string | null;
    forksCount?: number | null;
    language?: string | null;
    name?: string | null;
    openIssuesCount?: number | null;
    path?: string | null;
    shortCode?: string | null;
    stargazersCount?: number | null;
    watchersCount?: number | null;
    metricActivity: Array<{
      __typename?: 'ActivityMetric';
      activityScore?: number | null;
    }>;
  }>;
};

export type TrendingQueryVariables = Exact<{
  level?: InputMaybe<Scalars['String']>;
}>;

export type TrendingQuery = {
  __typename?: 'Query';
  trending: Array<{
    __typename?: 'Trending';
    activityScore?: number | null;
    collections?: Array<string> | null;
    fullPath?: string | null;
    label?: string | null;
    level?: string | null;
    logoUrl?: string | null;
    name?: string | null;
    origin?: string | null;
    reposCount?: number | null;
    shortCode?: string | null;
  }>;
};

export type BetaMetricOverviewQueryVariables = Exact<{
  id: Scalars['Int'];
  limit?: InputMaybe<Scalars['Int']>;
}>;

export type BetaMetricOverviewQuery = {
  __typename?: 'Query';
  betaMetricOverview: {
    __typename?: 'BetaMetricOverview';
    projectsCount?: number | null;
    trends?: Array<{
      __typename?: 'BetaRepo';
      path?: string | null;
      origin: string;
      name?: string | null;
      backend?: string | null;
      shortCode?: string | null;
      betaMetricScores: Array<{
        __typename?: 'BetaMetricScore';
        grimoireCreationDate?: any | null;
        score?: number | null;
      }>;
    }> | null;
  };
};

export type BetaMetricsIndexQueryVariables = Exact<{
  per?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['Int']>;
}>;

export type BetaMetricsIndexQuery = {
  __typename?: 'Query';
  betaMetricsIndex: Array<{
    __typename?: 'BetaMetric';
    id?: number | null;
    dimensionality?: string | null;
    desc?: string | null;
    extra?: string | null;
    metric?: string | null;
  }>;
};

export type BulkShortenedLabelQueryVariables = Exact<{
  labels: Array<LabelRowInput> | LabelRowInput;
}>;

export type BulkShortenedLabelQuery = {
  __typename?: 'Query';
  bulkShortenedLabel: Array<{
    __typename?: 'LabelRow';
    label?: string | null;
    level?: string | null;
    shortCode?: string | null;
  }>;
};

export type MetricDashboardQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type MetricDashboardQuery = {
  __typename?: 'Query';
  contributorsDetailOverview: {
    __typename?: 'ContributorDetailOverview';
    contributorAllCount?: number | null;
    orgAllCount?: number | null;
    highestContributionContributor?: {
      __typename?: 'Contributor';
      name?: string | null;
      origin?: string | null;
      type?: string | null;
      value?: number | null;
    } | null;
    highestContributionOrganization?: {
      __typename?: 'Contributor';
      name?: string | null;
      origin?: string | null;
      type?: string | null;
      value?: number | null;
    } | null;
  };
  issuesDetailOverview: {
    __typename?: 'IssueDetailOverview';
    issueCommentFrequencyMean?: number | null;
    issueCompletionCount?: number | null;
    issueCompletionRatio?: number | null;
    issueCount?: number | null;
    issueUnresponsiveCount?: number | null;
    issueUnresponsiveRatio?: number | null;
  };
  pullsDetailOverview: {
    __typename?: 'PullDetailOverview';
    commitCount?: number | null;
    pullCompletionCount?: number | null;
    pullCompletionRatio?: number | null;
    pullCount?: number | null;
    pullUnresponsiveCount?: number | null;
    pullUnresponsiveRatio?: number | null;
  };
};

export type ContributorsDetailListQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type ContributorsDetailListQuery = {
  __typename?: 'Query';
  contributorsDetailList: {
    __typename?: 'ContributorDetailPage';
    count?: number | null;
    origin: string;
    page?: number | null;
    totalPage?: number | null;
    items: Array<{
      __typename?: 'ContributorDetail';
      contribution?: number | null;
      contributionWithoutObserve?: number | null;
      contributor?: string | null;
      ecologicalType?: string | null;
      isBot?: boolean | null;
      mileageType?: string | null;
      organization?: string | null;
      contributionTypeList?: Array<{
        __typename?: 'Contribution';
        contribution?: number | null;
        contributionType?: string | null;
      }> | null;
    }>;
  };
};

export type EcoContributorsOverviewQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type EcoContributorsOverviewQuery = {
  __typename?: 'Query';
  ecoContributorsOverview: Array<{
    __typename?: 'ContributorTopOverview';
    overviewName?: string | null;
    subTypeName?: string | null;
    subTypePercentage?: number | null;
    topContributorDistribution?: Array<{
      __typename?: 'Distribution';
      subCount?: number | null;
      subName?: string | null;
      subRatio?: number | null;
      totalCount?: number | null;
      subBelong?: string | null;
    }> | null;
  }>;
};

export type OrgContributionDistributionQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type OrgContributionDistributionQuery = {
  __typename?: 'Query';
  orgContributionDistribution: Array<{
    __typename?: 'ContributorTopOverview';
    overviewName?: string | null;
    subTypeName?: string | null;
    subTypePercentage?: number | null;
    topContributorDistribution?: Array<{
      __typename?: 'Distribution';
      subCount?: number | null;
      subName?: string | null;
      subRatio?: number | null;
      totalCount?: number | null;
      subBelong?: string | null;
    }> | null;
  }>;
};

export type OrgContributorsOverviewQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type OrgContributorsOverviewQuery = {
  __typename?: 'Query';
  orgContributorsOverview: Array<{
    __typename?: 'ContributorTopOverview';
    overviewName?: string | null;
    subTypeName?: string | null;
    subTypePercentage?: number | null;
    topContributorDistribution?: Array<{
      __typename?: 'Distribution';
      subCount?: number | null;
      subName?: string | null;
      subRatio?: number | null;
      totalCount?: number | null;
    }> | null;
  }>;
};

export type ContributorsOverviewQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type ContributorsOverviewQuery = {
  __typename?: 'Query';
  orgContributorsDistribution: Array<{
    __typename?: 'ContributorTopOverview';
    overviewName?: string | null;
    subTypeName?: string | null;
    subTypePercentage?: number | null;
    topContributorDistribution?: Array<{
      __typename?: 'Distribution';
      subCount?: number | null;
      subName?: string | null;
      subRatio?: number | null;
      totalCount?: number | null;
      subBelong?: string | null;
    }> | null;
  }>;
};

export type IssuesDetailListQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type IssuesDetailListQuery = {
  __typename?: 'Query';
  issuesDetailList: {
    __typename?: 'IssueDetailPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'IssueDetail';
      assigneeLogin?: string | null;
      closedAt?: any | null;
      createdAt?: any | null;
      idInRepo?: number | null;
      labels?: Array<string> | null;
      numOfCommentsWithoutBot?: number | null;
      repository?: string | null;
      state?: string | null;
      timeToCloseDays?: number | null;
      timeToFirstAttentionWithoutBot?: number | null;
      title?: string | null;
      url?: string | null;
      userLogin?: string | null;
    }> | null;
  };
};

export type IssueCompletionQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type IssueCompletionQuery = {
  __typename?: 'Query';
  issuesDetailOverview: {
    __typename?: 'IssueDetailOverview';
    issueStateDistribution?: Array<{
      __typename?: 'Distribution';
      subCount?: number | null;
      subName?: string | null;
      subRatio?: number | null;
      totalCount?: number | null;
    }> | null;
  };
};

export type IssueCommentQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type IssueCommentQuery = {
  __typename?: 'Query';
  issuesDetailOverview: {
    __typename?: 'IssueDetailOverview';
    issueCommentDistribution?: Array<{
      __typename?: 'Distribution';
      subCount?: number | null;
      subName?: string | null;
      subRatio?: number | null;
      totalCount?: number | null;
    }> | null;
  };
};

export type PullsDetailListQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  per?: InputMaybe<Scalars['Int']>;
  filterOpts?: InputMaybe<Array<FilterOptionInput> | FilterOptionInput>;
  sortOpts?: InputMaybe<Array<SortOptionInput> | SortOptionInput>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type PullsDetailListQuery = {
  __typename?: 'Query';
  pullsDetailList: {
    __typename?: 'PullDetailPage';
    count?: number | null;
    page?: number | null;
    totalPage?: number | null;
    items?: Array<{
      __typename?: 'PullDetail';
      closedAt?: any | null;
      createdAt?: any | null;
      idInRepo?: number | null;
      labels?: Array<string> | null;
      mergeAuthorLogin?: string | null;
      numReviewComments?: number | null;
      repository?: string | null;
      reviewersLogin?: Array<string> | null;
      state?: string | null;
      timeToCloseDays?: number | null;
      timeToFirstAttentionWithoutBot?: number | null;
      title?: string | null;
      url?: string | null;
      userLogin?: string | null;
    }> | null;
  };
};

export type PullsCompletionQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type PullsCompletionQuery = {
  __typename?: 'Query';
  pullsDetailOverview: {
    __typename?: 'PullDetailOverview';
    pullStateDistribution?: Array<{
      __typename?: 'Distribution';
      subCount?: number | null;
      subName?: string | null;
      subRatio?: number | null;
      totalCount?: number | null;
    }> | null;
  };
};

export type PullsCommentQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type PullsCommentQuery = {
  __typename?: 'Query';
  pullsDetailOverview: {
    __typename?: 'PullDetailOverview';
    pullCommentDistribution?: Array<{
      __typename?: 'Distribution';
      subCount?: number | null;
      subName?: string | null;
      subRatio?: number | null;
      totalCount?: number | null;
    }> | null;
  };
};

export type VerifyDetailDataRangeQueryVariables = Exact<{
  label?: InputMaybe<Scalars['String']>;
  shortCode?: InputMaybe<Scalars['String']>;
  beginDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  endDate?: InputMaybe<Scalars['ISO8601DateTime']>;
}>;

export type VerifyDetailDataRangeQuery = {
  __typename?: 'Query';
  verifyDetailDataRange: {
    __typename?: 'ValidDataRange';
    status?: boolean | null;
    labelAdmin?: boolean | null;
  };
};

export type MetricModelsOverviewQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  repoType?: InputMaybe<Scalars['String']>;
}>;

export type MetricModelsOverviewQuery = {
  __typename?: 'Query';
  metricModelsOverview: Array<{
    __typename?: 'Model';
    dimension?: string | null;
    grimoireCreationDate?: any | null;
    ident: string;
    label?: string | null;
    level?: string | null;
    mainScore?: number | null;
    scope?: string | null;
    transformedScore?: number | null;
    type?: string | null;
    updatedAt?: any | null;
    reposCount?: number | null;
    shortCode?: string | null;
  }>;
};

export type MetricContributorQueryVariables = Exact<{
  label: Scalars['String'];
  level?: InputMaybe<Scalars['String']>;
  start?: InputMaybe<Scalars['ISO8601DateTime']>;
  end?: InputMaybe<Scalars['ISO8601DateTime']>;
  repoType?: InputMaybe<Scalars['String']>;
}>;

export type MetricContributorQuery = {
  __typename?: 'Query';
  metricDomainPersona: Array<{
    __typename?: 'DomainPersonaMetric';
    activityCodeContributionPerPerson?: number | null;
    activityCodeContributorCount?: number | null;
    activityIssueContributionPerPerson?: number | null;
    activityIssueContributorCount?: number | null;
    activityObservationContributionPerPerson?: number | null;
    activityObservationContributorCount?: number | null;
    domainPersonaScore?: number | null;
    grimoireCreationDate?: any | null;
    label?: string | null;
    level?: string | null;
    shortCode?: string | null;
    type?: string | null;
  }>;
  metricMilestonePersona: Array<{
    __typename?: 'MilestonePersonaMetric';
    activityCasualContributionPerPerson?: number | null;
    activityCasualContributorCount?: number | null;
    activityCoreContributionPerPerson?: number | null;
    activityCoreContributorCount?: number | null;
    activityRegularContributionPerPerson?: number | null;
    activityRegularContributorCount?: number | null;
    milestonePersonaScore?: number | null;
    grimoireCreationDate?: any | null;
    label?: string | null;
    level?: string | null;
    shortCode?: string | null;
    type?: string | null;
  }>;
  metricRolePersona: Array<{
    __typename?: 'RolePersonaMetric';
    activityIndividualContributionPerPerson?: number | null;
    activityIndividualContributorCount?: number | null;
    activityOrganizationContributionPerPerson?: number | null;
    activityOrganizationContributorCount?: number | null;
    rolePersonaScore?: number | null;
    grimoireCreationDate?: any | null;
    label?: string | null;
    level?: string | null;
    shortCode?: string | null;
    type?: string | null;
  }>;
};

export type TokenListQueryVariables = Exact<{ [key: string]: never }>;

export type TokenListQuery = {
  __typename?: 'Query';
  tokenList?: Array<{
    __typename?: 'Token';
    expiresAt?: any | null;
    id?: number | null;
    name?: string | null;
    token?: string | null;
  }> | null;
};

export const MetricsFragmentDoc = /*#__PURE__*/ `
    fragment metrics on ModelMetric {
  category
  defaultThreshold
  defaultWeight
  from
  id
  metricId
  ident
  name
  threshold
  weight
}
    `;
export const ModelDetailFragmentDoc = /*#__PURE__*/ `
    fragment modelDetail on ModelDetail {
  id
  isPublic
  name
  description
  triggerRemainingCount
  userId
}
    `;
export const ParentCommentFragmentDoc = /*#__PURE__*/ `
    fragment parentComment on ModelComment {
  content
  createdAt
  id
  images {
    filename
    url
    id
  }
  updatedAt
}
    `;
export const ReplyFragmentDoc = /*#__PURE__*/ `
    fragment reply on ModelComment {
  content
  createdAt
  id
  images {
    filename
    url
    id
  }
  updatedAt
  user {
    avatarUrl
    id
    name
  }
  replies {
    content
    createdAt
    id
    images {
      id
      filename
      url
    }
    updatedAt
  }
  model {
    id
    isPublic
    name
    description
    triggerRemainingCount
    userId
  }
}
    `;
export const CommentFragmentDoc = /*#__PURE__*/ `
    fragment comment on ModelComment {
  content
  createdAt
  id
  metric {
    ...metrics
  }
  images {
    filename
    url
    id
  }
  model {
    ...modelDetail
  }
  parent {
    ...parentComment
  }
  replies {
    ...reply
  }
  updatedAt
  user {
    avatarUrl
    id
    name
  }
}
    ${MetricsFragmentDoc}
${ModelDetailFragmentDoc}
${ParentCommentFragmentDoc}
${ReplyFragmentDoc}`;
export const UserFragmentDoc = /*#__PURE__*/ `
    fragment user on SimpleUser {
  avatarUrl
  id
  name
}
    `;
export const DatasetFragmentDoc = /*#__PURE__*/ `
    fragment dataset on Dataset {
  ident
  items {
    firstIdent
    label
    shortCode
    level
    secondIdent
  }
  name
}
    `;
export const DatasetStatusFragmentDoc = /*#__PURE__*/ `
    fragment datasetStatus on DatasetStatus {
  ident
  items {
    firstIdent
    label
    shortCode
    level
    logoUrl
    secondIdent
    triggerStatus
    triggerUpdatedAt
  }
  name
}
    `;
export const AlgorithmFragmentDoc = /*#__PURE__*/ `
    fragment algorithm on Algorithm {
  ident
  name
}
    `;
export const ModelVersionFragmentDoc = /*#__PURE__*/ `
    fragment modelVersion on ModelVersion {
  id
  version
  algorithm {
    ...algorithm
  }
  isScore
  metrics {
    ...metrics
  }
}
    ${AlgorithmFragmentDoc}
${MetricsFragmentDoc}`;
export const LabMemberFragmentDoc = /*#__PURE__*/ `
    fragment labMember on LabMember {
  avatarUrl
  canExecute
  canRead
  canUpdate
  id
  isOwner
  joinedAt
  name
}
    `;
export const SimpleReportFragmentDoc = /*#__PURE__*/ `
    fragment simpleReport on SimpleReport {
  label
  level
  mainScore {
    dates
    tabIdent
    type
    values
  }
  shortCode
  type
}
    `;
export const TpcSoftwareSigFragmentDoc = /*#__PURE__*/ `
    fragment tpcSoftwareSig on TpcSoftwareSig {
  description
  id
  name
  sigCommitter {
    giteeAccount
    id
  }
}
    `;
export const TpcSoftwareReportMetricFragmentDoc = /*#__PURE__*/ `
    fragment tpcSoftwareReportMetric on TpcSoftwareReportMetric {
  complianceDco
  complianceLicense
  compliancePackageSig
  complianceLicenseCompatibility
  createdAt
  ecologyAdoptionAnalysis
  ecologyCodeMaintenance
  ecologyCommunitySupport
  ecologyDependencyAcquisition
  ecologyPatentRisk
  ecologySoftwareQuality
  ecologyAdaptationMethod
  id
  lifecycleVersionLifecycle
  lifecycleVersionNormalization
  lifecycleVersionNumber
  securityBinaryArtifact
  securityHistoryVulnerability
  securityVulnerability
  securityVulnerabilityDisclosure
  securityVulnerabilityResponse
  status
  tpcSoftwareReportId
  updatedAt
}
    `;
export const TpcSoftwareReportMetricDetailFragmentDoc = /*#__PURE__*/ `
    fragment tpcSoftwareReportMetricDetail on TpcSoftwareReportMetric {
  baseCodeUrlDetail
  baseRepoNameDetail
  baseWebsiteUrlDetail
  complianceDcoDetail {
    commitCount
    commitDcoCount
  }
  complianceLicenseCompatibilityDetail {
    oatDetail
    tpcDetail {
      license
      licenseConflictList
    }
  }
  complianceLicenseDetail {
    nonOsiLicenses
    osiCopyleftLimitedLicenses
    osiFreeRestrictedLicenses
    osiPermissiveLicenses
  }
  compliancePackageSigDetail
  ecologyAdoptionAnalysisDetail
  ecologyCodeMaintenanceDetail
  ecologyCommunitySupportDetail
  ecologyDependencyAcquisitionDetail
  ecologyPatentRiskDetail
  ecologyAdaptationMethodDetail
  ecologySoftwareQualityDetail {
    coverageRatio
    coverageScore
    duplicationRatio
    duplicationScore
  }
  lifecycleVersionLifecycleDetail {
    archived
    latestVersionCreatedAt
    latestVersionName
  }
  lifecycleVersionNormalizationDetail
  lifecycleVersionNumberDetail
  securityBinaryArtifactDetail {
    oatDetail
    tpcDetail
  }
  securityHistoryVulnerabilityDetail {
    summary
    vulnerability
  }
  securityVulnerabilityDetail {
    packageName
    packageVersion
    vulnerabilities
  }
  securityVulnerabilityDisclosureDetail
  securityVulnerabilityResponseDetail
}
    `;
export const TpcSoftwareReportMetricRawFragmentDoc = /*#__PURE__*/ `
    fragment tpcSoftwareReportMetricRaw on TpcSoftwareReportMetricRaw {
  codeUrl
  complianceDcoRaw
  complianceLicenseCompatibilityRaw
  complianceLicenseRaw
  compliancePackageSigRaw
  ecologyAdoptionAnalysisRaw
  ecologyCodeMaintenanceRaw
  ecologyCommunitySupportRaw
  ecologyDependencyAcquisitionRaw
  ecologyPatentRiskRaw
  ecologySoftwareQualityRaw
  ecologyAdaptationMethodRaw
  id
  lifecycleVersionLifecycleRaw
  lifecycleVersionNormalizationRaw
  lifecycleVersionNumberRaw
  securityBinaryArtifactRaw
  securityHistoryVulnerabilityRaw
  securityVulnerabilityDisclosureRaw
  securityVulnerabilityRaw
  securityVulnerabilityResponseRaw
}
    `;
export const TpcClarificationStateDetailFragmentDoc = /*#__PURE__*/ `
    fragment tpcClarificationStateDetail on TpcSoftwareCommentState {
  createdAt
  id
  memberType
  metricName
  state
  updatedAt
  user {
    name
  }
  userId
}
    `;
export const TpcSoftwareGraduationReportMetricFragmentDoc = /*#__PURE__*/ `
    fragment tpcSoftwareGraduationReportMetric on TpcSoftwareGraduationReportMetric {
  complianceCopyrightStatement
  complianceCopyrightStatementAntiTamper
  complianceDco
  complianceLicense
  complianceLicenseCompatibility
  complianceSnippetReference
  ecologyBuild
  ecologyBuildDoc
  ecologyCi
  ecologyCodeReview
  ecologyCodeUpstream
  ecologyInterfaceDoc
  ecologyIssueManagement
  ecologyIssueResponseRatio
  ecologyIssueResponseTime
  ecologyMaintainerDoc
  ecologyReadme
  ecologyTestCoverage
  lifecycleReleaseNote
  lifecycleStatement
  securityBinaryArtifact
  securityPackageSig
  securityVulnerability
  createdAt
  id
  status
  tpcSoftwareGraduationReportId
  updatedAt
  codeUrl
}
    `;
export const TpcSoftwareGraduationReportMetricDetailFragmentDoc = /*#__PURE__*/ `
    fragment tpcSoftwareGraduationReportMetricDetail on TpcSoftwareGraduationReportMetric {
  complianceCopyrightStatementAntiTamperDetail
  complianceCopyrightStatementDetail {
    includeCopyrights
    notIncludedCopyrights
    oatDetail
  }
  complianceDcoDetail {
    commitCount
    commitDcoCount
  }
  complianceLicenseCompatibilityDetail {
    oatDetail
    tpcDetail {
      license
      licenseConflictList
    }
  }
  complianceLicenseDetail {
    readmeOpensource
    oatDetail
    nonOsiLicenses
    osiPermissiveLicenses
  }
  complianceSnippetReferenceDetail
  ecologyBuildDetail
  ecologyBuildDocDetail
  ecologyCiDetail
  ecologyCodeReviewDetail {
    pullCount
    pullReviewCount
    pullReviewRatio
  }
  ecologyCodeUpstreamDetail
  ecologyInterfaceDocDetail
  ecologyIssueManagementDetail {
    issueCount
    issueTypeList
  }
  ecologyIssueResponseRatioDetail {
    issueCount
    issueResponseCount
    issueResponseRatio
  }
  ecologyIssueResponseTimeDetail {
    issueResponseCount
    issueResponseTime
  }
  ecologyMaintainerDocDetail
  ecologyReadmeDetail
  ecologyTestCoverageDetail {
    coverageRatio
    coverageScore
    duplicationRatio
    duplicationScore
  }
  lifecycleReleaseNoteDetail
  lifecycleStatementDetail
  securityBinaryArtifactDetail {
    oatDetail
    tpcDetail
  }
  securityPackageSigDetail
  securityVulnerabilityDetail {
    packageName
    packageVersion
    vulnerabilities
  }
}
    `;
export const TpcSoftwareGraduationReportMetricRawFragmentDoc = /*#__PURE__*/ `
    fragment tpcSoftwareGraduationReportMetricRaw on TpcSoftwareGraduationReportMetricRaw {
  codeUrl
  complianceCopyrightStatementAntiTamperRaw
  complianceCopyrightStatementRaw
  complianceDcoRaw
  complianceLicenseCompatibilityRaw
  complianceLicenseRaw
  complianceSnippetReferenceRaw
  ecologyBuildDocRaw
  ecologyBuildRaw
  ecologyCiRaw
  ecologyCodeReviewRaw
  ecologyCodeUpstreamRaw
  ecologyInterfaceDocRaw
  ecologyIssueManagementRaw
  ecologyIssueResponseRatioRaw
  ecologyIssueResponseTimeRaw
  ecologyMaintainerDocRaw
  ecologyReadmeRaw
  ecologyTestCoverageRaw
  id
  lifecycleReleaseNoteRaw
  lifecycleStatementRaw
  securityBinaryArtifactRaw
  securityPackageSigRaw
  securityVulnerabilityRaw
}
    `;
export const MetricStatFragmentDoc = /*#__PURE__*/ `
    fragment metricStat on MetricStat {
  mean
  median
}
    `;
export const DatasetFuzzySearchDocument = /*#__PURE__*/ `
    query datasetFuzzySearch($keyword: String!) {
  datasetFuzzySearch(keyword: $keyword) {
    firstIdent
    label
    level
    secondIdent
    shortCode
  }
}
    `;
export const useDatasetFuzzySearchQuery = <
  TData = DatasetFuzzySearchQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: DatasetFuzzySearchQueryVariables,
  options?: UseQueryOptions<DatasetFuzzySearchQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<DatasetFuzzySearchQuery, TError, TData>(
    ['datasetFuzzySearch', variables],
    fetcher<DatasetFuzzySearchQuery, DatasetFuzzySearchQueryVariables>(
      client,
      DatasetFuzzySearchDocument,
      variables,
      headers
    ),
    options
  );

useDatasetFuzzySearchQuery.getKey = (
  variables: DatasetFuzzySearchQueryVariables
) => ['datasetFuzzySearch', variables];
useDatasetFuzzySearchQuery.fetcher = (
  client: GraphQLClient,
  variables: DatasetFuzzySearchQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<DatasetFuzzySearchQuery, DatasetFuzzySearchQueryVariables>(
    client,
    DatasetFuzzySearchDocument,
    variables,
    headers
  );
export const MyLabModelsDocument = /*#__PURE__*/ `
    query myLabModels($page: Int!, $per: Int!) {
  myModels(page: $page, per: $per) {
    count
    items {
      id
      description
      isPublic
      triggerRemainingCount
      latestVersions {
        id
        isScore
        version
        triggerStatus
        triggerUpdatedAt
        algorithm {
          ...algorithm
        }
        metrics {
          ...metrics
        }
      }
      defaultVersion {
        id
        isScore
        version
        algorithm {
          ...algorithm
        }
        metrics {
          ...metrics
        }
      }
      name
      userId
      permissions {
        canDestroy
        canExecute
        canRead
        canUpdate
      }
      parentLabModel {
        name
        id
        loginBinds {
          account
          avatarUrl
          nickname
        }
      }
    }
    page
    totalPage
  }
}
    ${AlgorithmFragmentDoc}
${MetricsFragmentDoc}`;
export const useMyLabModelsQuery = <TData = MyLabModelsQuery, TError = unknown>(
  client: GraphQLClient,
  variables: MyLabModelsQueryVariables,
  options?: UseQueryOptions<MyLabModelsQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<MyLabModelsQuery, TError, TData>(
    ['myLabModels', variables],
    fetcher<MyLabModelsQuery, MyLabModelsQueryVariables>(
      client,
      MyLabModelsDocument,
      variables,
      headers
    ),
    options
  );

useMyLabModelsQuery.getKey = (variables: MyLabModelsQueryVariables) => [
  'myLabModels',
  variables,
];
useMyLabModelsQuery.fetcher = (
  client: GraphQLClient,
  variables: MyLabModelsQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<MyLabModelsQuery, MyLabModelsQueryVariables>(
    client,
    MyLabModelsDocument,
    variables,
    headers
  );
export const LabModelDetailDocument = /*#__PURE__*/ `
    query labModelDetail($modelId: Int!) {
  labModelDetail(modelId: $modelId) {
    createdAt
    id
    description
    isPublic
    triggerRemainingCount
    loginBinds {
      account
      avatarUrl
      nickname
      provider
    }
    latestVersions {
      id
      isScore
      version
      triggerStatus
      triggerUpdatedAt
      algorithm {
        ...algorithm
      }
      metrics {
        ...metrics
      }
    }
    defaultVersion {
      id
      isScore
      version
      algorithm {
        ...algorithm
      }
      metrics {
        ...metrics
      }
    }
    name
    userId
    permissions {
      canDestroy
      canExecute
      canRead
      canUpdate
    }
    parentLabModel {
      id
      name
      loginBinds {
        account
        avatarUrl
        nickname
      }
    }
    referenceCount
  }
}
    ${AlgorithmFragmentDoc}
${MetricsFragmentDoc}`;
export const useLabModelDetailQuery = <
  TData = LabModelDetailQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: LabModelDetailQueryVariables,
  options?: UseQueryOptions<LabModelDetailQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<LabModelDetailQuery, TError, TData>(
    ['labModelDetail', variables],
    fetcher<LabModelDetailQuery, LabModelDetailQueryVariables>(
      client,
      LabModelDetailDocument,
      variables,
      headers
    ),
    options
  );

useLabModelDetailQuery.getKey = (variables: LabModelDetailQueryVariables) => [
  'labModelDetail',
  variables,
];
useLabModelDetailQuery.fetcher = (
  client: GraphQLClient,
  variables: LabModelDetailQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<LabModelDetailQuery, LabModelDetailQueryVariables>(
    client,
    LabModelDetailDocument,
    variables,
    headers
  );
export const LabModelVersionDocument = /*#__PURE__*/ `
    query labModelVersion($modelId: Int!, $versionId: Int!) {
  labModelVersion(modelId: $modelId, versionId: $versionId) {
    id
    version
    algorithm {
      ...algorithm
    }
    metrics {
      ...metrics
    }
    isScore
    triggerStatus
    triggerUpdatedAt
  }
}
    ${AlgorithmFragmentDoc}
${MetricsFragmentDoc}`;
export const useLabModelVersionQuery = <
  TData = LabModelVersionQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: LabModelVersionQueryVariables,
  options?: UseQueryOptions<LabModelVersionQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<LabModelVersionQuery, TError, TData>(
    ['labModelVersion', variables],
    fetcher<LabModelVersionQuery, LabModelVersionQueryVariables>(
      client,
      LabModelVersionDocument,
      variables,
      headers
    ),
    options
  );

useLabModelVersionQuery.getKey = (variables: LabModelVersionQueryVariables) => [
  'labModelVersion',
  variables,
];
useLabModelVersionQuery.fetcher = (
  client: GraphQLClient,
  variables: LabModelVersionQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<LabModelVersionQuery, LabModelVersionQueryVariables>(
    client,
    LabModelVersionDocument,
    variables,
    headers
  );
export const DataSetListDocument = /*#__PURE__*/ `
    query dataSetList($type: String, $firstIdent: String, $secondIdent: String) {
  datasetOverview(type: $type, firstIdent: $firstIdent, secondIdent: $secondIdent)
}
    `;
export const useDataSetListQuery = <TData = DataSetListQuery, TError = unknown>(
  client: GraphQLClient,
  variables?: DataSetListQueryVariables,
  options?: UseQueryOptions<DataSetListQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<DataSetListQuery, TError, TData>(
    variables === undefined ? ['dataSetList'] : ['dataSetList', variables],
    fetcher<DataSetListQuery, DataSetListQueryVariables>(
      client,
      DataSetListDocument,
      variables,
      headers
    ),
    options
  );

useDataSetListQuery.getKey = (variables?: DataSetListQueryVariables) =>
  variables === undefined ? ['dataSetList'] : ['dataSetList', variables];
useDataSetListQuery.fetcher = (
  client: GraphQLClient,
  variables?: DataSetListQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<DataSetListQuery, DataSetListQueryVariables>(
    client,
    DataSetListDocument,
    variables,
    headers
  );
export const MetricSetListDocument = /*#__PURE__*/ `
    query metricSetList {
  metricSetOverview {
    category
    defaultThreshold
    defaultWeight
    from
    id
    ident
    name
    threshold
    weight
  }
}
    `;
export const useMetricSetListQuery = <
  TData = MetricSetListQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables?: MetricSetListQueryVariables,
  options?: UseQueryOptions<MetricSetListQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<MetricSetListQuery, TError, TData>(
    variables === undefined ? ['metricSetList'] : ['metricSetList', variables],
    fetcher<MetricSetListQuery, MetricSetListQueryVariables>(
      client,
      MetricSetListDocument,
      variables,
      headers
    ),
    options
  );

useMetricSetListQuery.getKey = (variables?: MetricSetListQueryVariables) =>
  variables === undefined ? ['metricSetList'] : ['metricSetList', variables];
useMetricSetListQuery.fetcher = (
  client: GraphQLClient,
  variables?: MetricSetListQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<MetricSetListQuery, MetricSetListQueryVariables>(
    client,
    MetricSetListDocument,
    variables,
    headers
  );
export const LabModelCommentsDocument = /*#__PURE__*/ `
    query labModelComments($direction: String, $modelId: Int!, $modelMetricId: Int, $page: Int, $parentId: Int, $per: Int, $sort: String, $versionId: Int) {
  labModelComments(
    direction: $direction
    modelId: $modelId
    modelMetricId: $modelMetricId
    page: $page
    parentId: $parentId
    per: $per
    sort: $sort
    versionId: $versionId
  ) {
    count
    items {
      ...comment
    }
    page
    totalPage
  }
}
    ${CommentFragmentDoc}`;
export const useLabModelCommentsQuery = <
  TData = LabModelCommentsQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: LabModelCommentsQueryVariables,
  options?: UseQueryOptions<LabModelCommentsQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<LabModelCommentsQuery, TError, TData>(
    ['labModelComments', variables],
    fetcher<LabModelCommentsQuery, LabModelCommentsQueryVariables>(
      client,
      LabModelCommentsDocument,
      variables,
      headers
    ),
    options
  );

useLabModelCommentsQuery.getKey = (
  variables: LabModelCommentsQueryVariables
) => ['labModelComments', variables];
useLabModelCommentsQuery.fetcher = (
  client: GraphQLClient,
  variables: LabModelCommentsQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<LabModelCommentsQuery, LabModelCommentsQueryVariables>(
    client,
    LabModelCommentsDocument,
    variables,
    headers
  );
export const LabModelCommentDetailDocument = /*#__PURE__*/ `
    query labModelCommentDetail($modelId: Int!, $commentId: Int!) {
  labModelCommentDetail(modelId: $modelId, commentId: $commentId) {
    content
    createdAt
    id
    images {
      filename
      url
      id
    }
    model {
      ...modelDetail
    }
    parent {
      ...comment
    }
    replies {
      ...comment
    }
    updatedAt
    user {
      ...user
    }
  }
}
    ${ModelDetailFragmentDoc}
${CommentFragmentDoc}
${UserFragmentDoc}`;
export const useLabModelCommentDetailQuery = <
  TData = LabModelCommentDetailQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: LabModelCommentDetailQueryVariables,
  options?: UseQueryOptions<LabModelCommentDetailQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<LabModelCommentDetailQuery, TError, TData>(
    ['labModelCommentDetail', variables],
    fetcher<LabModelCommentDetailQuery, LabModelCommentDetailQueryVariables>(
      client,
      LabModelCommentDetailDocument,
      variables,
      headers
    ),
    options
  );

useLabModelCommentDetailQuery.getKey = (
  variables: LabModelCommentDetailQueryVariables
) => ['labModelCommentDetail', variables];
useLabModelCommentDetailQuery.fetcher = (
  client: GraphQLClient,
  variables: LabModelCommentDetailQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<LabModelCommentDetailQuery, LabModelCommentDetailQueryVariables>(
    client,
    LabModelCommentDetailDocument,
    variables,
    headers
  );
export const MemberOverviewDocument = /*#__PURE__*/ `
    query memberOverview($modelId: Int, $page: Int, $per: Int) {
  memberOverview(modelId: $modelId, page: $page, per: $per) {
    count
    items {
      ...labMember
    }
    model {
      name
    }
    page
    totalPage
  }
}
    ${LabMemberFragmentDoc}`;
export const useMemberOverviewQuery = <
  TData = MemberOverviewQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables?: MemberOverviewQueryVariables,
  options?: UseQueryOptions<MemberOverviewQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<MemberOverviewQuery, TError, TData>(
    variables === undefined
      ? ['memberOverview']
      : ['memberOverview', variables],
    fetcher<MemberOverviewQuery, MemberOverviewQueryVariables>(
      client,
      MemberOverviewDocument,
      variables,
      headers
    ),
    options
  );

useMemberOverviewQuery.getKey = (variables?: MemberOverviewQueryVariables) =>
  variables === undefined ? ['memberOverview'] : ['memberOverview', variables];
useMemberOverviewQuery.fetcher = (
  client: GraphQLClient,
  variables?: MemberOverviewQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<MemberOverviewQuery, MemberOverviewQueryVariables>(
    client,
    MemberOverviewDocument,
    variables,
    headers
  );
export const MyMemberPermissionDocument = /*#__PURE__*/ `
    query myMemberPermission($modelId: Int) {
  myMemberPermission(modelId: $modelId) {
    canDestroy
    canExecute
    canRead
    canUpdate
  }
}
    `;
export const useMyMemberPermissionQuery = <
  TData = MyMemberPermissionQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables?: MyMemberPermissionQueryVariables,
  options?: UseQueryOptions<MyMemberPermissionQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<MyMemberPermissionQuery, TError, TData>(
    variables === undefined
      ? ['myMemberPermission']
      : ['myMemberPermission', variables],
    fetcher<MyMemberPermissionQuery, MyMemberPermissionQueryVariables>(
      client,
      MyMemberPermissionDocument,
      variables,
      headers
    ),
    options
  );

useMyMemberPermissionQuery.getKey = (
  variables?: MyMemberPermissionQueryVariables
) =>
  variables === undefined
    ? ['myMemberPermission']
    : ['myMemberPermission', variables];
useMyMemberPermissionQuery.fetcher = (
  client: GraphQLClient,
  variables?: MyMemberPermissionQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<MyMemberPermissionQuery, MyMemberPermissionQueryVariables>(
    client,
    MyMemberPermissionDocument,
    variables,
    headers
  );
export const InvitationOverviewDocument = /*#__PURE__*/ `
    query invitationOverview($modelId: Int, $page: Int, $per: Int) {
  invitationOverview(modelId: $modelId, page: $page, per: $per) {
    count
    items {
      canExecute
      canRead
      canUpdate
      email
      id
      sentAt
      status
    }
    page
    totalPage
  }
}
    `;
export const useInvitationOverviewQuery = <
  TData = InvitationOverviewQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables?: InvitationOverviewQueryVariables,
  options?: UseQueryOptions<InvitationOverviewQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<InvitationOverviewQuery, TError, TData>(
    variables === undefined
      ? ['invitationOverview']
      : ['invitationOverview', variables],
    fetcher<InvitationOverviewQuery, InvitationOverviewQueryVariables>(
      client,
      InvitationOverviewDocument,
      variables,
      headers
    ),
    options
  );

useInvitationOverviewQuery.getKey = (
  variables?: InvitationOverviewQueryVariables
) =>
  variables === undefined
    ? ['invitationOverview']
    : ['invitationOverview', variables];
useInvitationOverviewQuery.fetcher = (
  client: GraphQLClient,
  variables?: InvitationOverviewQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<InvitationOverviewQuery, InvitationOverviewQueryVariables>(
    client,
    InvitationOverviewDocument,
    variables,
    headers
  );
export const LabModelPublicOverviewDocument = /*#__PURE__*/ `
    query labModelPublicOverview($sort: String, $direction: String, $page: Int, $per: Int, $metricId: Int) {
  labModelPublicOverview(
    sort: $sort
    direction: $direction
    page: $page
    per: $per
    metricId: $metricId
  ) {
    page
    totalPage
    count
    items {
      description
      createdAt
      loginBinds {
        account
        avatarUrl
        nickname
        provider
      }
      metrics {
        ...metrics
      }
      modelId
      modelName
      version
      versionId
    }
  }
}
    ${MetricsFragmentDoc}`;
export const useLabModelPublicOverviewQuery = <
  TData = LabModelPublicOverviewQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables?: LabModelPublicOverviewQueryVariables,
  options?: UseQueryOptions<LabModelPublicOverviewQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<LabModelPublicOverviewQuery, TError, TData>(
    variables === undefined
      ? ['labModelPublicOverview']
      : ['labModelPublicOverview', variables],
    fetcher<LabModelPublicOverviewQuery, LabModelPublicOverviewQueryVariables>(
      client,
      LabModelPublicOverviewDocument,
      variables,
      headers
    ),
    options
  );

useLabModelPublicOverviewQuery.getKey = (
  variables?: LabModelPublicOverviewQueryVariables
) =>
  variables === undefined
    ? ['labModelPublicOverview']
    : ['labModelPublicOverview', variables];
useLabModelPublicOverviewQuery.fetcher = (
  client: GraphQLClient,
  variables?: LabModelPublicOverviewQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<LabModelPublicOverviewQuery, LabModelPublicOverviewQueryVariables>(
    client,
    LabModelPublicOverviewDocument,
    variables,
    headers
  );
export const LabModelVersionReportDetailDocument = /*#__PURE__*/ `
    query labModelVersionReportDetail($modelId: Int!, $versionId: Int!, $label: String, $shortCode: String, $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  labModelVersionReportDetail(
    modelId: $modelId
    versionId: $versionId
    label: $label
    shortCode: $shortCode
    beginDate: $beginDate
    endDate: $endDate
  ) {
    label
    level
    mainScore {
      dates
      tabIdent
      type
      values
    }
    panels {
      diagrams {
        dates
        tabIdent
        type
        values
      }
      metric {
        ...metrics
      }
    }
    shortCode
    type
  }
}
    ${MetricsFragmentDoc}`;
export const useLabModelVersionReportDetailQuery = <
  TData = LabModelVersionReportDetailQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: LabModelVersionReportDetailQueryVariables,
  options?: UseQueryOptions<LabModelVersionReportDetailQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<LabModelVersionReportDetailQuery, TError, TData>(
    ['labModelVersionReportDetail', variables],
    fetcher<
      LabModelVersionReportDetailQuery,
      LabModelVersionReportDetailQueryVariables
    >(client, LabModelVersionReportDetailDocument, variables, headers),
    options
  );

useLabModelVersionReportDetailQuery.getKey = (
  variables: LabModelVersionReportDetailQueryVariables
) => ['labModelVersionReportDetail', variables];
useLabModelVersionReportDetailQuery.fetcher = (
  client: GraphQLClient,
  variables: LabModelVersionReportDetailQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    LabModelVersionReportDetailQuery,
    LabModelVersionReportDetailQueryVariables
  >(client, LabModelVersionReportDetailDocument, variables, headers);
export const CreateLabModelDocument = /*#__PURE__*/ `
    mutation createLabModel($algorithm: String, $isScore: Boolean!, $isPublic: Boolean!, $metrics: [LabModelMetricInput!]!, $name: String!, $description: String!) {
  createLabModel(
    input: {algorithm: $algorithm, isScore: $isScore, isPublic: $isPublic, metrics: $metrics, name: $name, description: $description}
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
  }
}
    `;
export const useCreateLabModelMutation = <TError = unknown, TContext = unknown>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CreateLabModelMutation,
    TError,
    CreateLabModelMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CreateLabModelMutation,
    TError,
    CreateLabModelMutationVariables,
    TContext
  >(
    ['createLabModel'],
    (variables?: CreateLabModelMutationVariables) =>
      fetcher<CreateLabModelMutation, CreateLabModelMutationVariables>(
        client,
        CreateLabModelDocument,
        variables,
        headers
      )(),
    options
  );
useCreateLabModelMutation.fetcher = (
  client: GraphQLClient,
  variables: CreateLabModelMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CreateLabModelMutation, CreateLabModelMutationVariables>(
    client,
    CreateLabModelDocument,
    variables,
    headers
  );
export const CreateLabModelVersionDocument = /*#__PURE__*/ `
    mutation createLabModelVersion($algorithm: String, $isScore: Boolean!, $metrics: [LabModelMetricInput!]!, $modelId: Int!, $version: String!) {
  createLabModelVersion(
    input: {algorithm: $algorithm, isScore: $isScore, metrics: $metrics, modelId: $modelId, version: $version}
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
  }
}
    `;
export const useCreateLabModelVersionMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CreateLabModelVersionMutation,
    TError,
    CreateLabModelVersionMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CreateLabModelVersionMutation,
    TError,
    CreateLabModelVersionMutationVariables,
    TContext
  >(
    ['createLabModelVersion'],
    (variables?: CreateLabModelVersionMutationVariables) =>
      fetcher<
        CreateLabModelVersionMutation,
        CreateLabModelVersionMutationVariables
      >(client, CreateLabModelVersionDocument, variables, headers)(),
    options
  );
useCreateLabModelVersionMutation.fetcher = (
  client: GraphQLClient,
  variables: CreateLabModelVersionMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    CreateLabModelVersionMutation,
    CreateLabModelVersionMutationVariables
  >(client, CreateLabModelVersionDocument, variables, headers);
export const UpdateLabModelDocument = /*#__PURE__*/ `
    mutation updateLabModel($isPublic: Boolean, $modelId: Int!, $name: String, $description: String!) {
  updateLabModel(
    input: {isPublic: $isPublic, modelId: $modelId, name: $name, description: $description}
  ) {
    errors {
      message
      path
    }
    message
  }
}
    `;
export const useUpdateLabModelMutation = <TError = unknown, TContext = unknown>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    UpdateLabModelMutation,
    TError,
    UpdateLabModelMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    UpdateLabModelMutation,
    TError,
    UpdateLabModelMutationVariables,
    TContext
  >(
    ['updateLabModel'],
    (variables?: UpdateLabModelMutationVariables) =>
      fetcher<UpdateLabModelMutation, UpdateLabModelMutationVariables>(
        client,
        UpdateLabModelDocument,
        variables,
        headers
      )(),
    options
  );
useUpdateLabModelMutation.fetcher = (
  client: GraphQLClient,
  variables: UpdateLabModelMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<UpdateLabModelMutation, UpdateLabModelMutationVariables>(
    client,
    UpdateLabModelDocument,
    variables,
    headers
  );
export const UpdateLabModelVersionDocument = /*#__PURE__*/ `
    mutation updateLabModelVersion($modelId: Int!, $versionId: Int!, $version: String, $algorithm: String, $isScore: Boolean!, $metrics: [LabModelMetricInput!]!) {
  updateLabModelVersion(
    input: {algorithm: $algorithm, isScore: $isScore, metrics: $metrics, modelId: $modelId, versionId: $versionId, version: $version}
  ) {
    errors {
      message
      path
    }
    message
  }
}
    `;
export const useUpdateLabModelVersionMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    UpdateLabModelVersionMutation,
    TError,
    UpdateLabModelVersionMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    UpdateLabModelVersionMutation,
    TError,
    UpdateLabModelVersionMutationVariables,
    TContext
  >(
    ['updateLabModelVersion'],
    (variables?: UpdateLabModelVersionMutationVariables) =>
      fetcher<
        UpdateLabModelVersionMutation,
        UpdateLabModelVersionMutationVariables
      >(client, UpdateLabModelVersionDocument, variables, headers)(),
    options
  );
useUpdateLabModelVersionMutation.fetcher = (
  client: GraphQLClient,
  variables: UpdateLabModelVersionMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    UpdateLabModelVersionMutation,
    UpdateLabModelVersionMutationVariables
  >(client, UpdateLabModelVersionDocument, variables, headers);
export const DeleteLabModelDocument = /*#__PURE__*/ `
    mutation deleteLabModel($id: Int!) {
  deleteLabModel(input: {id: $id}) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useDeleteLabModelMutation = <TError = unknown, TContext = unknown>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    DeleteLabModelMutation,
    TError,
    DeleteLabModelMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    DeleteLabModelMutation,
    TError,
    DeleteLabModelMutationVariables,
    TContext
  >(
    ['deleteLabModel'],
    (variables?: DeleteLabModelMutationVariables) =>
      fetcher<DeleteLabModelMutation, DeleteLabModelMutationVariables>(
        client,
        DeleteLabModelDocument,
        variables,
        headers
      )(),
    options
  );
useDeleteLabModelMutation.fetcher = (
  client: GraphQLClient,
  variables: DeleteLabModelMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<DeleteLabModelMutation, DeleteLabModelMutationVariables>(
    client,
    DeleteLabModelDocument,
    variables,
    headers
  );
export const DeleteLabModelVersionDocument = /*#__PURE__*/ `
    mutation deleteLabModelVersion($modelId: Int!, $versionId: Int!) {
  deleteLabModelVersion(input: {modelId: $modelId, versionId: $versionId}) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useDeleteLabModelVersionMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    DeleteLabModelVersionMutation,
    TError,
    DeleteLabModelVersionMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    DeleteLabModelVersionMutation,
    TError,
    DeleteLabModelVersionMutationVariables,
    TContext
  >(
    ['deleteLabModelVersion'],
    (variables?: DeleteLabModelVersionMutationVariables) =>
      fetcher<
        DeleteLabModelVersionMutation,
        DeleteLabModelVersionMutationVariables
      >(client, DeleteLabModelVersionDocument, variables, headers)(),
    options
  );
useDeleteLabModelVersionMutation.fetcher = (
  client: GraphQLClient,
  variables: DeleteLabModelVersionMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    DeleteLabModelVersionMutation,
    DeleteLabModelVersionMutationVariables
  >(client, DeleteLabModelVersionDocument, variables, headers);
export const DeleteLabMemberDocument = /*#__PURE__*/ `
    mutation deleteLabMember($modelId: Int!, $memberId: Int!) {
  deleteLabMember(input: {modelId: $modelId, memberId: $memberId}) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useDeleteLabMemberMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    DeleteLabMemberMutation,
    TError,
    DeleteLabMemberMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    DeleteLabMemberMutation,
    TError,
    DeleteLabMemberMutationVariables,
    TContext
  >(
    ['deleteLabMember'],
    (variables?: DeleteLabMemberMutationVariables) =>
      fetcher<DeleteLabMemberMutation, DeleteLabMemberMutationVariables>(
        client,
        DeleteLabMemberDocument,
        variables,
        headers
      )(),
    options
  );
useDeleteLabMemberMutation.fetcher = (
  client: GraphQLClient,
  variables: DeleteLabMemberMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<DeleteLabMemberMutation, DeleteLabMemberMutationVariables>(
    client,
    DeleteLabMemberDocument,
    variables,
    headers
  );
export const SendMemberInviteDocument = /*#__PURE__*/ `
    mutation sendMemberInvite($modelId: Int!, $emails: [String!]!, $canUpdate: Boolean, $canExecute: Boolean) {
  sendMemberInvite(
    input: {modelId: $modelId, emails: $emails, canUpdate: $canUpdate, canExecute: $canExecute}
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useSendMemberInviteMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    SendMemberInviteMutation,
    TError,
    SendMemberInviteMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    SendMemberInviteMutation,
    TError,
    SendMemberInviteMutationVariables,
    TContext
  >(
    ['sendMemberInvite'],
    (variables?: SendMemberInviteMutationVariables) =>
      fetcher<SendMemberInviteMutation, SendMemberInviteMutationVariables>(
        client,
        SendMemberInviteDocument,
        variables,
        headers
      )(),
    options
  );
useSendMemberInviteMutation.fetcher = (
  client: GraphQLClient,
  variables: SendMemberInviteMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<SendMemberInviteMutation, SendMemberInviteMutationVariables>(
    client,
    SendMemberInviteDocument,
    variables,
    headers
  );
export const UpdateMemberPermissionDocument = /*#__PURE__*/ `
    mutation updateMemberPermission($modelId: Int!, $memberId: Int!, $canUpdate: Boolean, $canExecute: Boolean) {
  updateMemberPermission(
    input: {modelId: $modelId, memberId: $memberId, canUpdate: $canUpdate, canExecute: $canExecute}
  ) {
    clientMutationId
    data {
      ...labMember
    }
    errors {
      message
      path
    }
    message
  }
}
    ${LabMemberFragmentDoc}`;
export const useUpdateMemberPermissionMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    UpdateMemberPermissionMutation,
    TError,
    UpdateMemberPermissionMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    UpdateMemberPermissionMutation,
    TError,
    UpdateMemberPermissionMutationVariables,
    TContext
  >(
    ['updateMemberPermission'],
    (variables?: UpdateMemberPermissionMutationVariables) =>
      fetcher<
        UpdateMemberPermissionMutation,
        UpdateMemberPermissionMutationVariables
      >(client, UpdateMemberPermissionDocument, variables, headers)(),
    options
  );
useUpdateMemberPermissionMutation.fetcher = (
  client: GraphQLClient,
  variables: UpdateMemberPermissionMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    UpdateMemberPermissionMutation,
    UpdateMemberPermissionMutationVariables
  >(client, UpdateMemberPermissionDocument, variables, headers);
export const CancelMemberInviteDocument = /*#__PURE__*/ `
    mutation cancelMemberInvite($modelId: Int!, $invitationId: Int!) {
  cancelMemberInvite(input: {modelId: $modelId, invitationId: $invitationId}) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useCancelMemberInviteMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CancelMemberInviteMutation,
    TError,
    CancelMemberInviteMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CancelMemberInviteMutation,
    TError,
    CancelMemberInviteMutationVariables,
    TContext
  >(
    ['cancelMemberInvite'],
    (variables?: CancelMemberInviteMutationVariables) =>
      fetcher<CancelMemberInviteMutation, CancelMemberInviteMutationVariables>(
        client,
        CancelMemberInviteDocument,
        variables,
        headers
      )(),
    options
  );
useCancelMemberInviteMutation.fetcher = (
  client: GraphQLClient,
  variables: CancelMemberInviteMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CancelMemberInviteMutation, CancelMemberInviteMutationVariables>(
    client,
    CancelMemberInviteDocument,
    variables,
    headers
  );
export const DeleteLabModelCommentDocument = /*#__PURE__*/ `
    mutation deleteLabModelComment($modelId: Int!, $commentId: Int!) {
  deleteLabModelComment(input: {modelId: $modelId, commentId: $commentId}) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useDeleteLabModelCommentMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    DeleteLabModelCommentMutation,
    TError,
    DeleteLabModelCommentMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    DeleteLabModelCommentMutation,
    TError,
    DeleteLabModelCommentMutationVariables,
    TContext
  >(
    ['deleteLabModelComment'],
    (variables?: DeleteLabModelCommentMutationVariables) =>
      fetcher<
        DeleteLabModelCommentMutation,
        DeleteLabModelCommentMutationVariables
      >(client, DeleteLabModelCommentDocument, variables, headers)(),
    options
  );
useDeleteLabModelCommentMutation.fetcher = (
  client: GraphQLClient,
  variables: DeleteLabModelCommentMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    DeleteLabModelCommentMutation,
    DeleteLabModelCommentMutationVariables
  >(client, DeleteLabModelCommentDocument, variables, headers);
export const CreateLabModelCommentDocument = /*#__PURE__*/ `
    mutation createLabModelComment($modelId: Int!, $versionId: Int!, $modelMetricId: Int, $replyTo: Int, $content: String!, $images: [Base64ImageInput!]) {
  createLabModelComment(
    input: {modelId: $modelId, versionId: $versionId, modelMetricId: $modelMetricId, replyTo: $replyTo, content: $content, images: $images}
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
  }
}
    `;
export const useCreateLabModelCommentMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CreateLabModelCommentMutation,
    TError,
    CreateLabModelCommentMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CreateLabModelCommentMutation,
    TError,
    CreateLabModelCommentMutationVariables,
    TContext
  >(
    ['createLabModelComment'],
    (variables?: CreateLabModelCommentMutationVariables) =>
      fetcher<
        CreateLabModelCommentMutation,
        CreateLabModelCommentMutationVariables
      >(client, CreateLabModelCommentDocument, variables, headers)(),
    options
  );
useCreateLabModelCommentMutation.fetcher = (
  client: GraphQLClient,
  variables: CreateLabModelCommentMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    CreateLabModelCommentMutation,
    CreateLabModelCommentMutationVariables
  >(client, CreateLabModelCommentDocument, variables, headers);
export const UpdateLabModelCommentDocument = /*#__PURE__*/ `
    mutation updateLabModelComment($commentId: Int!, $content: String!, $modelId: Int!, $images: [Base64ImageInput!]) {
  updateLabModelComment(
    input: {modelId: $modelId, content: $content, commentId: $commentId, images: $images}
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
  }
}
    `;
export const useUpdateLabModelCommentMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    UpdateLabModelCommentMutation,
    TError,
    UpdateLabModelCommentMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    UpdateLabModelCommentMutation,
    TError,
    UpdateLabModelCommentMutationVariables,
    TContext
  >(
    ['updateLabModelComment'],
    (variables?: UpdateLabModelCommentMutationVariables) =>
      fetcher<
        UpdateLabModelCommentMutation,
        UpdateLabModelCommentMutationVariables
      >(client, UpdateLabModelCommentDocument, variables, headers)(),
    options
  );
useUpdateLabModelCommentMutation.fetcher = (
  client: GraphQLClient,
  variables: UpdateLabModelCommentMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    UpdateLabModelCommentMutation,
    UpdateLabModelCommentMutationVariables
  >(client, UpdateLabModelCommentDocument, variables, headers);
export const TriggerLabModelVersionDocument = /*#__PURE__*/ `
    mutation triggerLabModelVersion($reportId: Int!) {
  triggerLabModelVersion(input: {reportId: $reportId}) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useTriggerLabModelVersionMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    TriggerLabModelVersionMutation,
    TError,
    TriggerLabModelVersionMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    TriggerLabModelVersionMutation,
    TError,
    TriggerLabModelVersionMutationVariables,
    TContext
  >(
    ['triggerLabModelVersion'],
    (variables?: TriggerLabModelVersionMutationVariables) =>
      fetcher<
        TriggerLabModelVersionMutation,
        TriggerLabModelVersionMutationVariables
      >(client, TriggerLabModelVersionDocument, variables, headers)(),
    options
  );
useTriggerLabModelVersionMutation.fetcher = (
  client: GraphQLClient,
  variables: TriggerLabModelVersionMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TriggerLabModelVersionMutation,
    TriggerLabModelVersionMutationVariables
  >(client, TriggerLabModelVersionDocument, variables, headers);
export const CreateLabDatasetDocument = /*#__PURE__*/ `
    mutation createLabDataset($datasets: [DatasetRowTypeInput!]!, $modelId: Int!, $versionId: Int!, $isPublic: Boolean!) {
  createLabDataset(
    input: {datasets: $datasets, modelId: $modelId, versionId: $versionId, isPublic: $isPublic}
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
  }
}
    `;
export const useCreateLabDatasetMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CreateLabDatasetMutation,
    TError,
    CreateLabDatasetMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CreateLabDatasetMutation,
    TError,
    CreateLabDatasetMutationVariables,
    TContext
  >(
    ['createLabDataset'],
    (variables?: CreateLabDatasetMutationVariables) =>
      fetcher<CreateLabDatasetMutation, CreateLabDatasetMutationVariables>(
        client,
        CreateLabDatasetDocument,
        variables,
        headers
      )(),
    options
  );
useCreateLabDatasetMutation.fetcher = (
  client: GraphQLClient,
  variables: CreateLabDatasetMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CreateLabDatasetMutation, CreateLabDatasetMutationVariables>(
    client,
    CreateLabDatasetDocument,
    variables,
    headers
  );
export const MyModelReportsDocument = /*#__PURE__*/ `
    query myModelReports($page: Int, $per: Int) {
  myModelReports(page: $page, per: $per) {
    page
    totalPage
    count
    items {
      id
      isPublic
      reportId
      modelId
      modelName
      datasetStatus {
        ...datasetStatus
      }
      metrics {
        ...metrics
      }
      version
      versionId
      triggerStatus
      triggerUpdatedAt
      parentLabModel {
        name
        id
        loginBinds {
          account
          avatarUrl
          nickname
        }
      }
    }
  }
}
    ${DatasetStatusFragmentDoc}
${MetricsFragmentDoc}`;
export const useMyModelReportsQuery = <
  TData = MyModelReportsQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables?: MyModelReportsQueryVariables,
  options?: UseQueryOptions<MyModelReportsQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<MyModelReportsQuery, TError, TData>(
    variables === undefined
      ? ['myModelReports']
      : ['myModelReports', variables],
    fetcher<MyModelReportsQuery, MyModelReportsQueryVariables>(
      client,
      MyModelReportsDocument,
      variables,
      headers
    ),
    options
  );

useMyModelReportsQuery.getKey = (variables?: MyModelReportsQueryVariables) =>
  variables === undefined ? ['myModelReports'] : ['myModelReports', variables];
useMyModelReportsQuery.fetcher = (
  client: GraphQLClient,
  variables?: MyModelReportsQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<MyModelReportsQuery, MyModelReportsQueryVariables>(
    client,
    MyModelReportsDocument,
    variables,
    headers
  );
export const DeleteLabModelReportDocument = /*#__PURE__*/ `
    mutation deleteLabModelReport($id: Int!) {
  deleteLabModelReport(input: {id: $id}) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useDeleteLabModelReportMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    DeleteLabModelReportMutation,
    TError,
    DeleteLabModelReportMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    DeleteLabModelReportMutation,
    TError,
    DeleteLabModelReportMutationVariables,
    TContext
  >(
    ['deleteLabModelReport'],
    (variables?: DeleteLabModelReportMutationVariables) =>
      fetcher<
        DeleteLabModelReportMutation,
        DeleteLabModelReportMutationVariables
      >(client, DeleteLabModelReportDocument, variables, headers)(),
    options
  );
useDeleteLabModelReportMutation.fetcher = (
  client: GraphQLClient,
  variables: DeleteLabModelReportMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<DeleteLabModelReportMutation, DeleteLabModelReportMutationVariables>(
    client,
    DeleteLabModelReportDocument,
    variables,
    headers
  );
export const UpdateLabModelReportDocument = /*#__PURE__*/ `
    mutation updateLabModelReport($datasets: [DatasetRowTypeInput!]!, $reportId: Int!, $isPublic: Boolean) {
  updateLabModelReport(
    input: {datasets: $datasets, reportId: $reportId, isPublic: $isPublic}
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
  }
}
    `;
export const useUpdateLabModelReportMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    UpdateLabModelReportMutation,
    TError,
    UpdateLabModelReportMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    UpdateLabModelReportMutation,
    TError,
    UpdateLabModelReportMutationVariables,
    TContext
  >(
    ['updateLabModelReport'],
    (variables?: UpdateLabModelReportMutationVariables) =>
      fetcher<
        UpdateLabModelReportMutation,
        UpdateLabModelReportMutationVariables
      >(client, UpdateLabModelReportDocument, variables, headers)(),
    options
  );
useUpdateLabModelReportMutation.fetcher = (
  client: GraphQLClient,
  variables: UpdateLabModelReportMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<UpdateLabModelReportMutation, UpdateLabModelReportMutationVariables>(
    client,
    UpdateLabModelReportDocument,
    variables,
    headers
  );
export const ReferenceModelReportsDocument = /*#__PURE__*/ `
    query referenceModelReports($page: Int, $per: Int, $modelId: Int!) {
  referenceModelReports(page: $page, per: $per, modelId: $modelId) {
    page
    totalPage
    count
    items {
      id
      isPublic
      reportId
      modelId
      modelName
      datasetStatus {
        ...datasetStatus
      }
      metrics {
        ...metrics
      }
      version
      versionId
      triggerStatus
      triggerUpdatedAt
      parentLabModel {
        name
        id
        loginBinds {
          account
          avatarUrl
          nickname
        }
      }
    }
  }
}
    ${DatasetStatusFragmentDoc}
${MetricsFragmentDoc}`;
export const useReferenceModelReportsQuery = <
  TData = ReferenceModelReportsQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: ReferenceModelReportsQueryVariables,
  options?: UseQueryOptions<ReferenceModelReportsQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<ReferenceModelReportsQuery, TError, TData>(
    ['referenceModelReports', variables],
    fetcher<ReferenceModelReportsQuery, ReferenceModelReportsQueryVariables>(
      client,
      ReferenceModelReportsDocument,
      variables,
      headers
    ),
    options
  );

useReferenceModelReportsQuery.getKey = (
  variables: ReferenceModelReportsQueryVariables
) => ['referenceModelReports', variables];
useReferenceModelReportsQuery.fetcher = (
  client: GraphQLClient,
  variables: ReferenceModelReportsQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<ReferenceModelReportsQuery, ReferenceModelReportsQueryVariables>(
    client,
    ReferenceModelReportsDocument,
    variables,
    headers
  );
export const TriggerSingleProjectDocument = /*#__PURE__*/ `
    mutation triggerSingleProject($reportId: Int!, $projectUrl: String!, $level: String!) {
  triggerSingleProject(
    input: {reportId: $reportId, projectUrl: $projectUrl, level: $level}
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useTriggerSingleProjectMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    TriggerSingleProjectMutation,
    TError,
    TriggerSingleProjectMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    TriggerSingleProjectMutation,
    TError,
    TriggerSingleProjectMutationVariables,
    TContext
  >(
    ['triggerSingleProject'],
    (variables?: TriggerSingleProjectMutationVariables) =>
      fetcher<
        TriggerSingleProjectMutation,
        TriggerSingleProjectMutationVariables
      >(client, TriggerSingleProjectDocument, variables, headers)(),
    options
  );
useTriggerSingleProjectMutation.fetcher = (
  client: GraphQLClient,
  variables: TriggerSingleProjectMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<TriggerSingleProjectMutation, TriggerSingleProjectMutationVariables>(
    client,
    TriggerSingleProjectDocument,
    variables,
    headers
  );
export const CreateRepoTaskDocument = /*#__PURE__*/ `
    mutation createRepoTask($repoUrls: [String!]!, $origin: String!) {
  createRepoTask(input: {repoUrls: $repoUrls, origin: $origin}) {
    message
    status
    prUrl
    reportUrl
  }
}
    `;
export const useCreateRepoTaskMutation = <TError = unknown, TContext = unknown>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CreateRepoTaskMutation,
    TError,
    CreateRepoTaskMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CreateRepoTaskMutation,
    TError,
    CreateRepoTaskMutationVariables,
    TContext
  >(
    ['createRepoTask'],
    (variables?: CreateRepoTaskMutationVariables) =>
      fetcher<CreateRepoTaskMutation, CreateRepoTaskMutationVariables>(
        client,
        CreateRepoTaskDocument,
        variables,
        headers
      )(),
    options
  );
useCreateRepoTaskMutation.fetcher = (
  client: GraphQLClient,
  variables: CreateRepoTaskMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CreateRepoTaskMutation, CreateRepoTaskMutationVariables>(
    client,
    CreateRepoTaskDocument,
    variables,
    headers
  );
export const CreateProjectTaskDocument = /*#__PURE__*/ `
    mutation createProjectTask($projectName: String!, $projectTypes: [ProjectTypeInput!]!, $origin: String!, $projectUrl: String, $projectLogoUrl: String) {
  createProjectTask(
    input: {projectName: $projectName, projectTypes: $projectTypes, origin: $origin, projectUrl: $projectUrl, projectLogoUrl: $projectLogoUrl}
  ) {
    message
    status
    prUrl
    reportUrl
  }
}
    `;
export const useCreateProjectTaskMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CreateProjectTaskMutation,
    TError,
    CreateProjectTaskMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CreateProjectTaskMutation,
    TError,
    CreateProjectTaskMutationVariables,
    TContext
  >(
    ['createProjectTask'],
    (variables?: CreateProjectTaskMutationVariables) =>
      fetcher<CreateProjectTaskMutation, CreateProjectTaskMutationVariables>(
        client,
        CreateProjectTaskDocument,
        variables,
        headers
      )(),
    options
  );
useCreateProjectTaskMutation.fetcher = (
  client: GraphQLClient,
  variables: CreateProjectTaskMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CreateProjectTaskMutation, CreateProjectTaskMutationVariables>(
    client,
    CreateProjectTaskDocument,
    variables,
    headers
  );
export const ModifyUserDocument = /*#__PURE__*/ `
    mutation modifyUser($name: String!, $email: String!, $language: String) {
  modifyUser(input: {name: $name, email: $email, language: $language}) {
    message
    status
  }
}
    `;
export const useModifyUserMutation = <TError = unknown, TContext = unknown>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    ModifyUserMutation,
    TError,
    ModifyUserMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    ModifyUserMutation,
    TError,
    ModifyUserMutationVariables,
    TContext
  >(
    ['modifyUser'],
    (variables?: ModifyUserMutationVariables) =>
      fetcher<ModifyUserMutation, ModifyUserMutationVariables>(
        client,
        ModifyUserDocument,
        variables,
        headers
      )(),
    options
  );
useModifyUserMutation.fetcher = (
  client: GraphQLClient,
  variables: ModifyUserMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<ModifyUserMutation, ModifyUserMutationVariables>(
    client,
    ModifyUserDocument,
    variables,
    headers
  );
export const UserUnbindDocument = /*#__PURE__*/ `
    mutation userUnbind($provider: String!) {
  userUnbind(input: {provider: $provider}) {
    message
    status
  }
}
    `;
export const useUserUnbindMutation = <TError = unknown, TContext = unknown>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    UserUnbindMutation,
    TError,
    UserUnbindMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    UserUnbindMutation,
    TError,
    UserUnbindMutationVariables,
    TContext
  >(
    ['userUnbind'],
    (variables?: UserUnbindMutationVariables) =>
      fetcher<UserUnbindMutation, UserUnbindMutationVariables>(
        client,
        UserUnbindDocument,
        variables,
        headers
      )(),
    options
  );
useUserUnbindMutation.fetcher = (
  client: GraphQLClient,
  variables: UserUnbindMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<UserUnbindMutation, UserUnbindMutationVariables>(
    client,
    UserUnbindDocument,
    variables,
    headers
  );
export const SendEmailVerifyDocument = /*#__PURE__*/ `
    mutation sendEmailVerify {
  sendEmailVerify(input: {}) {
    message
    status
  }
}
    `;
export const useSendEmailVerifyMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    SendEmailVerifyMutation,
    TError,
    SendEmailVerifyMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    SendEmailVerifyMutation,
    TError,
    SendEmailVerifyMutationVariables,
    TContext
  >(
    ['sendEmailVerify'],
    (variables?: SendEmailVerifyMutationVariables) =>
      fetcher<SendEmailVerifyMutation, SendEmailVerifyMutationVariables>(
        client,
        SendEmailVerifyDocument,
        variables,
        headers
      )(),
    options
  );
useSendEmailVerifyMutation.fetcher = (
  client: GraphQLClient,
  variables?: SendEmailVerifyMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<SendEmailVerifyMutation, SendEmailVerifyMutationVariables>(
    client,
    SendEmailVerifyDocument,
    variables,
    headers
  );
export const SignOutDocument = /*#__PURE__*/ `
    mutation signOut {
  signOut
}
    `;
export const useSignOutMutation = <TError = unknown, TContext = unknown>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    SignOutMutation,
    TError,
    SignOutMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<SignOutMutation, TError, SignOutMutationVariables, TContext>(
    ['signOut'],
    (variables?: SignOutMutationVariables) =>
      fetcher<SignOutMutation, SignOutMutationVariables>(
        client,
        SignOutDocument,
        variables,
        headers
      )(),
    options
  );
useSignOutMutation.fetcher = (
  client: GraphQLClient,
  variables?: SignOutMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<SignOutMutation, SignOutMutationVariables>(
    client,
    SignOutDocument,
    variables,
    headers
  );
export const DeleteUserDocument = /*#__PURE__*/ `
    mutation deleteUser {
  destroyUser
}
    `;
export const useDeleteUserMutation = <TError = unknown, TContext = unknown>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    DeleteUserMutation,
    TError,
    DeleteUserMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    DeleteUserMutation,
    TError,
    DeleteUserMutationVariables,
    TContext
  >(
    ['deleteUser'],
    (variables?: DeleteUserMutationVariables) =>
      fetcher<DeleteUserMutation, DeleteUserMutationVariables>(
        client,
        DeleteUserDocument,
        variables,
        headers
      )(),
    options
  );
useDeleteUserMutation.fetcher = (
  client: GraphQLClient,
  variables?: DeleteUserMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<DeleteUserMutation, DeleteUserMutationVariables>(
    client,
    DeleteUserDocument,
    variables,
    headers
  );
export const BindWechatLinkDocument = /*#__PURE__*/ `
    mutation bindWechatLink {
  bindWechatLink(input: {}) {
    url
    message
  }
}
    `;
export const useBindWechatLinkMutation = <TError = unknown, TContext = unknown>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    BindWechatLinkMutation,
    TError,
    BindWechatLinkMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    BindWechatLinkMutation,
    TError,
    BindWechatLinkMutationVariables,
    TContext
  >(
    ['bindWechatLink'],
    (variables?: BindWechatLinkMutationVariables) =>
      fetcher<BindWechatLinkMutation, BindWechatLinkMutationVariables>(
        client,
        BindWechatLinkDocument,
        variables,
        headers
      )(),
    options
  );
useBindWechatLinkMutation.fetcher = (
  client: GraphQLClient,
  variables?: BindWechatLinkMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<BindWechatLinkMutation, BindWechatLinkMutationVariables>(
    client,
    BindWechatLinkDocument,
    variables,
    headers
  );
export const CreateSubscriptionDocument = /*#__PURE__*/ `
    mutation createSubscription($label: String!, $level: String!) {
  createSubscription(input: {label: $label, level: $level}) {
    message
    status
  }
}
    `;
export const useCreateSubscriptionMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CreateSubscriptionMutation,
    TError,
    CreateSubscriptionMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CreateSubscriptionMutation,
    TError,
    CreateSubscriptionMutationVariables,
    TContext
  >(
    ['createSubscription'],
    (variables?: CreateSubscriptionMutationVariables) =>
      fetcher<CreateSubscriptionMutation, CreateSubscriptionMutationVariables>(
        client,
        CreateSubscriptionDocument,
        variables,
        headers
      )(),
    options
  );
useCreateSubscriptionMutation.fetcher = (
  client: GraphQLClient,
  variables: CreateSubscriptionMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CreateSubscriptionMutation, CreateSubscriptionMutationVariables>(
    client,
    CreateSubscriptionDocument,
    variables,
    headers
  );
export const CancelSubscriptionDocument = /*#__PURE__*/ `
    mutation cancelSubscription($label: String!, $level: String!) {
  cancelSubscription(input: {label: $label, level: $level}) {
    message
    status
  }
}
    `;
export const useCancelSubscriptionMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CancelSubscriptionMutation,
    TError,
    CancelSubscriptionMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CancelSubscriptionMutation,
    TError,
    CancelSubscriptionMutationVariables,
    TContext
  >(
    ['cancelSubscription'],
    (variables?: CancelSubscriptionMutationVariables) =>
      fetcher<CancelSubscriptionMutation, CancelSubscriptionMutationVariables>(
        client,
        CancelSubscriptionDocument,
        variables,
        headers
      )(),
    options
  );
useCancelSubscriptionMutation.fetcher = (
  client: GraphQLClient,
  variables: CancelSubscriptionMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CancelSubscriptionMutation, CancelSubscriptionMutationVariables>(
    client,
    CancelSubscriptionDocument,
    variables,
    headers
  );
export const ModifyUserOrgsDocument = /*#__PURE__*/ `
    mutation modifyUserOrgs($platform: String!, $organizations: [ContributorOrgInput!]!) {
  modifyUserOrgs(input: {platform: $platform, organizations: $organizations}) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useModifyUserOrgsMutation = <TError = unknown, TContext = unknown>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    ModifyUserOrgsMutation,
    TError,
    ModifyUserOrgsMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    ModifyUserOrgsMutation,
    TError,
    ModifyUserOrgsMutationVariables,
    TContext
  >(
    ['modifyUserOrgs'],
    (variables?: ModifyUserOrgsMutationVariables) =>
      fetcher<ModifyUserOrgsMutation, ModifyUserOrgsMutationVariables>(
        client,
        ModifyUserOrgsDocument,
        variables,
        headers
      )(),
    options
  );
useModifyUserOrgsMutation.fetcher = (
  client: GraphQLClient,
  variables: ModifyUserOrgsMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<ModifyUserOrgsMutation, ModifyUserOrgsMutationVariables>(
    client,
    ModifyUserOrgsDocument,
    variables,
    headers
  );
export const ManageUserOrgsDocument = /*#__PURE__*/ `
    mutation manageUserOrgs($platform: String!, $organizations: [ContributorOrgInput!]!, $contributor: String!, $label: String!, $level: String!) {
  manageUserOrgs(
    input: {platform: $platform, contributor: $contributor, label: $label, level: $level, organizations: $organizations}
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
    prUrl
    status
  }
}
    `;
export const useManageUserOrgsMutation = <TError = unknown, TContext = unknown>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    ManageUserOrgsMutation,
    TError,
    ManageUserOrgsMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    ManageUserOrgsMutation,
    TError,
    ManageUserOrgsMutationVariables,
    TContext
  >(
    ['manageUserOrgs'],
    (variables?: ManageUserOrgsMutationVariables) =>
      fetcher<ManageUserOrgsMutation, ManageUserOrgsMutationVariables>(
        client,
        ManageUserOrgsDocument,
        variables,
        headers
      )(),
    options
  );
useManageUserOrgsMutation.fetcher = (
  client: GraphQLClient,
  variables: ManageUserOrgsMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<ManageUserOrgsMutation, ManageUserOrgsMutationVariables>(
    client,
    ManageUserOrgsDocument,
    variables,
    headers
  );
export const CreateTpcSoftwareSelectionReportDocument = /*#__PURE__*/ `
    mutation createTpcSoftwareSelectionReport($label: String!, $level: String!, $reportType: Int!, $softwareReport: TpcSoftwareSelectionReportInput!) {
  createTpcSoftwareSelectionReport(
    input: {label: $label, level: $level, reportType: $reportType, softwareReport: $softwareReport}
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useCreateTpcSoftwareSelectionReportMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CreateTpcSoftwareSelectionReportMutation,
    TError,
    CreateTpcSoftwareSelectionReportMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CreateTpcSoftwareSelectionReportMutation,
    TError,
    CreateTpcSoftwareSelectionReportMutationVariables,
    TContext
  >(
    ['createTpcSoftwareSelectionReport'],
    (variables?: CreateTpcSoftwareSelectionReportMutationVariables) =>
      fetcher<
        CreateTpcSoftwareSelectionReportMutation,
        CreateTpcSoftwareSelectionReportMutationVariables
      >(client, CreateTpcSoftwareSelectionReportDocument, variables, headers)(),
    options
  );
useCreateTpcSoftwareSelectionReportMutation.fetcher = (
  client: GraphQLClient,
  variables: CreateTpcSoftwareSelectionReportMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    CreateTpcSoftwareSelectionReportMutation,
    CreateTpcSoftwareSelectionReportMutationVariables
  >(client, CreateTpcSoftwareSelectionReportDocument, variables, headers);
export const CreateTpcSoftwareSelectionDocument = /*#__PURE__*/ `
    mutation createTpcSoftwareSelection($label: String!, $level: String!, $tpcSoftwareSelectionReportIds: [Int!]!, $selectionType: Int!, $repoUrl: [String!]!, $committers: [String!]!, $functionalDescription: String!, $incubationTime: String!, $demandSource: String!, $reason: String!, $sameTypeSoftwareName: String, $targetSoftware: String!, $isSameTypeCheck: Int!) {
  createTpcSoftwareSelection(
    input: {label: $label, level: $level, selectionType: $selectionType, tpcSoftwareSelectionReportIds: $tpcSoftwareSelectionReportIds, repoUrl: $repoUrl, committers: $committers, functionalDescription: $functionalDescription, demandSource: $demandSource, incubationTime: $incubationTime, reason: $reason, sameTypeSoftwareName: $sameTypeSoftwareName, targetSoftware: $targetSoftware, isSameTypeCheck: $isSameTypeCheck}
  ) {
    errors {
      message
      path
    }
    id
    message
    status
  }
}
    `;
export const useCreateTpcSoftwareSelectionMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CreateTpcSoftwareSelectionMutation,
    TError,
    CreateTpcSoftwareSelectionMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CreateTpcSoftwareSelectionMutation,
    TError,
    CreateTpcSoftwareSelectionMutationVariables,
    TContext
  >(
    ['createTpcSoftwareSelection'],
    (variables?: CreateTpcSoftwareSelectionMutationVariables) =>
      fetcher<
        CreateTpcSoftwareSelectionMutation,
        CreateTpcSoftwareSelectionMutationVariables
      >(client, CreateTpcSoftwareSelectionDocument, variables, headers)(),
    options
  );
useCreateTpcSoftwareSelectionMutation.fetcher = (
  client: GraphQLClient,
  variables: CreateTpcSoftwareSelectionMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    CreateTpcSoftwareSelectionMutation,
    CreateTpcSoftwareSelectionMutationVariables
  >(client, CreateTpcSoftwareSelectionDocument, variables, headers);
export const CreateTpcSoftwareReportMetricClarificationDocument = /*#__PURE__*/ `
    mutation createTpcSoftwareReportMetricClarification($shortCode: String!, $metricName: String!, $content: String!, $reportType: Int = 0) {
  createTpcSoftwareReportMetricClarification(
    input: {shortCode: $shortCode, metricName: $metricName, content: $content, reportType: $reportType}
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useCreateTpcSoftwareReportMetricClarificationMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CreateTpcSoftwareReportMetricClarificationMutation,
    TError,
    CreateTpcSoftwareReportMetricClarificationMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CreateTpcSoftwareReportMetricClarificationMutation,
    TError,
    CreateTpcSoftwareReportMetricClarificationMutationVariables,
    TContext
  >(
    ['createTpcSoftwareReportMetricClarification'],
    (variables?: CreateTpcSoftwareReportMetricClarificationMutationVariables) =>
      fetcher<
        CreateTpcSoftwareReportMetricClarificationMutation,
        CreateTpcSoftwareReportMetricClarificationMutationVariables
      >(
        client,
        CreateTpcSoftwareReportMetricClarificationDocument,
        variables,
        headers
      )(),
    options
  );
useCreateTpcSoftwareReportMetricClarificationMutation.fetcher = (
  client: GraphQLClient,
  variables: CreateTpcSoftwareReportMetricClarificationMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    CreateTpcSoftwareReportMetricClarificationMutation,
    CreateTpcSoftwareReportMetricClarificationMutationVariables
  >(
    client,
    CreateTpcSoftwareReportMetricClarificationDocument,
    variables,
    headers
  );
export const DeleteReportMetricClarificationDocument = /*#__PURE__*/ `
    mutation deleteReportMetricClarification($clarificationId: Int!) {
  deleteTpcSoftwareReportMetricClarification(
    input: {clarificationId: $clarificationId}
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useDeleteReportMetricClarificationMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    DeleteReportMetricClarificationMutation,
    TError,
    DeleteReportMetricClarificationMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    DeleteReportMetricClarificationMutation,
    TError,
    DeleteReportMetricClarificationMutationVariables,
    TContext
  >(
    ['deleteReportMetricClarification'],
    (variables?: DeleteReportMetricClarificationMutationVariables) =>
      fetcher<
        DeleteReportMetricClarificationMutation,
        DeleteReportMetricClarificationMutationVariables
      >(client, DeleteReportMetricClarificationDocument, variables, headers)(),
    options
  );
useDeleteReportMetricClarificationMutation.fetcher = (
  client: GraphQLClient,
  variables: DeleteReportMetricClarificationMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    DeleteReportMetricClarificationMutation,
    DeleteReportMetricClarificationMutationVariables
  >(client, DeleteReportMetricClarificationDocument, variables, headers);
export const UpdateReportMetricClarificationDocument = /*#__PURE__*/ `
    mutation updateReportMetricClarification($clarificationId: Int!, $content: String!) {
  updateTpcSoftwareReportMetricClarification(
    input: {clarificationId: $clarificationId, content: $content}
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useUpdateReportMetricClarificationMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    UpdateReportMetricClarificationMutation,
    TError,
    UpdateReportMetricClarificationMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    UpdateReportMetricClarificationMutation,
    TError,
    UpdateReportMetricClarificationMutationVariables,
    TContext
  >(
    ['updateReportMetricClarification'],
    (variables?: UpdateReportMetricClarificationMutationVariables) =>
      fetcher<
        UpdateReportMetricClarificationMutation,
        UpdateReportMetricClarificationMutationVariables
      >(client, UpdateReportMetricClarificationDocument, variables, headers)(),
    options
  );
useUpdateReportMetricClarificationMutation.fetcher = (
  client: GraphQLClient,
  variables: UpdateReportMetricClarificationMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    UpdateReportMetricClarificationMutation,
    UpdateReportMetricClarificationMutationVariables
  >(client, UpdateReportMetricClarificationDocument, variables, headers);
export const AcceptTpcSoftwareReportMetricClarificationDocument = /*#__PURE__*/ `
    mutation acceptTpcSoftwareReportMetricClarification($shortCode: String!, $metricName: String!, $state: Int!, $memberType: Int!, $reportType: Int = 0) {
  acceptTpcSoftwareReportMetricClarification(
    input: {shortCode: $shortCode, metricName: $metricName, state: $state, memberType: $memberType, reportType: $reportType}
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useAcceptTpcSoftwareReportMetricClarificationMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    AcceptTpcSoftwareReportMetricClarificationMutation,
    TError,
    AcceptTpcSoftwareReportMetricClarificationMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    AcceptTpcSoftwareReportMetricClarificationMutation,
    TError,
    AcceptTpcSoftwareReportMetricClarificationMutationVariables,
    TContext
  >(
    ['acceptTpcSoftwareReportMetricClarification'],
    (variables?: AcceptTpcSoftwareReportMetricClarificationMutationVariables) =>
      fetcher<
        AcceptTpcSoftwareReportMetricClarificationMutation,
        AcceptTpcSoftwareReportMetricClarificationMutationVariables
      >(
        client,
        AcceptTpcSoftwareReportMetricClarificationDocument,
        variables,
        headers
      )(),
    options
  );
useAcceptTpcSoftwareReportMetricClarificationMutation.fetcher = (
  client: GraphQLClient,
  variables: AcceptTpcSoftwareReportMetricClarificationMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    AcceptTpcSoftwareReportMetricClarificationMutation,
    AcceptTpcSoftwareReportMetricClarificationMutationVariables
  >(
    client,
    AcceptTpcSoftwareReportMetricClarificationDocument,
    variables,
    headers
  );
export const UpdateTpcSoftwareSelectionReportDocument = /*#__PURE__*/ `
    mutation updateTpcSoftwareSelectionReport($reportId: Int!, $softwareReport: TpcSoftwareSelectionReportUpdateInput!) {
  updateTpcSoftwareSelectionReport(
    input: {reportId: $reportId, softwareReport: $softwareReport}
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useUpdateTpcSoftwareSelectionReportMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    UpdateTpcSoftwareSelectionReportMutation,
    TError,
    UpdateTpcSoftwareSelectionReportMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    UpdateTpcSoftwareSelectionReportMutation,
    TError,
    UpdateTpcSoftwareSelectionReportMutationVariables,
    TContext
  >(
    ['updateTpcSoftwareSelectionReport'],
    (variables?: UpdateTpcSoftwareSelectionReportMutationVariables) =>
      fetcher<
        UpdateTpcSoftwareSelectionReportMutation,
        UpdateTpcSoftwareSelectionReportMutationVariables
      >(client, UpdateTpcSoftwareSelectionReportDocument, variables, headers)(),
    options
  );
useUpdateTpcSoftwareSelectionReportMutation.fetcher = (
  client: GraphQLClient,
  variables: UpdateTpcSoftwareSelectionReportMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    UpdateTpcSoftwareSelectionReportMutation,
    UpdateTpcSoftwareSelectionReportMutationVariables
  >(client, UpdateTpcSoftwareSelectionReportDocument, variables, headers);
export const UpdateTpcSoftwareSelectionDocument = /*#__PURE__*/ `
    mutation updateTpcSoftwareSelection($selectionId: Int!, $repoUrl: [String!]!, $committers: [String!]!, $functionalDescription: String!, $incubationTime: String!, $demandSource: String!, $reason: String!, $sameTypeSoftwareName: String, $isSameTypeCheck: Int!) {
  updateTpcSoftwareSelection(
    input: {selectionId: $selectionId, repoUrl: $repoUrl, committers: $committers, functionalDescription: $functionalDescription, demandSource: $demandSource, incubationTime: $incubationTime, reason: $reason, sameTypeSoftwareName: $sameTypeSoftwareName, isSameTypeCheck: $isSameTypeCheck}
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useUpdateTpcSoftwareSelectionMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    UpdateTpcSoftwareSelectionMutation,
    TError,
    UpdateTpcSoftwareSelectionMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    UpdateTpcSoftwareSelectionMutation,
    TError,
    UpdateTpcSoftwareSelectionMutationVariables,
    TContext
  >(
    ['updateTpcSoftwareSelection'],
    (variables?: UpdateTpcSoftwareSelectionMutationVariables) =>
      fetcher<
        UpdateTpcSoftwareSelectionMutation,
        UpdateTpcSoftwareSelectionMutationVariables
      >(client, UpdateTpcSoftwareSelectionDocument, variables, headers)(),
    options
  );
useUpdateTpcSoftwareSelectionMutation.fetcher = (
  client: GraphQLClient,
  variables: UpdateTpcSoftwareSelectionMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    UpdateTpcSoftwareSelectionMutation,
    UpdateTpcSoftwareSelectionMutationVariables
  >(client, UpdateTpcSoftwareSelectionDocument, variables, headers);
export const CreateTpcSoftwareSelectionCommentDocument = /*#__PURE__*/ `
    mutation createTpcSoftwareSelectionComment($selectionId: Int!, $content: String!, $reportType: Int = 0) {
  createTpcSoftwareSelectionComment(
    input: {selectionId: $selectionId, content: $content, reportType: $reportType}
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useCreateTpcSoftwareSelectionCommentMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CreateTpcSoftwareSelectionCommentMutation,
    TError,
    CreateTpcSoftwareSelectionCommentMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CreateTpcSoftwareSelectionCommentMutation,
    TError,
    CreateTpcSoftwareSelectionCommentMutationVariables,
    TContext
  >(
    ['createTpcSoftwareSelectionComment'],
    (variables?: CreateTpcSoftwareSelectionCommentMutationVariables) =>
      fetcher<
        CreateTpcSoftwareSelectionCommentMutation,
        CreateTpcSoftwareSelectionCommentMutationVariables
      >(
        client,
        CreateTpcSoftwareSelectionCommentDocument,
        variables,
        headers
      )(),
    options
  );
useCreateTpcSoftwareSelectionCommentMutation.fetcher = (
  client: GraphQLClient,
  variables: CreateTpcSoftwareSelectionCommentMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    CreateTpcSoftwareSelectionCommentMutation,
    CreateTpcSoftwareSelectionCommentMutationVariables
  >(client, CreateTpcSoftwareSelectionCommentDocument, variables, headers);
export const DeleteTpcSoftwareSelectionCommentDocument = /*#__PURE__*/ `
    mutation deleteTpcSoftwareSelectionComment($commentId: Int!) {
  deleteTpcSoftwareSelectionComment(input: {commentId: $commentId}) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useDeleteTpcSoftwareSelectionCommentMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    DeleteTpcSoftwareSelectionCommentMutation,
    TError,
    DeleteTpcSoftwareSelectionCommentMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    DeleteTpcSoftwareSelectionCommentMutation,
    TError,
    DeleteTpcSoftwareSelectionCommentMutationVariables,
    TContext
  >(
    ['deleteTpcSoftwareSelectionComment'],
    (variables?: DeleteTpcSoftwareSelectionCommentMutationVariables) =>
      fetcher<
        DeleteTpcSoftwareSelectionCommentMutation,
        DeleteTpcSoftwareSelectionCommentMutationVariables
      >(
        client,
        DeleteTpcSoftwareSelectionCommentDocument,
        variables,
        headers
      )(),
    options
  );
useDeleteTpcSoftwareSelectionCommentMutation.fetcher = (
  client: GraphQLClient,
  variables: DeleteTpcSoftwareSelectionCommentMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    DeleteTpcSoftwareSelectionCommentMutation,
    DeleteTpcSoftwareSelectionCommentMutationVariables
  >(client, DeleteTpcSoftwareSelectionCommentDocument, variables, headers);
export const UpdateTpcSoftwareSelectionCommentDocument = /*#__PURE__*/ `
    mutation updateTpcSoftwareSelectionComment($commentId: Int!, $content: String!) {
  updateTpcSoftwareSelectionComment(
    input: {commentId: $commentId, content: $content}
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useUpdateTpcSoftwareSelectionCommentMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    UpdateTpcSoftwareSelectionCommentMutation,
    TError,
    UpdateTpcSoftwareSelectionCommentMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    UpdateTpcSoftwareSelectionCommentMutation,
    TError,
    UpdateTpcSoftwareSelectionCommentMutationVariables,
    TContext
  >(
    ['updateTpcSoftwareSelectionComment'],
    (variables?: UpdateTpcSoftwareSelectionCommentMutationVariables) =>
      fetcher<
        UpdateTpcSoftwareSelectionCommentMutation,
        UpdateTpcSoftwareSelectionCommentMutationVariables
      >(
        client,
        UpdateTpcSoftwareSelectionCommentDocument,
        variables,
        headers
      )(),
    options
  );
useUpdateTpcSoftwareSelectionCommentMutation.fetcher = (
  client: GraphQLClient,
  variables: UpdateTpcSoftwareSelectionCommentMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    UpdateTpcSoftwareSelectionCommentMutation,
    UpdateTpcSoftwareSelectionCommentMutationVariables
  >(client, UpdateTpcSoftwareSelectionCommentDocument, variables, headers);
export const AcceptTpcSoftwareSelectionDocument = /*#__PURE__*/ `
    mutation acceptTpcSoftwareSelection($selectionId: Int!, $state: Int!, $memberType: Int!) {
  acceptTpcSoftwareSelection(
    input: {selectionId: $selectionId, state: $state, memberType: $memberType}
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useAcceptTpcSoftwareSelectionMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    AcceptTpcSoftwareSelectionMutation,
    TError,
    AcceptTpcSoftwareSelectionMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    AcceptTpcSoftwareSelectionMutation,
    TError,
    AcceptTpcSoftwareSelectionMutationVariables,
    TContext
  >(
    ['acceptTpcSoftwareSelection'],
    (variables?: AcceptTpcSoftwareSelectionMutationVariables) =>
      fetcher<
        AcceptTpcSoftwareSelectionMutation,
        AcceptTpcSoftwareSelectionMutationVariables
      >(client, AcceptTpcSoftwareSelectionDocument, variables, headers)(),
    options
  );
useAcceptTpcSoftwareSelectionMutation.fetcher = (
  client: GraphQLClient,
  variables: AcceptTpcSoftwareSelectionMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    AcceptTpcSoftwareSelectionMutation,
    AcceptTpcSoftwareSelectionMutationVariables
  >(client, AcceptTpcSoftwareSelectionDocument, variables, headers);
export const CreateTpcSoftwareGraduationReportDocument = /*#__PURE__*/ `
    mutation createTpcSoftwareGraduationReport($label: String!, $level: String!, $softwareReport: TpcSoftwareGraduationReportInput!) {
  createTpcSoftwareGraduationReport(
    input: {label: $label, level: $level, softwareReport: $softwareReport}
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useCreateTpcSoftwareGraduationReportMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CreateTpcSoftwareGraduationReportMutation,
    TError,
    CreateTpcSoftwareGraduationReportMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CreateTpcSoftwareGraduationReportMutation,
    TError,
    CreateTpcSoftwareGraduationReportMutationVariables,
    TContext
  >(
    ['createTpcSoftwareGraduationReport'],
    (variables?: CreateTpcSoftwareGraduationReportMutationVariables) =>
      fetcher<
        CreateTpcSoftwareGraduationReportMutation,
        CreateTpcSoftwareGraduationReportMutationVariables
      >(
        client,
        CreateTpcSoftwareGraduationReportDocument,
        variables,
        headers
      )(),
    options
  );
useCreateTpcSoftwareGraduationReportMutation.fetcher = (
  client: GraphQLClient,
  variables: CreateTpcSoftwareGraduationReportMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    CreateTpcSoftwareGraduationReportMutation,
    CreateTpcSoftwareGraduationReportMutationVariables
  >(client, CreateTpcSoftwareGraduationReportDocument, variables, headers);
export const UpdateTpcSoftwareGraduationReportDocument = /*#__PURE__*/ `
    mutation updateTpcSoftwareGraduationReport($reportId: Int!, $softwareReport: TpcSoftwareGraduationReportUpdateInput!) {
  updateTpcSoftwareGraduationReport(
    input: {reportId: $reportId, softwareReport: $softwareReport}
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useUpdateTpcSoftwareGraduationReportMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    UpdateTpcSoftwareGraduationReportMutation,
    TError,
    UpdateTpcSoftwareGraduationReportMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    UpdateTpcSoftwareGraduationReportMutation,
    TError,
    UpdateTpcSoftwareGraduationReportMutationVariables,
    TContext
  >(
    ['updateTpcSoftwareGraduationReport'],
    (variables?: UpdateTpcSoftwareGraduationReportMutationVariables) =>
      fetcher<
        UpdateTpcSoftwareGraduationReportMutation,
        UpdateTpcSoftwareGraduationReportMutationVariables
      >(
        client,
        UpdateTpcSoftwareGraduationReportDocument,
        variables,
        headers
      )(),
    options
  );
useUpdateTpcSoftwareGraduationReportMutation.fetcher = (
  client: GraphQLClient,
  variables: UpdateTpcSoftwareGraduationReportMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    UpdateTpcSoftwareGraduationReportMutation,
    UpdateTpcSoftwareGraduationReportMutationVariables
  >(client, UpdateTpcSoftwareGraduationReportDocument, variables, headers);
export const CreateTpcSoftwareGraduationDocument = /*#__PURE__*/ `
    mutation createTpcSoftwareGraduation($label: String!, $level: String!, $tpcSoftwareGraduationReportIds: [Int!]!, $committers: [String!]!, $demandSource: String!, $functionalDescription: String!, $incubationTime: String, $incubationStartTime: ISO8601DateTime) {
  createTpcSoftwareGraduation(
    input: {label: $label, level: $level, tpcSoftwareGraduationReportIds: $tpcSoftwareGraduationReportIds, committers: $committers, demandSource: $demandSource, functionalDescription: $functionalDescription, incubationTime: $incubationTime, incubationStartTime: $incubationStartTime}
  ) {
    errors {
      message
      path
    }
    id
    message
    status
  }
}
    `;
export const useCreateTpcSoftwareGraduationMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CreateTpcSoftwareGraduationMutation,
    TError,
    CreateTpcSoftwareGraduationMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CreateTpcSoftwareGraduationMutation,
    TError,
    CreateTpcSoftwareGraduationMutationVariables,
    TContext
  >(
    ['createTpcSoftwareGraduation'],
    (variables?: CreateTpcSoftwareGraduationMutationVariables) =>
      fetcher<
        CreateTpcSoftwareGraduationMutation,
        CreateTpcSoftwareGraduationMutationVariables
      >(client, CreateTpcSoftwareGraduationDocument, variables, headers)(),
    options
  );
useCreateTpcSoftwareGraduationMutation.fetcher = (
  client: GraphQLClient,
  variables: CreateTpcSoftwareGraduationMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    CreateTpcSoftwareGraduationMutation,
    CreateTpcSoftwareGraduationMutationVariables
  >(client, CreateTpcSoftwareGraduationDocument, variables, headers);
export const UpdateTpcSoftwareGraduationDocument = /*#__PURE__*/ `
    mutation updateTpcSoftwareGraduation($graduationId: Int!, $committers: [String!]!, $demandSource: String!, $functionalDescription: String!, $incubationTime: String!, $incubationStartTime: ISO8601DateTime) {
  updateTpcSoftwareGraduation(
    input: {graduationId: $graduationId, committers: $committers, demandSource: $demandSource, functionalDescription: $functionalDescription, incubationTime: $incubationTime, incubationStartTime: $incubationStartTime}
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useUpdateTpcSoftwareGraduationMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    UpdateTpcSoftwareGraduationMutation,
    TError,
    UpdateTpcSoftwareGraduationMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    UpdateTpcSoftwareGraduationMutation,
    TError,
    UpdateTpcSoftwareGraduationMutationVariables,
    TContext
  >(
    ['updateTpcSoftwareGraduation'],
    (variables?: UpdateTpcSoftwareGraduationMutationVariables) =>
      fetcher<
        UpdateTpcSoftwareGraduationMutation,
        UpdateTpcSoftwareGraduationMutationVariables
      >(client, UpdateTpcSoftwareGraduationDocument, variables, headers)(),
    options
  );
useUpdateTpcSoftwareGraduationMutation.fetcher = (
  client: GraphQLClient,
  variables: UpdateTpcSoftwareGraduationMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    UpdateTpcSoftwareGraduationMutation,
    UpdateTpcSoftwareGraduationMutationVariables
  >(client, UpdateTpcSoftwareGraduationDocument, variables, headers);
export const AcceptTpcSoftwareGraduationDocument = /*#__PURE__*/ `
    mutation acceptTpcSoftwareGraduation($graduationId: Int!, $state: Int!, $memberType: Int!) {
  acceptTpcSoftwareGraduation(
    input: {graduationId: $graduationId, state: $state, memberType: $memberType}
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useAcceptTpcSoftwareGraduationMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    AcceptTpcSoftwareGraduationMutation,
    TError,
    AcceptTpcSoftwareGraduationMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    AcceptTpcSoftwareGraduationMutation,
    TError,
    AcceptTpcSoftwareGraduationMutationVariables,
    TContext
  >(
    ['acceptTpcSoftwareGraduation'],
    (variables?: AcceptTpcSoftwareGraduationMutationVariables) =>
      fetcher<
        AcceptTpcSoftwareGraduationMutation,
        AcceptTpcSoftwareGraduationMutationVariables
      >(client, AcceptTpcSoftwareGraduationDocument, variables, headers)(),
    options
  );
useAcceptTpcSoftwareGraduationMutation.fetcher = (
  client: GraphQLClient,
  variables: AcceptTpcSoftwareGraduationMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    AcceptTpcSoftwareGraduationMutation,
    AcceptTpcSoftwareGraduationMutationVariables
  >(client, AcceptTpcSoftwareGraduationDocument, variables, headers);
export const TriggerTpcSoftwareSelectionReportDocument = /*#__PURE__*/ `
    mutation triggerTpcSoftwareSelectionReport($reportId: Int!) {
  triggerTpcSoftwareSelectionReport(input: {reportId: $reportId}) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useTriggerTpcSoftwareSelectionReportMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    TriggerTpcSoftwareSelectionReportMutation,
    TError,
    TriggerTpcSoftwareSelectionReportMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    TriggerTpcSoftwareSelectionReportMutation,
    TError,
    TriggerTpcSoftwareSelectionReportMutationVariables,
    TContext
  >(
    ['triggerTpcSoftwareSelectionReport'],
    (variables?: TriggerTpcSoftwareSelectionReportMutationVariables) =>
      fetcher<
        TriggerTpcSoftwareSelectionReportMutation,
        TriggerTpcSoftwareSelectionReportMutationVariables
      >(
        client,
        TriggerTpcSoftwareSelectionReportDocument,
        variables,
        headers
      )(),
    options
  );
useTriggerTpcSoftwareSelectionReportMutation.fetcher = (
  client: GraphQLClient,
  variables: TriggerTpcSoftwareSelectionReportMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TriggerTpcSoftwareSelectionReportMutation,
    TriggerTpcSoftwareSelectionReportMutationVariables
  >(client, TriggerTpcSoftwareSelectionReportDocument, variables, headers);
export const TriggerTpcSoftwareGraduationReportDocument = /*#__PURE__*/ `
    mutation triggerTpcSoftwareGraduationReport($reportId: Int!) {
  triggerTpcSoftwareGraduationReport(input: {reportId: $reportId}) {
    errors {
      message
      path
    }
    message
    status
  }
}
    `;
export const useTriggerTpcSoftwareGraduationReportMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    TriggerTpcSoftwareGraduationReportMutation,
    TError,
    TriggerTpcSoftwareGraduationReportMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    TriggerTpcSoftwareGraduationReportMutation,
    TError,
    TriggerTpcSoftwareGraduationReportMutationVariables,
    TContext
  >(
    ['triggerTpcSoftwareGraduationReport'],
    (variables?: TriggerTpcSoftwareGraduationReportMutationVariables) =>
      fetcher<
        TriggerTpcSoftwareGraduationReportMutation,
        TriggerTpcSoftwareGraduationReportMutationVariables
      >(
        client,
        TriggerTpcSoftwareGraduationReportDocument,
        variables,
        headers
      )(),
    options
  );
useTriggerTpcSoftwareGraduationReportMutation.fetcher = (
  client: GraphQLClient,
  variables: TriggerTpcSoftwareGraduationReportMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TriggerTpcSoftwareGraduationReportMutation,
    TriggerTpcSoftwareGraduationReportMutationVariables
  >(client, TriggerTpcSoftwareGraduationReportDocument, variables, headers);
export const CreateAuthTokenDocument = /*#__PURE__*/ `
    mutation createAuthToken($name: String!, $expiresAt: ISO8601DateTime!) {
  createAuthToken(input: {name: $name, expiresAt: $expiresAt}) {
    message
    data {
      token
    }
    errors {
      message
    }
  }
}
    `;
export const useCreateAuthTokenMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    CreateAuthTokenMutation,
    TError,
    CreateAuthTokenMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    CreateAuthTokenMutation,
    TError,
    CreateAuthTokenMutationVariables,
    TContext
  >(
    ['createAuthToken'],
    (variables?: CreateAuthTokenMutationVariables) =>
      fetcher<CreateAuthTokenMutation, CreateAuthTokenMutationVariables>(
        client,
        CreateAuthTokenDocument,
        variables,
        headers
      )(),
    options
  );
useCreateAuthTokenMutation.fetcher = (
  client: GraphQLClient,
  variables: CreateAuthTokenMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CreateAuthTokenMutation, CreateAuthTokenMutationVariables>(
    client,
    CreateAuthTokenDocument,
    variables,
    headers
  );
export const DeleteAuthTokenDocument = /*#__PURE__*/ `
    mutation deleteAuthToken($id: Int!) {
  deleteAuthToken(input: {id: $id}) {
    message
    status
    errors {
      message
    }
  }
}
    `;
export const useDeleteAuthTokenMutation = <
  TError = unknown,
  TContext = unknown
>(
  client: GraphQLClient,
  options?: UseMutationOptions<
    DeleteAuthTokenMutation,
    TError,
    DeleteAuthTokenMutationVariables,
    TContext
  >,
  headers?: RequestInit['headers']
) =>
  useMutation<
    DeleteAuthTokenMutation,
    TError,
    DeleteAuthTokenMutationVariables,
    TContext
  >(
    ['deleteAuthToken'],
    (variables?: DeleteAuthTokenMutationVariables) =>
      fetcher<DeleteAuthTokenMutation, DeleteAuthTokenMutationVariables>(
        client,
        DeleteAuthTokenDocument,
        variables,
        headers
      )(),
    options
  );
useDeleteAuthTokenMutation.fetcher = (
  client: GraphQLClient,
  variables: DeleteAuthTokenMutationVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<DeleteAuthTokenMutation, DeleteAuthTokenMutationVariables>(
    client,
    DeleteAuthTokenDocument,
    variables,
    headers
  );
export const CommitsRepoDataListDocument = /*#__PURE__*/ `
    query commitsRepoDataList($label: String!, $level: String = "repo", $branch: String = "master", $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  commitsRepoPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      linesAdded
      linesChanged
      linesRemoved
      repoName
      repoAttributeType
      sigName
    }
    page
    totalPage
  }
}
    `;
export const useCommitsRepoDataListQuery = <
  TData = CommitsRepoDataListQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: CommitsRepoDataListQueryVariables,
  options?: UseQueryOptions<CommitsRepoDataListQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CommitsRepoDataListQuery, TError, TData>(
    ['commitsRepoDataList', variables],
    fetcher<CommitsRepoDataListQuery, CommitsRepoDataListQueryVariables>(
      client,
      CommitsRepoDataListDocument,
      variables,
      headers
    ),
    options
  );

useCommitsRepoDataListQuery.getKey = (
  variables: CommitsRepoDataListQueryVariables
) => ['commitsRepoDataList', variables];
useCommitsRepoDataListQuery.fetcher = (
  client: GraphQLClient,
  variables: CommitsRepoDataListQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CommitsRepoDataListQuery, CommitsRepoDataListQueryVariables>(
    client,
    CommitsRepoDataListDocument,
    variables,
    headers
  );
export const CommitsDetailDataListDocument = /*#__PURE__*/ `
    query commitsDetailDataList($label: String!, $level: String = "repo", $branch: String = "master", $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  commitsDetailPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      authorEmail
      commitHash
      grimoireCreationDate
      linesAdded
      linesChanged
      linesRemoved
      mergedAt
      orgName
      prUrl
      repoName
    }
    page
    totalPage
  }
}
    `;
export const useCommitsDetailDataListQuery = <
  TData = CommitsDetailDataListQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: CommitsDetailDataListQueryVariables,
  options?: UseQueryOptions<CommitsDetailDataListQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CommitsDetailDataListQuery, TError, TData>(
    ['commitsDetailDataList', variables],
    fetcher<CommitsDetailDataListQuery, CommitsDetailDataListQueryVariables>(
      client,
      CommitsDetailDataListDocument,
      variables,
      headers
    ),
    options
  );

useCommitsDetailDataListQuery.getKey = (
  variables: CommitsDetailDataListQueryVariables
) => ['commitsDetailDataList', variables];
useCommitsDetailDataListQuery.fetcher = (
  client: GraphQLClient,
  variables: CommitsDetailDataListQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CommitsDetailDataListQuery, CommitsDetailDataListQueryVariables>(
    client,
    CommitsDetailDataListDocument,
    variables,
    headers
  );
export const CommitsOrganizationDataListDocument = /*#__PURE__*/ `
    query commitsOrganizationDataList($label: String!, $level: String = "repo", $branch: String = "master", $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  commitsOrganizationPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      linesAdded
      linesChanged
      linesChangedRatio
      linesRemoved
      orgName
    }
    page
    totalPage
  }
}
    `;
export const useCommitsOrganizationDataListQuery = <
  TData = CommitsOrganizationDataListQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: CommitsOrganizationDataListQueryVariables,
  options?: UseQueryOptions<CommitsOrganizationDataListQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CommitsOrganizationDataListQuery, TError, TData>(
    ['commitsOrganizationDataList', variables],
    fetcher<
      CommitsOrganizationDataListQuery,
      CommitsOrganizationDataListQueryVariables
    >(client, CommitsOrganizationDataListDocument, variables, headers),
    options
  );

useCommitsOrganizationDataListQuery.getKey = (
  variables: CommitsOrganizationDataListQueryVariables
) => ['commitsOrganizationDataList', variables];
useCommitsOrganizationDataListQuery.fetcher = (
  client: GraphQLClient,
  variables: CommitsOrganizationDataListQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    CommitsOrganizationDataListQuery,
    CommitsOrganizationDataListQueryVariables
  >(client, CommitsOrganizationDataListDocument, variables, headers);
export const CommitsContributorListDocument = /*#__PURE__*/ `
    query commitsContributorList($label: String!, $level: String = "repo", $branch: String = "master", $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  commitsContributorList(
    label: $label
    level: $level
    branch: $branch
    beginDate: $beginDate
    endDate: $endDate
  ) {
    authorEmail
    grimoireCreationDate
    linesAdded
    linesChanged
    linesRemoved
    orgName
  }
}
    `;
export const useCommitsContributorListQuery = <
  TData = CommitsContributorListQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: CommitsContributorListQueryVariables,
  options?: UseQueryOptions<CommitsContributorListQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CommitsContributorListQuery, TError, TData>(
    ['commitsContributorList', variables],
    fetcher<CommitsContributorListQuery, CommitsContributorListQueryVariables>(
      client,
      CommitsContributorListDocument,
      variables,
      headers
    ),
    options
  );

useCommitsContributorListQuery.getKey = (
  variables: CommitsContributorListQueryVariables
) => ['commitsContributorList', variables];
useCommitsContributorListQuery.fetcher = (
  client: GraphQLClient,
  variables: CommitsContributorListQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CommitsContributorListQuery, CommitsContributorListQueryVariables>(
    client,
    CommitsContributorListDocument,
    variables,
    headers
  );
export const CodesRepoPageDocument = /*#__PURE__*/ `
    query codesRepoPage($label: String!, $level: String = "repo", $branch: String = "master", $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  codesRepoPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      lines
      linesChang
      linesTotal
      manager
      repoAttributeType
      repoName
      sigName
    }
    page
    totalPage
  }
}
    `;
export const useCodesRepoPageQuery = <
  TData = CodesRepoPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: CodesRepoPageQueryVariables,
  options?: UseQueryOptions<CodesRepoPageQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CodesRepoPageQuery, TError, TData>(
    ['codesRepoPage', variables],
    fetcher<CodesRepoPageQuery, CodesRepoPageQueryVariables>(
      client,
      CodesRepoPageDocument,
      variables,
      headers
    ),
    options
  );

useCodesRepoPageQuery.getKey = (variables: CodesRepoPageQueryVariables) => [
  'codesRepoPage',
  variables,
];
useCodesRepoPageQuery.fetcher = (
  client: GraphQLClient,
  variables: CodesRepoPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CodesRepoPageQuery, CodesRepoPageQueryVariables>(
    client,
    CodesRepoPageDocument,
    variables,
    headers
  );
export const CodesDetailPageDocument = /*#__PURE__*/ `
    query codesDetailPage($label: String!, $level: String = "repo", $branch: String = "master", $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  codesDetailPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      commitUrls
      createdAt
      issueNum
      linesTotal
      mergedAt
      tag
      title
      url
      userLogin
    }
    page
    totalPage
  }
}
    `;
export const useCodesDetailPageQuery = <
  TData = CodesDetailPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: CodesDetailPageQueryVariables,
  options?: UseQueryOptions<CodesDetailPageQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CodesDetailPageQuery, TError, TData>(
    ['codesDetailPage', variables],
    fetcher<CodesDetailPageQuery, CodesDetailPageQueryVariables>(
      client,
      CodesDetailPageDocument,
      variables,
      headers
    ),
    options
  );

useCodesDetailPageQuery.getKey = (variables: CodesDetailPageQueryVariables) => [
  'codesDetailPage',
  variables,
];
useCodesDetailPageQuery.fetcher = (
  client: GraphQLClient,
  variables: CodesDetailPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CodesDetailPageQuery, CodesDetailPageQueryVariables>(
    client,
    CodesDetailPageDocument,
    variables,
    headers
  );
export const CodesTrendDocument = /*#__PURE__*/ `
    query codesTrend($label: String!, $level: String = "repo", $branch: String = "master", $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  codesTrend(
    label: $label
    level: $level
    branch: $branch
    beginDate: $beginDate
    endDate: $endDate
  ) {
    detailList {
      count
      date
    }
    sigName
  }
}
    `;
export const useCodesTrendQuery = <TData = CodesTrendQuery, TError = unknown>(
  client: GraphQLClient,
  variables: CodesTrendQueryVariables,
  options?: UseQueryOptions<CodesTrendQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CodesTrendQuery, TError, TData>(
    ['codesTrend', variables],
    fetcher<CodesTrendQuery, CodesTrendQueryVariables>(
      client,
      CodesTrendDocument,
      variables,
      headers
    ),
    options
  );

useCodesTrendQuery.getKey = (variables: CodesTrendQueryVariables) => [
  'codesTrend',
  variables,
];
useCodesTrendQuery.fetcher = (
  client: GraphQLClient,
  variables: CodesTrendQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CodesTrendQuery, CodesTrendQueryVariables>(
    client,
    CodesTrendDocument,
    variables,
    headers
  );
export const CommitsSigPageDocument = /*#__PURE__*/ `
    query commitsSigPage($label: String!, $level: String = "repo", $branch: String = "master", $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  commitsSigPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      linesAdded
      linesChanged
      linesRemoved
      sigName
    }
    page
    totalPage
  }
}
    `;
export const useCommitsSigPageQuery = <
  TData = CommitsSigPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: CommitsSigPageQueryVariables,
  options?: UseQueryOptions<CommitsSigPageQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CommitsSigPageQuery, TError, TData>(
    ['commitsSigPage', variables],
    fetcher<CommitsSigPageQuery, CommitsSigPageQueryVariables>(
      client,
      CommitsSigPageDocument,
      variables,
      headers
    ),
    options
  );

useCommitsSigPageQuery.getKey = (variables: CommitsSigPageQueryVariables) => [
  'commitsSigPage',
  variables,
];
useCommitsSigPageQuery.fetcher = (
  client: GraphQLClient,
  variables: CommitsSigPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CommitsSigPageQuery, CommitsSigPageQueryVariables>(
    client,
    CommitsSigPageDocument,
    variables,
    headers
  );
export const CodesCheckDetailPageDocument = /*#__PURE__*/ `
    query codesCheckDetailPage($label: String!, $level: String = "repo", $branch: String = "master", $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  codesCheckDetailPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      commentCreatedAt
      commentNum
      issueNum
      linesAdded
      linesRemoved
      prState
      prUrl
      prUserLogin
      timeCheckHours
      userLogin
    }
    page
    totalPage
  }
}
    `;
export const useCodesCheckDetailPageQuery = <
  TData = CodesCheckDetailPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: CodesCheckDetailPageQueryVariables,
  options?: UseQueryOptions<CodesCheckDetailPageQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CodesCheckDetailPageQuery, TError, TData>(
    ['codesCheckDetailPage', variables],
    fetcher<CodesCheckDetailPageQuery, CodesCheckDetailPageQueryVariables>(
      client,
      CodesCheckDetailPageDocument,
      variables,
      headers
    ),
    options
  );

useCodesCheckDetailPageQuery.getKey = (
  variables: CodesCheckDetailPageQueryVariables
) => ['codesCheckDetailPage', variables];
useCodesCheckDetailPageQuery.fetcher = (
  client: GraphQLClient,
  variables: CodesCheckDetailPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CodesCheckDetailPageQuery, CodesCheckDetailPageQueryVariables>(
    client,
    CodesCheckDetailPageDocument,
    variables,
    headers
  );
export const CodesCheckPageDocument = /*#__PURE__*/ `
    query codesCheckPage($label: String!, $level: String = "repo", $branch: String = "master", $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  codesCheckPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      commentNum
      linesAdded
      linesRemoved
      timeCheckHours
      userLogin
    }
    page
    totalPage
  }
}
    `;
export const useCodesCheckPageQuery = <
  TData = CodesCheckPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: CodesCheckPageQueryVariables,
  options?: UseQueryOptions<CodesCheckPageQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CodesCheckPageQuery, TError, TData>(
    ['codesCheckPage', variables],
    fetcher<CodesCheckPageQuery, CodesCheckPageQueryVariables>(
      client,
      CodesCheckPageDocument,
      variables,
      headers
    ),
    options
  );

useCodesCheckPageQuery.getKey = (variables: CodesCheckPageQueryVariables) => [
  'codesCheckPage',
  variables,
];
useCodesCheckPageQuery.fetcher = (
  client: GraphQLClient,
  variables: CodesCheckPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CodesCheckPageQuery, CodesCheckPageQueryVariables>(
    client,
    CodesCheckPageDocument,
    variables,
    headers
  );
export const CommitFeedbackPageDocument = /*#__PURE__*/ `
    query commitFeedbackPage($label: String!, $level: String = "repo", $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  commitFeedbackPage(
    label: $label
    level: $level
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      commitHash
      contactWay
      createAtDate
      id
      newLinesAdded
      newLinesChanged
      newLinesRemoved
      oldLinesAdded
      oldLinesChanged
      oldLinesRemoved
      prUrl
      repoName
      requestReviewerEmail
      reviewMsg
      reviewerEmail
      reviewerId
      state
      submitReason
      submitUserEmail
      submitUserId
      updateAtDate
    }
    page
    totalPage
  }
}
    `;
export const useCommitFeedbackPageQuery = <
  TData = CommitFeedbackPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: CommitFeedbackPageQueryVariables,
  options?: UseQueryOptions<CommitFeedbackPageQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CommitFeedbackPageQuery, TError, TData>(
    ['commitFeedbackPage', variables],
    fetcher<CommitFeedbackPageQuery, CommitFeedbackPageQueryVariables>(
      client,
      CommitFeedbackPageDocument,
      variables,
      headers
    ),
    options
  );

useCommitFeedbackPageQuery.getKey = (
  variables: CommitFeedbackPageQueryVariables
) => ['commitFeedbackPage', variables];
useCommitFeedbackPageQuery.fetcher = (
  client: GraphQLClient,
  variables: CommitFeedbackPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CommitFeedbackPageQuery, CommitFeedbackPageQueryVariables>(
    client,
    CommitFeedbackPageDocument,
    variables,
    headers
  );
export const OrganizationPageDocument = /*#__PURE__*/ `
    query organizationPage($page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!]) {
  organizationPage(
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
  ) {
    count
    items {
      domain
      orgName
    }
    page
    totalPage
  }
}
    `;
export const useOrganizationPageQuery = <
  TData = OrganizationPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables?: OrganizationPageQueryVariables,
  options?: UseQueryOptions<OrganizationPageQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<OrganizationPageQuery, TError, TData>(
    variables === undefined
      ? ['organizationPage']
      : ['organizationPage', variables],
    fetcher<OrganizationPageQuery, OrganizationPageQueryVariables>(
      client,
      OrganizationPageDocument,
      variables,
      headers
    ),
    options
  );

useOrganizationPageQuery.getKey = (
  variables?: OrganizationPageQueryVariables
) =>
  variables === undefined
    ? ['organizationPage']
    : ['organizationPage', variables];
useOrganizationPageQuery.fetcher = (
  client: GraphQLClient,
  variables?: OrganizationPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<OrganizationPageQuery, OrganizationPageQueryVariables>(
    client,
    OrganizationPageDocument,
    variables,
    headers
  );
export const SubjectAccessLevelPageDocument = /*#__PURE__*/ `
    query subjectAccessLevelPage($label: String!, $level: String = "repo", $page: Int, $per: Int, $accessLevel: Int) {
  subjectAccessLevelPage(
    page: $page
    per: $per
    label: $label
    level: $level
    accessLevel: $accessLevel
  ) {
    count
    items {
      accessLevel
      id
      subjectId
      user {
        id
        name
        roleLevel
        email
        language
        emailVerified
        loginBinds {
          account
          avatarUrl
          nickname
          provider
        }
        contributingOrgs {
          firstDate
          lastDate
          orgName
          platformType
        }
      }
      userId
    }
    page
    totalPage
  }
}
    `;
export const useSubjectAccessLevelPageQuery = <
  TData = SubjectAccessLevelPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: SubjectAccessLevelPageQueryVariables,
  options?: UseQueryOptions<SubjectAccessLevelPageQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<SubjectAccessLevelPageQuery, TError, TData>(
    ['subjectAccessLevelPage', variables],
    fetcher<SubjectAccessLevelPageQuery, SubjectAccessLevelPageQueryVariables>(
      client,
      SubjectAccessLevelPageDocument,
      variables,
      headers
    ),
    options
  );

useSubjectAccessLevelPageQuery.getKey = (
  variables: SubjectAccessLevelPageQueryVariables
) => ['subjectAccessLevelPage', variables];
useSubjectAccessLevelPageQuery.fetcher = (
  client: GraphQLClient,
  variables: SubjectAccessLevelPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<SubjectAccessLevelPageQuery, SubjectAccessLevelPageQueryVariables>(
    client,
    SubjectAccessLevelPageDocument,
    variables,
    headers
  );
export const SubjectSigPageDocument = /*#__PURE__*/ `
    query subjectSigPage($label: String!, $level: String = "repo", $page: Int, $per: Int) {
  subjectSigPage(page: $page, per: $per, label: $label, level: $level) {
    count
    items {
      description
      emails
      id
      linkSig {
        label
        level
        repos
      }
      maintainers
      name
    }
    page
    totalPage
  }
}
    `;
export const useSubjectSigPageQuery = <
  TData = SubjectSigPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: SubjectSigPageQueryVariables,
  options?: UseQueryOptions<SubjectSigPageQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<SubjectSigPageQuery, TError, TData>(
    ['subjectSigPage', variables],
    fetcher<SubjectSigPageQuery, SubjectSigPageQueryVariables>(
      client,
      SubjectSigPageDocument,
      variables,
      headers
    ),
    options
  );

useSubjectSigPageQuery.getKey = (variables: SubjectSigPageQueryVariables) => [
  'subjectSigPage',
  variables,
];
useSubjectSigPageQuery.fetcher = (
  client: GraphQLClient,
  variables: SubjectSigPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<SubjectSigPageQuery, SubjectSigPageQueryVariables>(
    client,
    SubjectSigPageDocument,
    variables,
    headers
  );
export const TpcSoftwareSelectionReportPageDocument = /*#__PURE__*/ `
    query tpcSoftwareSelectionReportPage($label: String!, $level: String = "repo", $reportTypeList: [Int!]!, $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!]) {
  tpcSoftwareSelectionReportPage(
    page: $page
    per: $per
    reportTypeList: $reportTypeList
    label: $label
    level: $level
    filterOpts: $filterOpts
    sortOpts: $sortOpts
  ) {
    count
    items {
      adaptationMethod
      architectureDiagrams {
        filename
        id
        url
      }
      codeCount
      codeUrl
      id
      name
      programmingLanguage
      reportType
      shortCode
      user {
        name
        loginBinds {
          account
          nickname
          provider
        }
      }
      userId
      vulnerabilityResponse
      tpcSoftwareReportMetric {
        ...tpcSoftwareReportMetric
      }
      tpcSoftwareSig {
        ...tpcSoftwareSig
      }
    }
    page
    totalPage
  }
}
    ${TpcSoftwareReportMetricFragmentDoc}
${TpcSoftwareSigFragmentDoc}`;
export const useTpcSoftwareSelectionReportPageQuery = <
  TData = TpcSoftwareSelectionReportPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareSelectionReportPageQueryVariables,
  options?: UseQueryOptions<TpcSoftwareSelectionReportPageQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareSelectionReportPageQuery, TError, TData>(
    ['tpcSoftwareSelectionReportPage', variables],
    fetcher<
      TpcSoftwareSelectionReportPageQuery,
      TpcSoftwareSelectionReportPageQueryVariables
    >(client, TpcSoftwareSelectionReportPageDocument, variables, headers),
    options
  );

useTpcSoftwareSelectionReportPageQuery.getKey = (
  variables: TpcSoftwareSelectionReportPageQueryVariables
) => ['tpcSoftwareSelectionReportPage', variables];
useTpcSoftwareSelectionReportPageQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareSelectionReportPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareSelectionReportPageQuery,
    TpcSoftwareSelectionReportPageQueryVariables
  >(client, TpcSoftwareSelectionReportPageDocument, variables, headers);
export const TpcSoftwareSelectionPageDocument = /*#__PURE__*/ `
    query tpcSoftwareSelectionPage($label: String!, $level: String = "repo", $selectionType: Int!, $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!]) {
  tpcSoftwareSelectionPage(
    page: $page
    per: $per
    selectionType: $selectionType
    label: $label
    level: $level
    filterOpts: $filterOpts
    sortOpts: $sortOpts
  ) {
    count
    items {
      committers
      createdAt
      demandSource
      functionalDescription
      id
      incubationTime
      isSameTypeCheck
      issueUrl
      repoUrl
      reason
      sameTypeSoftwareName
      selectionType
      state
      targetSoftware
      updatedAt
      user {
        name
        loginBinds {
          account
          nickname
          provider
        }
      }
      userId
      tpcSoftwareSelectionReportIds
      tpcSoftwareSelectionReports {
        name
        shortCode
        codeUrl
      }
    }
    page
    totalPage
  }
}
    `;
export const useTpcSoftwareSelectionPageQuery = <
  TData = TpcSoftwareSelectionPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareSelectionPageQueryVariables,
  options?: UseQueryOptions<TpcSoftwareSelectionPageQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareSelectionPageQuery, TError, TData>(
    ['tpcSoftwareSelectionPage', variables],
    fetcher<
      TpcSoftwareSelectionPageQuery,
      TpcSoftwareSelectionPageQueryVariables
    >(client, TpcSoftwareSelectionPageDocument, variables, headers),
    options
  );

useTpcSoftwareSelectionPageQuery.getKey = (
  variables: TpcSoftwareSelectionPageQueryVariables
) => ['tpcSoftwareSelectionPage', variables];
useTpcSoftwareSelectionPageQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareSelectionPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareSelectionPageQuery,
    TpcSoftwareSelectionPageQueryVariables
  >(client, TpcSoftwareSelectionPageDocument, variables, headers);
export const TpcSoftwareSelectionReportDocument = /*#__PURE__*/ `
    query tpcSoftwareSelectionReport($shortCode: String!) {
  tpcSoftwareSelectionReport(shortCode: $shortCode) {
    adaptationMethod
    architectureDiagrams {
      filename
      id
      url
    }
    codeCount
    codeUrl
    id
    name
    programmingLanguage
    shortCode
    vulnerabilityResponse
    tpcSoftwareReportMetric {
      ...tpcSoftwareReportMetric
      ...tpcSoftwareReportMetricDetail
    }
    tpcSoftwareSig {
      ...tpcSoftwareSig
    }
    userId
  }
  tpcSoftwareReportMetricClarificationPermission(
    shortCode: $shortCode
    reportType: 0
  ) {
    clarificationCommitterPermission
    clarificationSigLeadPermission
    clarificationCompliancePermission
    clarificationLegalPermission
  }
}
    ${TpcSoftwareReportMetricFragmentDoc}
${TpcSoftwareReportMetricDetailFragmentDoc}
${TpcSoftwareSigFragmentDoc}`;
export const useTpcSoftwareSelectionReportQuery = <
  TData = TpcSoftwareSelectionReportQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareSelectionReportQueryVariables,
  options?: UseQueryOptions<TpcSoftwareSelectionReportQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareSelectionReportQuery, TError, TData>(
    ['tpcSoftwareSelectionReport', variables],
    fetcher<
      TpcSoftwareSelectionReportQuery,
      TpcSoftwareSelectionReportQueryVariables
    >(client, TpcSoftwareSelectionReportDocument, variables, headers),
    options
  );

useTpcSoftwareSelectionReportQuery.getKey = (
  variables: TpcSoftwareSelectionReportQueryVariables
) => ['tpcSoftwareSelectionReport', variables];
useTpcSoftwareSelectionReportQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareSelectionReportQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareSelectionReportQuery,
    TpcSoftwareSelectionReportQueryVariables
  >(client, TpcSoftwareSelectionReportDocument, variables, headers);
export const TpcSoftwareSelectionReportRowDocument = /*#__PURE__*/ `
    query tpcSoftwareSelectionReportRow($shortCode: String!) {
  tpcSoftwareSelectionReport(shortCode: $shortCode) {
    id
    tpcSoftwareReportMetricRaw {
      ...tpcSoftwareReportMetricRaw
    }
  }
}
    ${TpcSoftwareReportMetricRawFragmentDoc}`;
export const useTpcSoftwareSelectionReportRowQuery = <
  TData = TpcSoftwareSelectionReportRowQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareSelectionReportRowQueryVariables,
  options?: UseQueryOptions<TpcSoftwareSelectionReportRowQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareSelectionReportRowQuery, TError, TData>(
    ['tpcSoftwareSelectionReportRow', variables],
    fetcher<
      TpcSoftwareSelectionReportRowQuery,
      TpcSoftwareSelectionReportRowQueryVariables
    >(client, TpcSoftwareSelectionReportRowDocument, variables, headers),
    options
  );

useTpcSoftwareSelectionReportRowQuery.getKey = (
  variables: TpcSoftwareSelectionReportRowQueryVariables
) => ['tpcSoftwareSelectionReportRow', variables];
useTpcSoftwareSelectionReportRowQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareSelectionReportRowQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareSelectionReportRowQuery,
    TpcSoftwareSelectionReportRowQueryVariables
  >(client, TpcSoftwareSelectionReportRowDocument, variables, headers);
export const TpcSoftwareReportMetricClarificationPageDocument = /*#__PURE__*/ `
    query tpcSoftwareReportMetricClarificationPage($shortCode: String!, $metricName: String!, $page: Int, $per: Int, $reportType: Int = 0) {
  tpcSoftwareReportMetricClarificationPage(
    shortCode: $shortCode
    page: $page
    per: $per
    metricName: $metricName
    reportType: $reportType
  ) {
    count
    items {
      content
      createdAt
      id
      metricName
      updatedAt
      user {
        name
        loginBinds {
          account
          avatarUrl
          nickname
          provider
        }
      }
      userId
    }
    page
    totalPage
  }
}
    `;
export const useTpcSoftwareReportMetricClarificationPageQuery = <
  TData = TpcSoftwareReportMetricClarificationPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareReportMetricClarificationPageQueryVariables,
  options?: UseQueryOptions<
    TpcSoftwareReportMetricClarificationPageQuery,
    TError,
    TData
  >,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareReportMetricClarificationPageQuery, TError, TData>(
    ['tpcSoftwareReportMetricClarificationPage', variables],
    fetcher<
      TpcSoftwareReportMetricClarificationPageQuery,
      TpcSoftwareReportMetricClarificationPageQueryVariables
    >(
      client,
      TpcSoftwareReportMetricClarificationPageDocument,
      variables,
      headers
    ),
    options
  );

useTpcSoftwareReportMetricClarificationPageQuery.getKey = (
  variables: TpcSoftwareReportMetricClarificationPageQueryVariables
) => ['tpcSoftwareReportMetricClarificationPage', variables];
useTpcSoftwareReportMetricClarificationPageQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareReportMetricClarificationPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareReportMetricClarificationPageQuery,
    TpcSoftwareReportMetricClarificationPageQueryVariables
  >(
    client,
    TpcSoftwareReportMetricClarificationPageDocument,
    variables,
    headers
  );
export const TpcSoftwareSelectionReportRiskDocument = /*#__PURE__*/ `
    query tpcSoftwareSelectionReportRisk($shortCode: String!) {
  tpcSoftwareSelectionReport(shortCode: $shortCode) {
    codeUrl
    id
    shortCode
    metricClarificationCount {
      complianceDco
      complianceLicense
      complianceLicenseCompatibility
      compliancePackageSig
      ecologyAdoptionAnalysis
      ecologyCodeMaintenance
      ecologyCommunitySupport
      ecologyDependencyAcquisition
      ecologyPatentRisk
      ecologySoftwareQuality
      ecologyAdaptationMethod
      lifecycleVersionLifecycle
      lifecycleVersionNormalization
      lifecycleVersionNumber
      securityBinaryArtifact
      securityHistoryVulnerability
      securityVulnerability
      securityVulnerabilityDisclosure
      securityVulnerabilityResponse
    }
    metricClarificationState {
      complianceDco {
        ...tpcClarificationStateDetail
      }
      complianceLicense {
        ...tpcClarificationStateDetail
      }
      complianceLicenseCompatibility {
        ...tpcClarificationStateDetail
      }
      compliancePackageSig {
        ...tpcClarificationStateDetail
      }
      ecologyAdoptionAnalysis {
        ...tpcClarificationStateDetail
      }
      ecologyCodeMaintenance {
        ...tpcClarificationStateDetail
      }
      ecologyCommunitySupport {
        ...tpcClarificationStateDetail
      }
      ecologyDependencyAcquisition {
        ...tpcClarificationStateDetail
      }
      ecologyPatentRisk {
        ...tpcClarificationStateDetail
      }
      ecologySoftwareQuality {
        ...tpcClarificationStateDetail
      }
      ecologyAdaptationMethod {
        ...tpcClarificationStateDetail
      }
      lifecycleVersionLifecycle {
        ...tpcClarificationStateDetail
      }
      lifecycleVersionNormalization {
        ...tpcClarificationStateDetail
      }
      lifecycleVersionNumber {
        ...tpcClarificationStateDetail
      }
      securityBinaryArtifact {
        ...tpcClarificationStateDetail
      }
      securityHistoryVulnerability {
        ...tpcClarificationStateDetail
      }
      securityVulnerability {
        ...tpcClarificationStateDetail
      }
      securityVulnerabilityDisclosure {
        ...tpcClarificationStateDetail
      }
      securityVulnerabilityResponse {
        ...tpcClarificationStateDetail
      }
    }
    userId
  }
}
    ${TpcClarificationStateDetailFragmentDoc}`;
export const useTpcSoftwareSelectionReportRiskQuery = <
  TData = TpcSoftwareSelectionReportRiskQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareSelectionReportRiskQueryVariables,
  options?: UseQueryOptions<TpcSoftwareSelectionReportRiskQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareSelectionReportRiskQuery, TError, TData>(
    ['tpcSoftwareSelectionReportRisk', variables],
    fetcher<
      TpcSoftwareSelectionReportRiskQuery,
      TpcSoftwareSelectionReportRiskQueryVariables
    >(client, TpcSoftwareSelectionReportRiskDocument, variables, headers),
    options
  );

useTpcSoftwareSelectionReportRiskQuery.getKey = (
  variables: TpcSoftwareSelectionReportRiskQueryVariables
) => ['tpcSoftwareSelectionReportRisk', variables];
useTpcSoftwareSelectionReportRiskQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareSelectionReportRiskQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareSelectionReportRiskQuery,
    TpcSoftwareSelectionReportRiskQueryVariables
  >(client, TpcSoftwareSelectionReportRiskDocument, variables, headers);
export const TpcSoftwareSelectionCommentPageDocument = /*#__PURE__*/ `
    query tpcSoftwareSelectionCommentPage($selectionId: Int!, $page: Int!, $per: Int!, $reportType: Int = 0) {
  tpcSoftwareSelectionCommentPage(
    page: $page
    per: $per
    selectionId: $selectionId
    reportType: $reportType
  ) {
    count
    items {
      content
      createdAt
      id
      updatedAt
      user {
        name
        loginBinds {
          account
          avatarUrl
          nickname
          provider
        }
      }
      userId
    }
    page
    totalPage
  }
}
    `;
export const useTpcSoftwareSelectionCommentPageQuery = <
  TData = TpcSoftwareSelectionCommentPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareSelectionCommentPageQueryVariables,
  options?: UseQueryOptions<
    TpcSoftwareSelectionCommentPageQuery,
    TError,
    TData
  >,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareSelectionCommentPageQuery, TError, TData>(
    ['tpcSoftwareSelectionCommentPage', variables],
    fetcher<
      TpcSoftwareSelectionCommentPageQuery,
      TpcSoftwareSelectionCommentPageQueryVariables
    >(client, TpcSoftwareSelectionCommentPageDocument, variables, headers),
    options
  );

useTpcSoftwareSelectionCommentPageQuery.getKey = (
  variables: TpcSoftwareSelectionCommentPageQueryVariables
) => ['tpcSoftwareSelectionCommentPage', variables];
useTpcSoftwareSelectionCommentPageQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareSelectionCommentPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareSelectionCommentPageQuery,
    TpcSoftwareSelectionCommentPageQueryVariables
  >(client, TpcSoftwareSelectionCommentPageDocument, variables, headers);
export const TpcSoftwareSelectionDocument = /*#__PURE__*/ `
    query tpcSoftwareSelection($selectionId: Int!) {
  tpcSoftwareSelection(selectionId: $selectionId) {
    commentCompliancePermission
    commentLegalPermission
    commentCommitterPermission
    commentCount
    commentSigLeadPermission
    commentQaPermission
    commentState {
      createdAt
      id
      memberType
      state
      updatedAt
      user {
        name
        loginBinds {
          account
          avatarUrl
          nickname
          provider
        }
      }
      userId
    }
    targetSoftware
    reason
    demandSource
    functionalDescription
    incubationTime
    committers
    isSameTypeCheck
    sameTypeSoftwareName
    sigLeadCount
    state
    riskCount
    legalCount
    complianceCount
    confirmedCount
    committerCount
    awaitingClarificationCount
    awaitingConfirmationCount
    clarifiedCount
    repoUrl
    tpcSoftwareSelectionReports {
      adaptationMethod
      license
      codeUrl
    }
  }
}
    `;
export const useTpcSoftwareSelectionQuery = <
  TData = TpcSoftwareSelectionQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareSelectionQueryVariables,
  options?: UseQueryOptions<TpcSoftwareSelectionQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareSelectionQuery, TError, TData>(
    ['tpcSoftwareSelection', variables],
    fetcher<TpcSoftwareSelectionQuery, TpcSoftwareSelectionQueryVariables>(
      client,
      TpcSoftwareSelectionDocument,
      variables,
      headers
    ),
    options
  );

useTpcSoftwareSelectionQuery.getKey = (
  variables: TpcSoftwareSelectionQueryVariables
) => ['tpcSoftwareSelection', variables];
useTpcSoftwareSelectionQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareSelectionQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<TpcSoftwareSelectionQuery, TpcSoftwareSelectionQueryVariables>(
    client,
    TpcSoftwareSelectionDocument,
    variables,
    headers
  );
export const TpcSoftwareGraduationReportPageDocument = /*#__PURE__*/ `
    query tpcSoftwareGraduationReportPage($label: String!, $level: String = "repo", $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!]) {
  tpcSoftwareGraduationReportPage(
    page: $page
    per: $per
    label: $label
    level: $level
    filterOpts: $filterOpts
    sortOpts: $sortOpts
  ) {
    count
    items {
      adaptationMethod
      architectureDiagrams {
        filename
        id
        url
      }
      isIncubation
      roundUpstream
      codeUrl
      id
      name
      upstreamCodeUrl
      lifecyclePolicy
      ohCommitSha
      shortCode
      programmingLanguage
      user {
        name
        loginBinds {
          account
          nickname
          provider
        }
      }
      userId
      graduationReportMetric {
        ...tpcSoftwareGraduationReportMetric
      }
      tpcSoftwareSig {
        ...tpcSoftwareSig
      }
    }
    page
    totalPage
  }
}
    ${TpcSoftwareGraduationReportMetricFragmentDoc}
${TpcSoftwareSigFragmentDoc}`;
export const useTpcSoftwareGraduationReportPageQuery = <
  TData = TpcSoftwareGraduationReportPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareGraduationReportPageQueryVariables,
  options?: UseQueryOptions<
    TpcSoftwareGraduationReportPageQuery,
    TError,
    TData
  >,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareGraduationReportPageQuery, TError, TData>(
    ['tpcSoftwareGraduationReportPage', variables],
    fetcher<
      TpcSoftwareGraduationReportPageQuery,
      TpcSoftwareGraduationReportPageQueryVariables
    >(client, TpcSoftwareGraduationReportPageDocument, variables, headers),
    options
  );

useTpcSoftwareGraduationReportPageQuery.getKey = (
  variables: TpcSoftwareGraduationReportPageQueryVariables
) => ['tpcSoftwareGraduationReportPage', variables];
useTpcSoftwareGraduationReportPageQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareGraduationReportPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareGraduationReportPageQuery,
    TpcSoftwareGraduationReportPageQueryVariables
  >(client, TpcSoftwareGraduationReportPageDocument, variables, headers);
export const TpcSoftwareGraduationReportDocument = /*#__PURE__*/ `
    query tpcSoftwareGraduationReport($shortCode: String!) {
  tpcSoftwareGraduationReport(shortCode: $shortCode) {
    adaptationMethod
    architectureDiagrams {
      filename
      id
      url
    }
    codeCount
    license
    lifecyclePolicy
    codeUrl
    id
    name
    ohCommitSha
    upstreamCodeUrl
    shortCode
    programmingLanguage
    user {
      name
      loginBinds {
        account
        nickname
        provider
      }
    }
    userId
    graduationReportMetric {
      ...tpcSoftwareGraduationReportMetric
      ...tpcSoftwareGraduationReportMetricDetail
    }
    tpcSoftwareSig {
      ...tpcSoftwareSig
    }
  }
  tpcSoftwareReportMetricClarificationPermission(
    shortCode: $shortCode
    reportType: 1
  ) {
    clarificationCommitterPermission
    clarificationSigLeadPermission
    clarificationCompliancePermission
    clarificationLegalPermission
  }
}
    ${TpcSoftwareGraduationReportMetricFragmentDoc}
${TpcSoftwareGraduationReportMetricDetailFragmentDoc}
${TpcSoftwareSigFragmentDoc}`;
export const useTpcSoftwareGraduationReportQuery = <
  TData = TpcSoftwareGraduationReportQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareGraduationReportQueryVariables,
  options?: UseQueryOptions<TpcSoftwareGraduationReportQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareGraduationReportQuery, TError, TData>(
    ['tpcSoftwareGraduationReport', variables],
    fetcher<
      TpcSoftwareGraduationReportQuery,
      TpcSoftwareGraduationReportQueryVariables
    >(client, TpcSoftwareGraduationReportDocument, variables, headers),
    options
  );

useTpcSoftwareGraduationReportQuery.getKey = (
  variables: TpcSoftwareGraduationReportQueryVariables
) => ['tpcSoftwareGraduationReport', variables];
useTpcSoftwareGraduationReportQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareGraduationReportQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareGraduationReportQuery,
    TpcSoftwareGraduationReportQueryVariables
  >(client, TpcSoftwareGraduationReportDocument, variables, headers);
export const TpcSoftwareGraduationPageDocument = /*#__PURE__*/ `
    query tpcSoftwareGraduationPage($label: String!, $level: String = "repo", $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!]) {
  tpcSoftwareGraduationPage(
    page: $page
    per: $per
    label: $label
    level: $level
    filterOpts: $filterOpts
    sortOpts: $sortOpts
  ) {
    count
    items {
      id
      createdAt
      updatedAt
      demandSource
      committers
      incubationStartTime
      incubationTime
      issueUrl
      state
      tpcSoftwareGraduationReportIds
      functionalDescription
      tpcSoftwareGraduationReports {
        name
        shortCode
        codeUrl
        license
        codeCount
      }
      user {
        name
        loginBinds {
          account
          nickname
          provider
        }
      }
      userId
    }
    page
    totalPage
  }
}
    `;
export const useTpcSoftwareGraduationPageQuery = <
  TData = TpcSoftwareGraduationPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareGraduationPageQueryVariables,
  options?: UseQueryOptions<TpcSoftwareGraduationPageQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareGraduationPageQuery, TError, TData>(
    ['tpcSoftwareGraduationPage', variables],
    fetcher<
      TpcSoftwareGraduationPageQuery,
      TpcSoftwareGraduationPageQueryVariables
    >(client, TpcSoftwareGraduationPageDocument, variables, headers),
    options
  );

useTpcSoftwareGraduationPageQuery.getKey = (
  variables: TpcSoftwareGraduationPageQueryVariables
) => ['tpcSoftwareGraduationPage', variables];
useTpcSoftwareGraduationPageQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareGraduationPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareGraduationPageQuery,
    TpcSoftwareGraduationPageQueryVariables
  >(client, TpcSoftwareGraduationPageDocument, variables, headers);
export const TpcSoftwareGraduationDocument = /*#__PURE__*/ `
    query tpcSoftwareGraduation($graduationId: Int!) {
  tpcSoftwareGraduation(graduationId: $graduationId) {
    commentCompliancePermission
    commentLegalPermission
    commentCommitterPermission
    commentCount
    commentSigLeadPermission
    commentQaPermission
    commentState {
      createdAt
      id
      memberType
      state
      updatedAt
      user {
        name
        loginBinds {
          account
          avatarUrl
          nickname
          provider
        }
      }
      userId
    }
    demandSource
    incubationTime
    committers
    functionalDescription
    sigLeadCount
    state
    riskCount
    legalCount
    complianceCount
    confirmedCount
    committerCount
    awaitingClarificationCount
    awaitingConfirmationCount
    clarifiedCount
    tpcSoftwareGraduationReports {
      adaptationMethod
      license
      codeUrl
      name
      codeCount
    }
    userId
  }
}
    `;
export const useTpcSoftwareGraduationQuery = <
  TData = TpcSoftwareGraduationQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareGraduationQueryVariables,
  options?: UseQueryOptions<TpcSoftwareGraduationQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareGraduationQuery, TError, TData>(
    ['tpcSoftwareGraduation', variables],
    fetcher<TpcSoftwareGraduationQuery, TpcSoftwareGraduationQueryVariables>(
      client,
      TpcSoftwareGraduationDocument,
      variables,
      headers
    ),
    options
  );

useTpcSoftwareGraduationQuery.getKey = (
  variables: TpcSoftwareGraduationQueryVariables
) => ['tpcSoftwareGraduation', variables];
useTpcSoftwareGraduationQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareGraduationQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<TpcSoftwareGraduationQuery, TpcSoftwareGraduationQueryVariables>(
    client,
    TpcSoftwareGraduationDocument,
    variables,
    headers
  );
export const TpcSoftwareGraduationReportRiskDocument = /*#__PURE__*/ `
    query tpcSoftwareGraduationReportRisk($shortCode: String!) {
  tpcSoftwareGraduationReport(shortCode: $shortCode) {
    codeUrl
    id
    shortCode
    metricClarificationCount {
      complianceCopyrightStatement
      complianceCopyrightStatementAntiTamper
      complianceDco
      complianceLicense
      complianceLicenseCompatibility
      complianceSnippetReference
      ecologyBuild
      ecologyBuildDoc
      ecologyCi
      ecologyCodeReview
      ecologyCodeUpstream
      ecologyInterfaceDoc
      ecologyIssueManagement
      ecologyIssueResponseRatio
      ecologyIssueResponseTime
      ecologyMaintainerDoc
      ecologyReadme
      ecologyTestCoverage
      lifecycleReleaseNote
      lifecycleStatement
      securityBinaryArtifact
      securityPackageSig
      securityVulnerability
    }
    metricClarificationState {
      complianceCopyrightStatement {
        ...tpcClarificationStateDetail
      }
      complianceCopyrightStatementAntiTamper {
        ...tpcClarificationStateDetail
      }
      complianceDco {
        ...tpcClarificationStateDetail
      }
      complianceLicense {
        ...tpcClarificationStateDetail
      }
      complianceLicenseCompatibility {
        ...tpcClarificationStateDetail
      }
      complianceSnippetReference {
        ...tpcClarificationStateDetail
      }
      ecologyBuild {
        ...tpcClarificationStateDetail
      }
      ecologyBuildDoc {
        ...tpcClarificationStateDetail
      }
      ecologyCi {
        ...tpcClarificationStateDetail
      }
      ecologyCodeReview {
        ...tpcClarificationStateDetail
      }
      ecologyCodeUpstream {
        ...tpcClarificationStateDetail
      }
      ecologyInterfaceDoc {
        ...tpcClarificationStateDetail
      }
      ecologyIssueManagement {
        ...tpcClarificationStateDetail
      }
      ecologyIssueResponseRatio {
        ...tpcClarificationStateDetail
      }
      ecologyIssueResponseTime {
        ...tpcClarificationStateDetail
      }
      ecologyMaintainerDoc {
        ...tpcClarificationStateDetail
      }
      ecologyReadme {
        ...tpcClarificationStateDetail
      }
      ecologyTestCoverage {
        ...tpcClarificationStateDetail
      }
      lifecycleReleaseNote {
        ...tpcClarificationStateDetail
      }
      lifecycleStatement {
        ...tpcClarificationStateDetail
      }
      securityBinaryArtifact {
        ...tpcClarificationStateDetail
      }
      securityPackageSig {
        ...tpcClarificationStateDetail
      }
      securityVulnerability {
        ...tpcClarificationStateDetail
      }
    }
    userId
  }
}
    ${TpcClarificationStateDetailFragmentDoc}`;
export const useTpcSoftwareGraduationReportRiskQuery = <
  TData = TpcSoftwareGraduationReportRiskQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareGraduationReportRiskQueryVariables,
  options?: UseQueryOptions<
    TpcSoftwareGraduationReportRiskQuery,
    TError,
    TData
  >,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareGraduationReportRiskQuery, TError, TData>(
    ['tpcSoftwareGraduationReportRisk', variables],
    fetcher<
      TpcSoftwareGraduationReportRiskQuery,
      TpcSoftwareGraduationReportRiskQueryVariables
    >(client, TpcSoftwareGraduationReportRiskDocument, variables, headers),
    options
  );

useTpcSoftwareGraduationReportRiskQuery.getKey = (
  variables: TpcSoftwareGraduationReportRiskQueryVariables
) => ['tpcSoftwareGraduationReportRisk', variables];
useTpcSoftwareGraduationReportRiskQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareGraduationReportRiskQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareGraduationReportRiskQuery,
    TpcSoftwareGraduationReportRiskQueryVariables
  >(client, TpcSoftwareGraduationReportRiskDocument, variables, headers);
export const TpcSoftwareGraduationReportRowDocument = /*#__PURE__*/ `
    query tpcSoftwareGraduationReportRow($shortCode: String!) {
  tpcSoftwareGraduationReport(shortCode: $shortCode) {
    id
    graduationReportMetricRaw {
      ...tpcSoftwareGraduationReportMetricRaw
    }
  }
}
    ${TpcSoftwareGraduationReportMetricRawFragmentDoc}`;
export const useTpcSoftwareGraduationReportRowQuery = <
  TData = TpcSoftwareGraduationReportRowQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareGraduationReportRowQueryVariables,
  options?: UseQueryOptions<TpcSoftwareGraduationReportRowQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareGraduationReportRowQuery, TError, TData>(
    ['tpcSoftwareGraduationReportRow', variables],
    fetcher<
      TpcSoftwareGraduationReportRowQuery,
      TpcSoftwareGraduationReportRowQueryVariables
    >(client, TpcSoftwareGraduationReportRowDocument, variables, headers),
    options
  );

useTpcSoftwareGraduationReportRowQuery.getKey = (
  variables: TpcSoftwareGraduationReportRowQueryVariables
) => ['tpcSoftwareGraduationReportRow', variables];
useTpcSoftwareGraduationReportRowQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareGraduationReportRowQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareGraduationReportRowQuery,
    TpcSoftwareGraduationReportRowQueryVariables
  >(client, TpcSoftwareGraduationReportRowDocument, variables, headers);
export const TpcSoftwareSelectionSearchDocument = /*#__PURE__*/ `
    query tpcSoftwareSelectionSearch($label: String!, $level: String = "repo", $keyword: String!, $selectionType: Int!) {
  tpcSoftwareSelectionSearch(
    label: $label
    level: $level
    keyword: $keyword
    selectionType: $selectionType
  ) {
    repoUrl
    tpcSoftwareSelectionReport {
      name
      codeUrl
      tpcSoftwareSigId
      programmingLanguage
      adaptationMethod
    }
  }
}
    `;
export const useTpcSoftwareSelectionSearchQuery = <
  TData = TpcSoftwareSelectionSearchQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareSelectionSearchQueryVariables,
  options?: UseQueryOptions<TpcSoftwareSelectionSearchQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareSelectionSearchQuery, TError, TData>(
    ['tpcSoftwareSelectionSearch', variables],
    fetcher<
      TpcSoftwareSelectionSearchQuery,
      TpcSoftwareSelectionSearchQueryVariables
    >(client, TpcSoftwareSelectionSearchDocument, variables, headers),
    options
  );

useTpcSoftwareSelectionSearchQuery.getKey = (
  variables: TpcSoftwareSelectionSearchQueryVariables
) => ['tpcSoftwareSelectionSearch', variables];
useTpcSoftwareSelectionSearchQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareSelectionSearchQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareSelectionSearchQuery,
    TpcSoftwareSelectionSearchQueryVariables
  >(client, TpcSoftwareSelectionSearchDocument, variables, headers);
export const TpcSoftwareMyCreationOverviewDocument = /*#__PURE__*/ `
    query tpcSoftwareMyCreationOverview($label: String!, $level: String = "repo") {
  tpcSoftwareMyCreationOverview(label: $label, level: $level) {
    awaitingClarificationCount
    awaitingConfirmationCount
    awaitingReviewCount
    completedCount
    graduationCount
    incubationCount
    rejectedCount
    totalCount
  }
}
    `;
export const useTpcSoftwareMyCreationOverviewQuery = <
  TData = TpcSoftwareMyCreationOverviewQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareMyCreationOverviewQueryVariables,
  options?: UseQueryOptions<TpcSoftwareMyCreationOverviewQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareMyCreationOverviewQuery, TError, TData>(
    ['tpcSoftwareMyCreationOverview', variables],
    fetcher<
      TpcSoftwareMyCreationOverviewQuery,
      TpcSoftwareMyCreationOverviewQueryVariables
    >(client, TpcSoftwareMyCreationOverviewDocument, variables, headers),
    options
  );

useTpcSoftwareMyCreationOverviewQuery.getKey = (
  variables: TpcSoftwareMyCreationOverviewQueryVariables
) => ['tpcSoftwareMyCreationOverview', variables];
useTpcSoftwareMyCreationOverviewQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareMyCreationOverviewQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareMyCreationOverviewQuery,
    TpcSoftwareMyCreationOverviewQueryVariables
  >(client, TpcSoftwareMyCreationOverviewDocument, variables, headers);
export const TpcSoftwareMyReviewOverviewDocument = /*#__PURE__*/ `
    query tpcSoftwareMyReviewOverview($label: String!, $level: String = "repo") {
  tpcSoftwareMyReviewOverview(label: $label, level: $level) {
    awaitingClarificationCount
    awaitingConfirmationCount
    awaitingReviewCount
    completedCount
    graduationCount
    incubationCount
    rejectedCount
    totalCount
  }
}
    `;
export const useTpcSoftwareMyReviewOverviewQuery = <
  TData = TpcSoftwareMyReviewOverviewQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareMyReviewOverviewQueryVariables,
  options?: UseQueryOptions<TpcSoftwareMyReviewOverviewQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareMyReviewOverviewQuery, TError, TData>(
    ['tpcSoftwareMyReviewOverview', variables],
    fetcher<
      TpcSoftwareMyReviewOverviewQuery,
      TpcSoftwareMyReviewOverviewQueryVariables
    >(client, TpcSoftwareMyReviewOverviewDocument, variables, headers),
    options
  );

useTpcSoftwareMyReviewOverviewQuery.getKey = (
  variables: TpcSoftwareMyReviewOverviewQueryVariables
) => ['tpcSoftwareMyReviewOverview', variables];
useTpcSoftwareMyReviewOverviewQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareMyReviewOverviewQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareMyReviewOverviewQuery,
    TpcSoftwareMyReviewOverviewQueryVariables
  >(client, TpcSoftwareMyReviewOverviewDocument, variables, headers);
export const TpcSoftwareMyCreationPageDocument = /*#__PURE__*/ `
    query tpcSoftwareMyCreationPage($label: String!, $level: String = "repo", $page: Int, $per: Int, $applicationType: Int!, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!]) {
  tpcSoftwareMyCreationPage(
    page: $page
    per: $per
    label: $label
    level: $level
    applicationType: $applicationType
    filterOpts: $filterOpts
    sortOpts: $sortOpts
  ) {
    count
    items {
      applicationType
      awaitingClarificationCount
      awaitingConfirmationCount
      clarifiedCount
      committerCount
      complianceCount
      confirmedCount
      createdAt
      id
      issueUrl
      legalCount
      name
      riskCount
      sigLeadCount
      state
      softwareReportShortCodes
      targetSoftwareReportId
      updatedAt
      user {
        name
        loginBinds {
          account
          nickname
          provider
        }
      }
      userId
    }
    page
    totalPage
  }
}
    `;
export const useTpcSoftwareMyCreationPageQuery = <
  TData = TpcSoftwareMyCreationPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareMyCreationPageQueryVariables,
  options?: UseQueryOptions<TpcSoftwareMyCreationPageQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareMyCreationPageQuery, TError, TData>(
    ['tpcSoftwareMyCreationPage', variables],
    fetcher<
      TpcSoftwareMyCreationPageQuery,
      TpcSoftwareMyCreationPageQueryVariables
    >(client, TpcSoftwareMyCreationPageDocument, variables, headers),
    options
  );

useTpcSoftwareMyCreationPageQuery.getKey = (
  variables: TpcSoftwareMyCreationPageQueryVariables
) => ['tpcSoftwareMyCreationPage', variables];
useTpcSoftwareMyCreationPageQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareMyCreationPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    TpcSoftwareMyCreationPageQuery,
    TpcSoftwareMyCreationPageQueryVariables
  >(client, TpcSoftwareMyCreationPageDocument, variables, headers);
export const TpcSoftwareMyReviewPageDocument = /*#__PURE__*/ `
    query tpcSoftwareMyReviewPage($label: String!, $level: String = "repo", $page: Int, $per: Int, $applicationType: Int!, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!]) {
  tpcSoftwareMyReviewPage(
    page: $page
    per: $per
    label: $label
    level: $level
    applicationType: $applicationType
    filterOpts: $filterOpts
    sortOpts: $sortOpts
  ) {
    count
    items {
      applicationType
      awaitingClarificationCount
      awaitingConfirmationCount
      clarifiedCount
      committerCount
      complianceCount
      confirmedCount
      createdAt
      id
      issueUrl
      legalCount
      name
      riskCount
      sigLeadCount
      state
      softwareReportShortCodes
      targetSoftwareReportId
      updatedAt
      user {
        name
        loginBinds {
          account
          nickname
          provider
        }
      }
      userId
    }
    page
    totalPage
  }
}
    `;
export const useTpcSoftwareMyReviewPageQuery = <
  TData = TpcSoftwareMyReviewPageQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: TpcSoftwareMyReviewPageQueryVariables,
  options?: UseQueryOptions<TpcSoftwareMyReviewPageQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TpcSoftwareMyReviewPageQuery, TError, TData>(
    ['tpcSoftwareMyReviewPage', variables],
    fetcher<
      TpcSoftwareMyReviewPageQuery,
      TpcSoftwareMyReviewPageQueryVariables
    >(client, TpcSoftwareMyReviewPageDocument, variables, headers),
    options
  );

useTpcSoftwareMyReviewPageQuery.getKey = (
  variables: TpcSoftwareMyReviewPageQueryVariables
) => ['tpcSoftwareMyReviewPage', variables];
useTpcSoftwareMyReviewPageQuery.fetcher = (
  client: GraphQLClient,
  variables: TpcSoftwareMyReviewPageQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<TpcSoftwareMyReviewPageQuery, TpcSoftwareMyReviewPageQueryVariables>(
    client,
    TpcSoftwareMyReviewPageDocument,
    variables,
    headers
  );
export const UserinfoDocument = /*#__PURE__*/ `
    query userinfo {
  currentUser {
    id
    name
    roleLevel
    email
    language
    emailVerified
    loginBinds {
      account
      avatarUrl
      nickname
      provider
    }
    contributingOrgs {
      firstDate
      lastDate
      orgName
      platformType
    }
  }
}
    `;
export const useUserinfoQuery = <TData = UserinfoQuery, TError = unknown>(
  client: GraphQLClient,
  variables?: UserinfoQueryVariables,
  options?: UseQueryOptions<UserinfoQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<UserinfoQuery, TError, TData>(
    variables === undefined ? ['userinfo'] : ['userinfo', variables],
    fetcher<UserinfoQuery, UserinfoQueryVariables>(
      client,
      UserinfoDocument,
      variables,
      headers
    ),
    options
  );

useUserinfoQuery.getKey = (variables?: UserinfoQueryVariables) =>
  variables === undefined ? ['userinfo'] : ['userinfo', variables];
useUserinfoQuery.fetcher = (
  client: GraphQLClient,
  variables?: UserinfoQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<UserinfoQuery, UserinfoQueryVariables>(
    client,
    UserinfoDocument,
    variables,
    headers
  );
export const SubscriptionsDocument = /*#__PURE__*/ `
    query subscriptions($page: Int!, $per: Int!) {
  currentUser {
    subscriptions(page: $page, per: $per) {
      count
      page
      totalPage
      items {
        count
        id
        label
        level
        status
        statusUpdatedAt
        collectAt
        completeAt
      }
    }
  }
}
    `;
export const useSubscriptionsQuery = <
  TData = SubscriptionsQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: SubscriptionsQueryVariables,
  options?: UseQueryOptions<SubscriptionsQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<SubscriptionsQuery, TError, TData>(
    ['subscriptions', variables],
    fetcher<SubscriptionsQuery, SubscriptionsQueryVariables>(
      client,
      SubscriptionsDocument,
      variables,
      headers
    ),
    options
  );

useSubscriptionsQuery.getKey = (variables: SubscriptionsQueryVariables) => [
  'subscriptions',
  variables,
];
useSubscriptionsQuery.fetcher = (
  client: GraphQLClient,
  variables: SubscriptionsQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<SubscriptionsQuery, SubscriptionsQueryVariables>(
    client,
    SubscriptionsDocument,
    variables,
    headers
  );
export const SubscriptionCountDocument = /*#__PURE__*/ `
    query subscriptionCount($label: String!, $level: String!) {
  subjectSubscriptionCount(label: $label, level: $level) {
    count
    subscribed
  }
}
    `;
export const useSubscriptionCountQuery = <
  TData = SubscriptionCountQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: SubscriptionCountQueryVariables,
  options?: UseQueryOptions<SubscriptionCountQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<SubscriptionCountQuery, TError, TData>(
    ['subscriptionCount', variables],
    fetcher<SubscriptionCountQuery, SubscriptionCountQueryVariables>(
      client,
      SubscriptionCountDocument,
      variables,
      headers
    ),
    options
  );

useSubscriptionCountQuery.getKey = (
  variables: SubscriptionCountQueryVariables
) => ['subscriptionCount', variables];
useSubscriptionCountQuery.fetcher = (
  client: GraphQLClient,
  variables: SubscriptionCountQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<SubscriptionCountQuery, SubscriptionCountQueryVariables>(
    client,
    SubscriptionCountDocument,
    variables,
    headers
  );
export const StatusDocument = /*#__PURE__*/ `
    query status($label: String!) {
  analysisStatus(label: $label)
}
    `;
export const useStatusQuery = <TData = StatusQuery, TError = unknown>(
  client: GraphQLClient,
  variables: StatusQueryVariables,
  options?: UseQueryOptions<StatusQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<StatusQuery, TError, TData>(
    ['status', variables],
    fetcher<StatusQuery, StatusQueryVariables>(
      client,
      StatusDocument,
      variables,
      headers
    ),
    options
  );

useStatusQuery.getKey = (variables: StatusQueryVariables) => [
  'status',
  variables,
];
useStatusQuery.fetcher = (
  client: GraphQLClient,
  variables: StatusQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<StatusQuery, StatusQueryVariables>(
    client,
    StatusDocument,
    variables,
    headers
  );
export const StatusVerifyDocument = /*#__PURE__*/ `
    query statusVerify($label: String, $shortCode: String) {
  analysisStatusVerify(label: $label, shortCode: $shortCode) {
    label
    level
    shortCode
    status
    collections
  }
}
    `;
export const useStatusVerifyQuery = <
  TData = StatusVerifyQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables?: StatusVerifyQueryVariables,
  options?: UseQueryOptions<StatusVerifyQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<StatusVerifyQuery, TError, TData>(
    variables === undefined ? ['statusVerify'] : ['statusVerify', variables],
    fetcher<StatusVerifyQuery, StatusVerifyQueryVariables>(
      client,
      StatusVerifyDocument,
      variables,
      headers
    ),
    options
  );

useStatusVerifyQuery.getKey = (variables?: StatusVerifyQueryVariables) =>
  variables === undefined ? ['statusVerify'] : ['statusVerify', variables];
useStatusVerifyQuery.fetcher = (
  client: GraphQLClient,
  variables?: StatusVerifyQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<StatusVerifyQuery, StatusVerifyQueryVariables>(
    client,
    StatusVerifyDocument,
    variables,
    headers
  );
export const SearchDocument = /*#__PURE__*/ `
    query search($keyword: String!, $level: String) {
  fuzzySearch(keyword: $keyword, level: $level) {
    level
    label
    status
    shortCode
    collections
  }
}
    `;
export const useSearchQuery = <TData = SearchQuery, TError = unknown>(
  client: GraphQLClient,
  variables: SearchQueryVariables,
  options?: UseQueryOptions<SearchQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<SearchQuery, TError, TData>(
    ['search', variables],
    fetcher<SearchQuery, SearchQueryVariables>(
      client,
      SearchDocument,
      variables,
      headers
    ),
    options
  );

useSearchQuery.getKey = (variables: SearchQueryVariables) => [
  'search',
  variables,
];
useSearchQuery.fetcher = (
  client: GraphQLClient,
  variables: SearchQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<SearchQuery, SearchQueryVariables>(
    client,
    SearchDocument,
    variables,
    headers
  );
export const LatestMetricsDocument = /*#__PURE__*/ `
    query latestMetrics($label: String!, $level: String) {
  latestMetrics(level: $level, label: $label) {
    activityScore
    activityScoreUpdatedAt
    codeQualityGuarantee
    codeQualityGuaranteeUpdatedAt
    communitySupportScore
    communitySupportScoreUpdatedAt
    label
    level
    shortCode
    organizationsActivity
    organizationsActivityUpdatedAt
    reposCount
  }
}
    `;
export const useLatestMetricsQuery = <
  TData = LatestMetricsQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: LatestMetricsQueryVariables,
  options?: UseQueryOptions<LatestMetricsQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<LatestMetricsQuery, TError, TData>(
    ['latestMetrics', variables],
    fetcher<LatestMetricsQuery, LatestMetricsQueryVariables>(
      client,
      LatestMetricsDocument,
      variables,
      headers
    ),
    options
  );

useLatestMetricsQuery.getKey = (variables: LatestMetricsQueryVariables) => [
  'latestMetrics',
  variables,
];
useLatestMetricsQuery.fetcher = (
  client: GraphQLClient,
  variables: LatestMetricsQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<LatestMetricsQuery, LatestMetricsQueryVariables>(
    client,
    LatestMetricsDocument,
    variables,
    headers
  );
export const CommunityReposDocument = /*#__PURE__*/ `
    query communityRepos($label: String!, $page: Int, $per: Int, $type: String) {
  communityOverview(label: $label, page: $page, per: $per, type: $type) {
    projectsCount
    communityOrgUrl
    trends {
      backend
      name
      path
      type
      shortCode
      metricActivity {
        activityScore
        grimoireCreationDate
      }
    }
  }
}
    `;
export const useCommunityReposQuery = <
  TData = CommunityReposQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: CommunityReposQueryVariables,
  options?: UseQueryOptions<CommunityReposQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CommunityReposQuery, TError, TData>(
    ['communityRepos', variables],
    fetcher<CommunityReposQuery, CommunityReposQueryVariables>(
      client,
      CommunityReposDocument,
      variables,
      headers
    ),
    options
  );

useCommunityReposQuery.getKey = (variables: CommunityReposQueryVariables) => [
  'communityRepos',
  variables,
];
useCommunityReposQuery.fetcher = (
  client: GraphQLClient,
  variables: CommunityReposQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CommunityReposQuery, CommunityReposQueryVariables>(
    client,
    CommunityReposDocument,
    variables,
    headers
  );
export const CommunityReposSearchDocument = /*#__PURE__*/ `
    query communityReposSearch($label: String!, $page: Int, $per: Int, $type: String) {
  communityRepos(label: $label, page: $page, per: $per, type: $type) {
    count
    items {
      label
    }
    page
    totalPage
  }
}
    `;
export const useCommunityReposSearchQuery = <
  TData = CommunityReposSearchQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: CommunityReposSearchQueryVariables,
  options?: UseQueryOptions<CommunityReposSearchQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CommunityReposSearchQuery, TError, TData>(
    ['communityReposSearch', variables],
    fetcher<CommunityReposSearchQuery, CommunityReposSearchQueryVariables>(
      client,
      CommunityReposSearchDocument,
      variables,
      headers
    ),
    options
  );

useCommunityReposSearchQuery.getKey = (
  variables: CommunityReposSearchQueryVariables
) => ['communityReposSearch', variables];
useCommunityReposSearchQuery.fetcher = (
  client: GraphQLClient,
  variables: CommunityReposSearchQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CommunityReposSearchQuery, CommunityReposSearchQueryVariables>(
    client,
    CommunityReposSearchDocument,
    variables,
    headers
  );
export const MetricDocument = /*#__PURE__*/ `
    query metric($label: String!, $level: String = "repo", $start: ISO8601DateTime, $end: ISO8601DateTime, $repoType: String) {
  metricCodequality(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    activeC1PrCommentsContributorCount
    activeC1PrCreateContributorCount
    activeC2ContributorCount
    codeMergeRatio
    codeMergedCount
    codeQualityGuarantee
    codeReviewRatio
    codeReviewedCount
    commitFrequency
    commitFrequencyInside
    contributorCount
    gitPrLinkedRatio
    grimoireCreationDate
    isMaintained
    label
    level
    shortCode
    type
    linesAddedFrequency
    linesRemovedFrequency
    locFrequency
    prCommitCount
    prCommitLinkedCount
    prCount
    prIssueLinkedCount
    prIssueLinkedRatio
  }
  metricCommunity(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    bugIssueOpenTimeAvg
    bugIssueOpenTimeMid
    closedPrsCount
    codeReviewCount
    commentFrequency
    communitySupportScore
    grimoireCreationDate
    issueFirstReponseAvg
    issueFirstReponseMid
    issueOpenTimeAvg
    issueOpenTimeMid
    label
    level
    shortCode
    type
    prOpenTimeAvg
    prOpenTimeMid
    updatedIssuesCount
  }
  metricActivity(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    activeC1IssueCommentsContributorCount
    activeC1IssueCreateContributorCount
    activeC1PrCommentsContributorCount
    activeC1PrCreateContributorCount
    activeC2ContributorCount
    activityScore
    orgCount
    closedIssuesCount
    codeReviewCount
    commentFrequency
    commitFrequency
    contributorCount
    grimoireCreationDate
    label
    level
    shortCode
    type
    recentReleasesCount
    updatedIssuesCount
    updatedSince
  }
  metricGroupActivity(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    commitFrequency
    contributionLast
    contributorCount
    grimoireCreationDate
    label
    level
    shortCode
    type
    orgCount
    organizationsActivity
  }
}
    `;
export const useMetricQuery = <TData = MetricQuery, TError = unknown>(
  client: GraphQLClient,
  variables: MetricQueryVariables,
  options?: UseQueryOptions<MetricQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<MetricQuery, TError, TData>(
    ['metric', variables],
    fetcher<MetricQuery, MetricQueryVariables>(
      client,
      MetricDocument,
      variables,
      headers
    ),
    options
  );

useMetricQuery.getKey = (variables: MetricQueryVariables) => [
  'metric',
  variables,
];
useMetricQuery.fetcher = (
  client: GraphQLClient,
  variables: MetricQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<MetricQuery, MetricQueryVariables>(
    client,
    MetricDocument,
    variables,
    headers
  );
export const SummaryDocument = /*#__PURE__*/ `
    query summary($start: ISO8601DateTime, $end: ISO8601DateTime) {
  summaryActivity(beginDate: $start, endDate: $end) {
    activeC1IssueCommentsContributorCount {
      ...metricStat
    }
    activeC1IssueCreateContributorCount {
      ...metricStat
    }
    activeC1PrCommentsContributorCount {
      ...metricStat
    }
    activeC1PrCreateContributorCount {
      ...metricStat
    }
    activeC2ContributorCount {
      ...metricStat
    }
    activityScore {
      ...metricStat
    }
    closedIssuesCount {
      ...metricStat
    }
    codeReviewCount {
      ...metricStat
    }
    commentFrequency {
      ...metricStat
    }
    commitFrequency {
      ...metricStat
    }
    contributorCount {
      ...metricStat
    }
    grimoireCreationDate
    orgCount {
      ...metricStat
    }
    recentReleasesCount {
      ...metricStat
    }
    updatedIssuesCount {
      ...metricStat
    }
    updatedSince {
      ...metricStat
    }
  }
  summaryCodequality(beginDate: $start, endDate: $end) {
    activeC1PrCommentsContributorCount {
      ...metricStat
    }
    activeC1PrCreateContributorCount {
      ...metricStat
    }
    activeC2ContributorCount {
      ...metricStat
    }
    codeMergeRatio {
      ...metricStat
    }
    codeMergedCount {
      ...metricStat
    }
    codeQualityGuarantee {
      ...metricStat
    }
    codeReviewRatio {
      ...metricStat
    }
    codeReviewedCount {
      ...metricStat
    }
    commitFrequency {
      ...metricStat
    }
    commitFrequencyInside {
      ...metricStat
    }
    contributorCount {
      ...metricStat
    }
    gitPrLinkedRatio {
      ...metricStat
    }
    grimoireCreationDate
    isMaintained {
      ...metricStat
    }
    linesAddedFrequency {
      ...metricStat
    }
    linesRemovedFrequency {
      ...metricStat
    }
    locFrequency {
      ...metricStat
    }
    prCommitCount {
      ...metricStat
    }
    prCommitLinkedCount {
      ...metricStat
    }
    prCount {
      ...metricStat
    }
    prIssueLinkedCount {
      ...metricStat
    }
    prIssueLinkedRatio {
      ...metricStat
    }
  }
  summaryCommunity(beginDate: $start, endDate: $end) {
    bugIssueOpenTimeAvg {
      ...metricStat
    }
    bugIssueOpenTimeMid {
      ...metricStat
    }
    closedPrsCount {
      ...metricStat
    }
    codeReviewCount {
      ...metricStat
    }
    commentFrequency {
      ...metricStat
    }
    communitySupportScore {
      ...metricStat
    }
    grimoireCreationDate
    issueFirstReponseAvg {
      ...metricStat
    }
    issueFirstReponseMid {
      ...metricStat
    }
    issueOpenTimeAvg {
      ...metricStat
    }
    issueOpenTimeMid {
      ...metricStat
    }
    prOpenTimeAvg {
      ...metricStat
    }
    prOpenTimeMid {
      ...metricStat
    }
    updatedIssuesCount {
      ...metricStat
    }
  }
  summaryGroupActivity(beginDate: $start, endDate: $end) {
    commitFrequency {
      ...metricStat
    }
    contributionLast {
      ...metricStat
    }
    contributorCount {
      ...metricStat
    }
    grimoireCreationDate
    orgCount {
      ...metricStat
    }
    organizationsActivity {
      ...metricStat
    }
  }
}
    ${MetricStatFragmentDoc}`;
export const useSummaryQuery = <TData = SummaryQuery, TError = unknown>(
  client: GraphQLClient,
  variables?: SummaryQueryVariables,
  options?: UseQueryOptions<SummaryQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<SummaryQuery, TError, TData>(
    variables === undefined ? ['summary'] : ['summary', variables],
    fetcher<SummaryQuery, SummaryQueryVariables>(
      client,
      SummaryDocument,
      variables,
      headers
    ),
    options
  );

useSummaryQuery.getKey = (variables?: SummaryQueryVariables) =>
  variables === undefined ? ['summary'] : ['summary', variables];
useSummaryQuery.fetcher = (
  client: GraphQLClient,
  variables?: SummaryQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<SummaryQuery, SummaryQueryVariables>(
    client,
    SummaryDocument,
    variables,
    headers
  );
export const OrgSearchDocument = /*#__PURE__*/ `
    query orgSearch($keyword: String!) {
  orgFuzzySearch(keyword: $keyword) {
    orgName
  }
}
    `;
export const useOrgSearchQuery = <TData = OrgSearchQuery, TError = unknown>(
  client: GraphQLClient,
  variables: OrgSearchQueryVariables,
  options?: UseQueryOptions<OrgSearchQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<OrgSearchQuery, TError, TData>(
    ['orgSearch', variables],
    fetcher<OrgSearchQuery, OrgSearchQueryVariables>(
      client,
      OrgSearchDocument,
      variables,
      headers
    ),
    options
  );

useOrgSearchQuery.getKey = (variables: OrgSearchQueryVariables) => [
  'orgSearch',
  variables,
];
useOrgSearchQuery.fetcher = (
  client: GraphQLClient,
  variables: OrgSearchQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<OrgSearchQuery, OrgSearchQueryVariables>(
    client,
    OrgSearchDocument,
    variables,
    headers
  );
export const CollectionHottestDocument = /*#__PURE__*/ `
    query collectionHottest($ident: String!, $limit: Int) {
  collectionHottest(ident: $ident, limit: $limit) {
    label
    level
    shortCode
    status
    updatedAt
  }
}
    `;
export const useCollectionHottestQuery = <
  TData = CollectionHottestQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: CollectionHottestQueryVariables,
  options?: UseQueryOptions<CollectionHottestQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CollectionHottestQuery, TError, TData>(
    ['collectionHottest', variables],
    fetcher<CollectionHottestQuery, CollectionHottestQueryVariables>(
      client,
      CollectionHottestDocument,
      variables,
      headers
    ),
    options
  );

useCollectionHottestQuery.getKey = (
  variables: CollectionHottestQueryVariables
) => ['collectionHottest', variables];
useCollectionHottestQuery.fetcher = (
  client: GraphQLClient,
  variables: CollectionHottestQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CollectionHottestQuery, CollectionHottestQueryVariables>(
    client,
    CollectionHottestDocument,
    variables,
    headers
  );
export const CollectionListDocument = /*#__PURE__*/ `
    query collectionList($ident: String!, $level: String, $page: Int, $per: Int, $keyword: String, $sortOpts: [SortOptionInput!]) {
  collectionList(
    ident: $ident
    level: $level
    page: $page
    per: $per
    keyword: $keyword
    sortOpts: $sortOpts
  ) {
    page
    totalPage
    count
    items {
      backend
      language
      name
      openIssuesCount
      origin
      path
      shortCode
      metricActivity {
        activityScore
      }
    }
  }
}
    `;
export const useCollectionListQuery = <
  TData = CollectionListQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: CollectionListQueryVariables,
  options?: UseQueryOptions<CollectionListQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<CollectionListQuery, TError, TData>(
    ['collectionList', variables],
    fetcher<CollectionListQuery, CollectionListQueryVariables>(
      client,
      CollectionListDocument,
      variables,
      headers
    ),
    options
  );

useCollectionListQuery.getKey = (variables: CollectionListQueryVariables) => [
  'collectionList',
  variables,
];
useCollectionListQuery.fetcher = (
  client: GraphQLClient,
  variables: CollectionListQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<CollectionListQuery, CollectionListQueryVariables>(
    client,
    CollectionListDocument,
    variables,
    headers
  );
export const BulkOverviewDocument = /*#__PURE__*/ `
    query bulkOverview($labels: [String!]!) {
  bulkOverview(labels: $labels) {
    backend
    forksCount
    language
    name
    openIssuesCount
    path
    shortCode
    stargazersCount
    watchersCount
    metricActivity {
      activityScore
    }
  }
}
    `;
export const useBulkOverviewQuery = <
  TData = BulkOverviewQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: BulkOverviewQueryVariables,
  options?: UseQueryOptions<BulkOverviewQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<BulkOverviewQuery, TError, TData>(
    ['bulkOverview', variables],
    fetcher<BulkOverviewQuery, BulkOverviewQueryVariables>(
      client,
      BulkOverviewDocument,
      variables,
      headers
    ),
    options
  );

useBulkOverviewQuery.getKey = (variables: BulkOverviewQueryVariables) => [
  'bulkOverview',
  variables,
];
useBulkOverviewQuery.fetcher = (
  client: GraphQLClient,
  variables: BulkOverviewQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<BulkOverviewQuery, BulkOverviewQueryVariables>(
    client,
    BulkOverviewDocument,
    variables,
    headers
  );
export const TrendingDocument = /*#__PURE__*/ `
    query trending($level: String = "repo") {
  trending(level: $level) {
    activityScore
    collections
    fullPath
    label
    level
    logoUrl
    name
    origin
    reposCount
    shortCode
  }
}
    `;
export const useTrendingQuery = <TData = TrendingQuery, TError = unknown>(
  client: GraphQLClient,
  variables?: TrendingQueryVariables,
  options?: UseQueryOptions<TrendingQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TrendingQuery, TError, TData>(
    variables === undefined ? ['trending'] : ['trending', variables],
    fetcher<TrendingQuery, TrendingQueryVariables>(
      client,
      TrendingDocument,
      variables,
      headers
    ),
    options
  );

useTrendingQuery.getKey = (variables?: TrendingQueryVariables) =>
  variables === undefined ? ['trending'] : ['trending', variables];
useTrendingQuery.fetcher = (
  client: GraphQLClient,
  variables?: TrendingQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<TrendingQuery, TrendingQueryVariables>(
    client,
    TrendingDocument,
    variables,
    headers
  );
export const BetaMetricOverviewDocument = /*#__PURE__*/ `
    query betaMetricOverview($id: Int!, $limit: Int) {
  betaMetricOverview(id: $id, limit: $limit) {
    projectsCount
    trends {
      path
      origin
      name
      backend
      shortCode
      betaMetricScores {
        grimoireCreationDate
        score
      }
    }
  }
}
    `;
export const useBetaMetricOverviewQuery = <
  TData = BetaMetricOverviewQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: BetaMetricOverviewQueryVariables,
  options?: UseQueryOptions<BetaMetricOverviewQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<BetaMetricOverviewQuery, TError, TData>(
    ['betaMetricOverview', variables],
    fetcher<BetaMetricOverviewQuery, BetaMetricOverviewQueryVariables>(
      client,
      BetaMetricOverviewDocument,
      variables,
      headers
    ),
    options
  );

useBetaMetricOverviewQuery.getKey = (
  variables: BetaMetricOverviewQueryVariables
) => ['betaMetricOverview', variables];
useBetaMetricOverviewQuery.fetcher = (
  client: GraphQLClient,
  variables: BetaMetricOverviewQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<BetaMetricOverviewQuery, BetaMetricOverviewQueryVariables>(
    client,
    BetaMetricOverviewDocument,
    variables,
    headers
  );
export const BetaMetricsIndexDocument = /*#__PURE__*/ `
    query betaMetricsIndex($per: Int, $page: Int) {
  betaMetricsIndex(per: $per, page: $page) {
    id
    dimensionality
    desc
    extra
    metric
  }
}
    `;
export const useBetaMetricsIndexQuery = <
  TData = BetaMetricsIndexQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables?: BetaMetricsIndexQueryVariables,
  options?: UseQueryOptions<BetaMetricsIndexQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<BetaMetricsIndexQuery, TError, TData>(
    variables === undefined
      ? ['betaMetricsIndex']
      : ['betaMetricsIndex', variables],
    fetcher<BetaMetricsIndexQuery, BetaMetricsIndexQueryVariables>(
      client,
      BetaMetricsIndexDocument,
      variables,
      headers
    ),
    options
  );

useBetaMetricsIndexQuery.getKey = (
  variables?: BetaMetricsIndexQueryVariables
) =>
  variables === undefined
    ? ['betaMetricsIndex']
    : ['betaMetricsIndex', variables];
useBetaMetricsIndexQuery.fetcher = (
  client: GraphQLClient,
  variables?: BetaMetricsIndexQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<BetaMetricsIndexQuery, BetaMetricsIndexQueryVariables>(
    client,
    BetaMetricsIndexDocument,
    variables,
    headers
  );
export const BulkShortenedLabelDocument = /*#__PURE__*/ `
    query bulkShortenedLabel($labels: [LabelRowInput!]!) {
  bulkShortenedLabel(labels: $labels) {
    label
    level
    shortCode
  }
}
    `;
export const useBulkShortenedLabelQuery = <
  TData = BulkShortenedLabelQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: BulkShortenedLabelQueryVariables,
  options?: UseQueryOptions<BulkShortenedLabelQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<BulkShortenedLabelQuery, TError, TData>(
    ['bulkShortenedLabel', variables],
    fetcher<BulkShortenedLabelQuery, BulkShortenedLabelQueryVariables>(
      client,
      BulkShortenedLabelDocument,
      variables,
      headers
    ),
    options
  );

useBulkShortenedLabelQuery.getKey = (
  variables: BulkShortenedLabelQueryVariables
) => ['bulkShortenedLabel', variables];
useBulkShortenedLabelQuery.fetcher = (
  client: GraphQLClient,
  variables: BulkShortenedLabelQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<BulkShortenedLabelQuery, BulkShortenedLabelQueryVariables>(
    client,
    BulkShortenedLabelDocument,
    variables,
    headers
  );
export const MetricDashboardDocument = /*#__PURE__*/ `
    query metricDashboard($label: String!, $level: String = "repo", $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  contributorsDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    contributorAllCount
    highestContributionContributor {
      name
      origin
      type
      value
    }
    highestContributionOrganization {
      name
      origin
      type
      value
    }
    orgAllCount
  }
  issuesDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    issueCommentFrequencyMean
    issueCompletionCount
    issueCompletionRatio
    issueCount
    issueUnresponsiveCount
    issueUnresponsiveRatio
  }
  pullsDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    commitCount
    pullCompletionCount
    pullCompletionRatio
    pullCount
    pullUnresponsiveCount
    pullUnresponsiveRatio
  }
}
    `;
export const useMetricDashboardQuery = <
  TData = MetricDashboardQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: MetricDashboardQueryVariables,
  options?: UseQueryOptions<MetricDashboardQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<MetricDashboardQuery, TError, TData>(
    ['metricDashboard', variables],
    fetcher<MetricDashboardQuery, MetricDashboardQueryVariables>(
      client,
      MetricDashboardDocument,
      variables,
      headers
    ),
    options
  );

useMetricDashboardQuery.getKey = (variables: MetricDashboardQueryVariables) => [
  'metricDashboard',
  variables,
];
useMetricDashboardQuery.fetcher = (
  client: GraphQLClient,
  variables: MetricDashboardQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<MetricDashboardQuery, MetricDashboardQueryVariables>(
    client,
    MetricDashboardDocument,
    variables,
    headers
  );
export const ContributorsDetailListDocument = /*#__PURE__*/ `
    query contributorsDetailList($label: String!, $level: String = "repo", $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  contributorsDetailList(
    label: $label
    level: $level
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      contribution
      contributionTypeList {
        contribution
        contributionType
      }
      contributionWithoutObserve
      contributor
      ecologicalType
      isBot
      mileageType
      organization
    }
    origin
    page
    totalPage
  }
}
    `;
export const useContributorsDetailListQuery = <
  TData = ContributorsDetailListQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: ContributorsDetailListQueryVariables,
  options?: UseQueryOptions<ContributorsDetailListQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<ContributorsDetailListQuery, TError, TData>(
    ['contributorsDetailList', variables],
    fetcher<ContributorsDetailListQuery, ContributorsDetailListQueryVariables>(
      client,
      ContributorsDetailListDocument,
      variables,
      headers
    ),
    options
  );

useContributorsDetailListQuery.getKey = (
  variables: ContributorsDetailListQueryVariables
) => ['contributorsDetailList', variables];
useContributorsDetailListQuery.fetcher = (
  client: GraphQLClient,
  variables: ContributorsDetailListQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<ContributorsDetailListQuery, ContributorsDetailListQueryVariables>(
    client,
    ContributorsDetailListDocument,
    variables,
    headers
  );
export const EcoContributorsOverviewDocument = /*#__PURE__*/ `
    query ecoContributorsOverview($label: String!, $level: String = "repo", $filterOpts: [FilterOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  ecoContributorsOverview(
    label: $label
    level: $level
    filterOpts: $filterOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    overviewName
    subTypeName
    subTypePercentage
    topContributorDistribution {
      subCount
      subName
      subRatio
      totalCount
      subBelong
    }
  }
}
    `;
export const useEcoContributorsOverviewQuery = <
  TData = EcoContributorsOverviewQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: EcoContributorsOverviewQueryVariables,
  options?: UseQueryOptions<EcoContributorsOverviewQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<EcoContributorsOverviewQuery, TError, TData>(
    ['ecoContributorsOverview', variables],
    fetcher<
      EcoContributorsOverviewQuery,
      EcoContributorsOverviewQueryVariables
    >(client, EcoContributorsOverviewDocument, variables, headers),
    options
  );

useEcoContributorsOverviewQuery.getKey = (
  variables: EcoContributorsOverviewQueryVariables
) => ['ecoContributorsOverview', variables];
useEcoContributorsOverviewQuery.fetcher = (
  client: GraphQLClient,
  variables: EcoContributorsOverviewQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<EcoContributorsOverviewQuery, EcoContributorsOverviewQueryVariables>(
    client,
    EcoContributorsOverviewDocument,
    variables,
    headers
  );
export const OrgContributionDistributionDocument = /*#__PURE__*/ `
    query orgContributionDistribution($label: String!, $level: String = "repo", $filterOpts: [FilterOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  orgContributionDistribution(
    label: $label
    level: $level
    filterOpts: $filterOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    overviewName
    subTypeName
    subTypePercentage
    topContributorDistribution {
      subCount
      subName
      subRatio
      totalCount
      subBelong
    }
  }
}
    `;
export const useOrgContributionDistributionQuery = <
  TData = OrgContributionDistributionQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: OrgContributionDistributionQueryVariables,
  options?: UseQueryOptions<OrgContributionDistributionQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<OrgContributionDistributionQuery, TError, TData>(
    ['orgContributionDistribution', variables],
    fetcher<
      OrgContributionDistributionQuery,
      OrgContributionDistributionQueryVariables
    >(client, OrgContributionDistributionDocument, variables, headers),
    options
  );

useOrgContributionDistributionQuery.getKey = (
  variables: OrgContributionDistributionQueryVariables
) => ['orgContributionDistribution', variables];
useOrgContributionDistributionQuery.fetcher = (
  client: GraphQLClient,
  variables: OrgContributionDistributionQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<
    OrgContributionDistributionQuery,
    OrgContributionDistributionQueryVariables
  >(client, OrgContributionDistributionDocument, variables, headers);
export const OrgContributorsOverviewDocument = /*#__PURE__*/ `
    query orgContributorsOverview($label: String!, $level: String = "repo", $filterOpts: [FilterOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  orgContributorsOverview(
    label: $label
    level: $level
    filterOpts: $filterOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    overviewName
    subTypeName
    subTypePercentage
    topContributorDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
    `;
export const useOrgContributorsOverviewQuery = <
  TData = OrgContributorsOverviewQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: OrgContributorsOverviewQueryVariables,
  options?: UseQueryOptions<OrgContributorsOverviewQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<OrgContributorsOverviewQuery, TError, TData>(
    ['orgContributorsOverview', variables],
    fetcher<
      OrgContributorsOverviewQuery,
      OrgContributorsOverviewQueryVariables
    >(client, OrgContributorsOverviewDocument, variables, headers),
    options
  );

useOrgContributorsOverviewQuery.getKey = (
  variables: OrgContributorsOverviewQueryVariables
) => ['orgContributorsOverview', variables];
useOrgContributorsOverviewQuery.fetcher = (
  client: GraphQLClient,
  variables: OrgContributorsOverviewQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<OrgContributorsOverviewQuery, OrgContributorsOverviewQueryVariables>(
    client,
    OrgContributorsOverviewDocument,
    variables,
    headers
  );
export const ContributorsOverviewDocument = /*#__PURE__*/ `
    query contributorsOverview($label: String!, $level: String = "repo", $filterOpts: [FilterOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  orgContributorsDistribution(
    label: $label
    level: $level
    filterOpts: $filterOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    overviewName
    subTypeName
    subTypePercentage
    topContributorDistribution {
      subCount
      subName
      subRatio
      totalCount
      subBelong
    }
  }
}
    `;
export const useContributorsOverviewQuery = <
  TData = ContributorsOverviewQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: ContributorsOverviewQueryVariables,
  options?: UseQueryOptions<ContributorsOverviewQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<ContributorsOverviewQuery, TError, TData>(
    ['contributorsOverview', variables],
    fetcher<ContributorsOverviewQuery, ContributorsOverviewQueryVariables>(
      client,
      ContributorsOverviewDocument,
      variables,
      headers
    ),
    options
  );

useContributorsOverviewQuery.getKey = (
  variables: ContributorsOverviewQueryVariables
) => ['contributorsOverview', variables];
useContributorsOverviewQuery.fetcher = (
  client: GraphQLClient,
  variables: ContributorsOverviewQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<ContributorsOverviewQuery, ContributorsOverviewQueryVariables>(
    client,
    ContributorsOverviewDocument,
    variables,
    headers
  );
export const IssuesDetailListDocument = /*#__PURE__*/ `
    query issuesDetailList($label: String!, $level: String = "repo", $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  issuesDetailList(
    label: $label
    level: $level
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      assigneeLogin
      closedAt
      createdAt
      idInRepo
      labels
      numOfCommentsWithoutBot
      repository
      state
      timeToCloseDays
      timeToFirstAttentionWithoutBot
      title
      url
      userLogin
    }
    page
    totalPage
  }
}
    `;
export const useIssuesDetailListQuery = <
  TData = IssuesDetailListQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: IssuesDetailListQueryVariables,
  options?: UseQueryOptions<IssuesDetailListQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<IssuesDetailListQuery, TError, TData>(
    ['issuesDetailList', variables],
    fetcher<IssuesDetailListQuery, IssuesDetailListQueryVariables>(
      client,
      IssuesDetailListDocument,
      variables,
      headers
    ),
    options
  );

useIssuesDetailListQuery.getKey = (
  variables: IssuesDetailListQueryVariables
) => ['issuesDetailList', variables];
useIssuesDetailListQuery.fetcher = (
  client: GraphQLClient,
  variables: IssuesDetailListQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<IssuesDetailListQuery, IssuesDetailListQueryVariables>(
    client,
    IssuesDetailListDocument,
    variables,
    headers
  );
export const IssueCompletionDocument = /*#__PURE__*/ `
    query issueCompletion($label: String!, $level: String = "repo", $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  issuesDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    issueStateDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
    `;
export const useIssueCompletionQuery = <
  TData = IssueCompletionQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: IssueCompletionQueryVariables,
  options?: UseQueryOptions<IssueCompletionQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<IssueCompletionQuery, TError, TData>(
    ['issueCompletion', variables],
    fetcher<IssueCompletionQuery, IssueCompletionQueryVariables>(
      client,
      IssueCompletionDocument,
      variables,
      headers
    ),
    options
  );

useIssueCompletionQuery.getKey = (variables: IssueCompletionQueryVariables) => [
  'issueCompletion',
  variables,
];
useIssueCompletionQuery.fetcher = (
  client: GraphQLClient,
  variables: IssueCompletionQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<IssueCompletionQuery, IssueCompletionQueryVariables>(
    client,
    IssueCompletionDocument,
    variables,
    headers
  );
export const IssueCommentDocument = /*#__PURE__*/ `
    query issueComment($label: String!, $level: String = "repo", $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  issuesDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    issueCommentDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
    `;
export const useIssueCommentQuery = <
  TData = IssueCommentQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: IssueCommentQueryVariables,
  options?: UseQueryOptions<IssueCommentQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<IssueCommentQuery, TError, TData>(
    ['issueComment', variables],
    fetcher<IssueCommentQuery, IssueCommentQueryVariables>(
      client,
      IssueCommentDocument,
      variables,
      headers
    ),
    options
  );

useIssueCommentQuery.getKey = (variables: IssueCommentQueryVariables) => [
  'issueComment',
  variables,
];
useIssueCommentQuery.fetcher = (
  client: GraphQLClient,
  variables: IssueCommentQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<IssueCommentQuery, IssueCommentQueryVariables>(
    client,
    IssueCommentDocument,
    variables,
    headers
  );
export const PullsDetailListDocument = /*#__PURE__*/ `
    query pullsDetailList($label: String!, $level: String = "repo", $page: Int, $per: Int, $filterOpts: [FilterOptionInput!], $sortOpts: [SortOptionInput!], $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  pullsDetailList(
    label: $label
    level: $level
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      closedAt
      createdAt
      idInRepo
      labels
      mergeAuthorLogin
      numReviewComments
      repository
      reviewersLogin
      state
      timeToCloseDays
      timeToFirstAttentionWithoutBot
      title
      url
      userLogin
    }
    page
    totalPage
  }
}
    `;
export const usePullsDetailListQuery = <
  TData = PullsDetailListQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: PullsDetailListQueryVariables,
  options?: UseQueryOptions<PullsDetailListQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<PullsDetailListQuery, TError, TData>(
    ['pullsDetailList', variables],
    fetcher<PullsDetailListQuery, PullsDetailListQueryVariables>(
      client,
      PullsDetailListDocument,
      variables,
      headers
    ),
    options
  );

usePullsDetailListQuery.getKey = (variables: PullsDetailListQueryVariables) => [
  'pullsDetailList',
  variables,
];
usePullsDetailListQuery.fetcher = (
  client: GraphQLClient,
  variables: PullsDetailListQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<PullsDetailListQuery, PullsDetailListQueryVariables>(
    client,
    PullsDetailListDocument,
    variables,
    headers
  );
export const PullsCompletionDocument = /*#__PURE__*/ `
    query pullsCompletion($label: String!, $level: String = "repo", $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  pullsDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    pullStateDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
    `;
export const usePullsCompletionQuery = <
  TData = PullsCompletionQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: PullsCompletionQueryVariables,
  options?: UseQueryOptions<PullsCompletionQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<PullsCompletionQuery, TError, TData>(
    ['pullsCompletion', variables],
    fetcher<PullsCompletionQuery, PullsCompletionQueryVariables>(
      client,
      PullsCompletionDocument,
      variables,
      headers
    ),
    options
  );

usePullsCompletionQuery.getKey = (variables: PullsCompletionQueryVariables) => [
  'pullsCompletion',
  variables,
];
usePullsCompletionQuery.fetcher = (
  client: GraphQLClient,
  variables: PullsCompletionQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<PullsCompletionQuery, PullsCompletionQueryVariables>(
    client,
    PullsCompletionDocument,
    variables,
    headers
  );
export const PullsCommentDocument = /*#__PURE__*/ `
    query pullsComment($label: String!, $level: String = "repo", $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  pullsDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    pullCommentDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
    `;
export const usePullsCommentQuery = <
  TData = PullsCommentQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: PullsCommentQueryVariables,
  options?: UseQueryOptions<PullsCommentQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<PullsCommentQuery, TError, TData>(
    ['pullsComment', variables],
    fetcher<PullsCommentQuery, PullsCommentQueryVariables>(
      client,
      PullsCommentDocument,
      variables,
      headers
    ),
    options
  );

usePullsCommentQuery.getKey = (variables: PullsCommentQueryVariables) => [
  'pullsComment',
  variables,
];
usePullsCommentQuery.fetcher = (
  client: GraphQLClient,
  variables: PullsCommentQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<PullsCommentQuery, PullsCommentQueryVariables>(
    client,
    PullsCommentDocument,
    variables,
    headers
  );
export const VerifyDetailDataRangeDocument = /*#__PURE__*/ `
    query verifyDetailDataRange($label: String, $shortCode: String, $beginDate: ISO8601DateTime, $endDate: ISO8601DateTime) {
  verifyDetailDataRange(
    label: $label
    shortCode: $shortCode
    beginDate: $beginDate
    endDate: $endDate
  ) {
    status
    labelAdmin
  }
}
    `;
export const useVerifyDetailDataRangeQuery = <
  TData = VerifyDetailDataRangeQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables?: VerifyDetailDataRangeQueryVariables,
  options?: UseQueryOptions<VerifyDetailDataRangeQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<VerifyDetailDataRangeQuery, TError, TData>(
    variables === undefined
      ? ['verifyDetailDataRange']
      : ['verifyDetailDataRange', variables],
    fetcher<VerifyDetailDataRangeQuery, VerifyDetailDataRangeQueryVariables>(
      client,
      VerifyDetailDataRangeDocument,
      variables,
      headers
    ),
    options
  );

useVerifyDetailDataRangeQuery.getKey = (
  variables?: VerifyDetailDataRangeQueryVariables
) =>
  variables === undefined
    ? ['verifyDetailDataRange']
    : ['verifyDetailDataRange', variables];
useVerifyDetailDataRangeQuery.fetcher = (
  client: GraphQLClient,
  variables?: VerifyDetailDataRangeQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<VerifyDetailDataRangeQuery, VerifyDetailDataRangeQueryVariables>(
    client,
    VerifyDetailDataRangeDocument,
    variables,
    headers
  );
export const MetricModelsOverviewDocument = /*#__PURE__*/ `
    query metricModelsOverview($label: String!, $level: String = "repo", $repoType: String) {
  metricModelsOverview(label: $label, level: $level, repoType: $repoType) {
    dimension
    grimoireCreationDate
    ident
    label
    level
    mainScore
    scope
    transformedScore
    type
    updatedAt
    reposCount
    shortCode
  }
}
    `;
export const useMetricModelsOverviewQuery = <
  TData = MetricModelsOverviewQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: MetricModelsOverviewQueryVariables,
  options?: UseQueryOptions<MetricModelsOverviewQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<MetricModelsOverviewQuery, TError, TData>(
    ['metricModelsOverview', variables],
    fetcher<MetricModelsOverviewQuery, MetricModelsOverviewQueryVariables>(
      client,
      MetricModelsOverviewDocument,
      variables,
      headers
    ),
    options
  );

useMetricModelsOverviewQuery.getKey = (
  variables: MetricModelsOverviewQueryVariables
) => ['metricModelsOverview', variables];
useMetricModelsOverviewQuery.fetcher = (
  client: GraphQLClient,
  variables: MetricModelsOverviewQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<MetricModelsOverviewQuery, MetricModelsOverviewQueryVariables>(
    client,
    MetricModelsOverviewDocument,
    variables,
    headers
  );
export const MetricContributorDocument = /*#__PURE__*/ `
    query metricContributor($label: String!, $level: String = "repo", $start: ISO8601DateTime, $end: ISO8601DateTime, $repoType: String) {
  metricDomainPersona(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    activityCodeContributionPerPerson
    activityCodeContributorCount
    activityIssueContributionPerPerson
    activityIssueContributorCount
    activityObservationContributionPerPerson
    activityObservationContributorCount
    domainPersonaScore
    grimoireCreationDate
    label
    level
    shortCode
    type
  }
  metricMilestonePersona(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    activityCasualContributionPerPerson
    activityCasualContributorCount
    activityCoreContributionPerPerson
    activityCoreContributorCount
    activityRegularContributionPerPerson
    activityRegularContributorCount
    milestonePersonaScore
    grimoireCreationDate
    label
    level
    shortCode
    type
  }
  metricRolePersona(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    activityIndividualContributionPerPerson
    activityIndividualContributorCount
    activityOrganizationContributionPerPerson
    activityOrganizationContributorCount
    rolePersonaScore
    grimoireCreationDate
    label
    level
    shortCode
    type
  }
}
    `;
export const useMetricContributorQuery = <
  TData = MetricContributorQuery,
  TError = unknown
>(
  client: GraphQLClient,
  variables: MetricContributorQueryVariables,
  options?: UseQueryOptions<MetricContributorQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<MetricContributorQuery, TError, TData>(
    ['metricContributor', variables],
    fetcher<MetricContributorQuery, MetricContributorQueryVariables>(
      client,
      MetricContributorDocument,
      variables,
      headers
    ),
    options
  );

useMetricContributorQuery.getKey = (
  variables: MetricContributorQueryVariables
) => ['metricContributor', variables];
useMetricContributorQuery.fetcher = (
  client: GraphQLClient,
  variables: MetricContributorQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<MetricContributorQuery, MetricContributorQueryVariables>(
    client,
    MetricContributorDocument,
    variables,
    headers
  );
export const TokenListDocument = /*#__PURE__*/ `
    query tokenList {
  tokenList {
    expiresAt
    id
    name
    token
  }
}
    `;
export const useTokenListQuery = <TData = TokenListQuery, TError = unknown>(
  client: GraphQLClient,
  variables?: TokenListQueryVariables,
  options?: UseQueryOptions<TokenListQuery, TError, TData>,
  headers?: RequestInit['headers']
) =>
  useQuery<TokenListQuery, TError, TData>(
    variables === undefined ? ['tokenList'] : ['tokenList', variables],
    fetcher<TokenListQuery, TokenListQueryVariables>(
      client,
      TokenListDocument,
      variables,
      headers
    ),
    options
  );

useTokenListQuery.getKey = (variables?: TokenListQueryVariables) =>
  variables === undefined ? ['tokenList'] : ['tokenList', variables];
useTokenListQuery.fetcher = (
  client: GraphQLClient,
  variables?: TokenListQueryVariables,
  headers?: RequestInit['headers']
) =>
  fetcher<TokenListQuery, TokenListQueryVariables>(
    client,
    TokenListDocument,
    variables,
    headers
  );
