{
  "collaboration_development_index": {
    "title": "Collaboration Development Index",
    "desc": "Open source projects, as a typical manifestation of human group intelligence, the ability to establish collaborative development management is a key element contributing to the success of the project. And code, as the final output of a project, is the essence of the entire community's contribution. So we evaluate how well the development process is managed and how well the community does collaborative development around a series of indirect metrics related to code contribution.",
    "metrics": {
      "contributor_count": "Code Contributor Count",
      "contributor_count_desc": "Determine how many active pr creators, code reviewers, commit authors there are in the past 90 days.",
      "contributor_count_more": {
        "weight": "19.987%",
        "threshold": "1000",
        "detail": "Here we focus on the number of contributors directly related to the code contribution. As a result of this model, it identifies a well-managed community of development collaborations that are gathering more and more active code contributors. We believe that some types of the Issue are also related to code contributions, such as Bug , new requirements, and so on, and will eventually introduce code contributions. But as a general indicator, it is difficult to identify issues in a uniform way (such as a Bug type) within the specific type of each project, because each project has a different definition and understanding of the Bug type. So we made a trade-off, choosing only PR-related and Code Commit-related contributors as insight objects."
      },
      "commit_frequency": "Commit Frequency",
      "commit_frequency_desc": "Determine the average number of commits per week in the past 90 days.",
      "commit_frequency_more": {
        "weight": "16.363%",
        "threshold": "1000",
        "detail": "As an outcome indicator of this model, it identifies the sustainability and quantity of project contributions. Refers to the overall workload of the project."
      },
      "is_maintained": "Is Maintained",
      "is_maintained_desc": "Percentage of weeks with at least one code commit in the past 90 days(single repository). Percentage of code repositories with at least one code commit in the last 30 days(multiple repositories).",
      "is_maintained_more": {
        "weight": "13.853%",
        "threshold": "100%",
        "detail": "This metric is used to determine whether the repository is being maintained on an ongoing basis. An actively maintained projects may be more resistant to risks such as vulnerabilities. It is related to the Commit Frequency, but the focus is different. The former focuses on the number of code contributions during the cycle, while the latter focuses on the continuity of the code contributions. But we should not draw any direct conclusions about projects that are low on this indicator, and further insights are needed.",
        "notes": "definitions of single repository and multiple repositories are differerent."
      },
      "commit_pr_linked_ratio": "Commit PR Linked Ratio",
      "commit_pr_linked_ratio_desc": "Determine the percentage of new code commit link pull request in the last 90 days.",
      "commit_pr_linked_ratio_more": {
        "weight": "12.612%",
        "threshold": "100%",
        "detail": "This indicator is used to determine whether the code submission has gone through the PR process. To determine whether a project is open source, perhaps we can verify the License it declares. But whether open source projects use open community collaboration model to develop, and whether the community is willing to build community with open source contributors and organizational partners, it is not enough to rely on License alone. Here we examine the project's willingness to collaborate by informing contributors in an open and transparent manner about the purpose of the code submission, whether it is a PR or not, and by being reviewed."
      },
      "pr_issue_linked_ratio": "PR Issue Linked Ratio",
      "pr_issue_linked_ratio_desc": "Determine the percentage of new pull request link issues in the last 90 days.",
      "pr_issue_linked_ratio_more": {
        "weight": "11.319%",
        "threshold": "100%",
        "detail": "This metric is used to see if the code contributions are based upon open discussion, for example using the Issue. Note that not all issues result in code contributions, such as an Issue for the advisory type, there would be no code modifications generally . At the same time, we should also note that if PR goes through public discussion, Issue is not the only way, it may come from discussion in the forum. Therefore, we can not blindly pursue the high proportion of this indicator."
      },
      "code_review_ratio": "Code Review Ratio",
      "code_review_ratio_desc": "Determine the percentage of code commits with at least one reviewer (not PR creator) in the last 90 days.",
      "code_review_ratio_more": {
        "weight": "10.113%",
        "threshold": "100%",
        "detail": "If a PR is merged without being reviewed by others, the probability of a code defect or vulnerability being introduced, intentionally or unintentionally, is greatly increased. Code reviews do not fully protect against this risk, but they greatly improve the introduction of risk."
      },
      "code_merge_ratio": "Code Merge Ratio",
      "code_merge_ratio_desc": "Determine the percentage of PR Mergers and PR authors who are not the same person in the last 90 days of commits.",
      "code_merge_ratio_more": {
        "weight": "10.113%",
        "threshold": "100%",
        "detail": "This metric was observed in conjunction with the Code Review Ratio. When we introduced a third-party review, but if the PR creator intentionally or unintentionally ignored the third-party review and merged the code directly, there are also risks. It's important to note that the Code Review Ratio and Code Merge Ratio are one best practices we observe in opensource communities, but rather the only standards. We also see in some communities based on trust in some good, long-term contributors, these people are granted the right to merge their own code direclty."
      },
      "lines_of_code_frequency": "Lines of Code Frequency",
      "lines_of_code_frequency_desc": "Determine the average number of lines touched (lines added plus lines removed) per week in the past 90 days.",
      "lines_of_code_frequency_more": {
        "weight": "5.640%",
        "threshold": "300000",
        "detail": "The number of lines of source code is indeed strongly correlated with the amount of work, but it is less correlated with the value created. What forms of code can be counted in the LOC, are uncertain factors. We do not care so much about the code form(program language, configuration files etc), only use it as the description of the workload, so its weight in the overall metrics model is low."
      }
    }
  },
  "community_service_and_support": {
    "title": "Community Service and Support",
    "desc": "Community Service and Support measures the quality of services and support provided by the community as directly perceived by a developer during the contribution process. The emphasis on direct perception comes from the fact that many of the underlying services provided by the community, such as the Devops infrastructure involved in the development, are also key elements in building community services, but are difficult for the community participants to perceive. At the same time, they are also lack of a universal means of assessment. We use the metric dimension that participants perceive in community-based development to indirectly evaluate the community's entire 'Marathon-like logistic system in open source contribution'. It should be noted that this does not mean that only the metrics mentioned in the model are sufficient, in order to ensure the independence of indicators, the model has done a strong correlation index dimension reduction; So if you want to maintain the long-term positive development of the model, the community's efforts go far beyond what the current metrics contain.",
    "metrics": {
      "updated_issues_count": "Updated Issues Count",
      "updated_issues_count_desc": "Determine the number of issues updated in the last 90 days.",
      "updated_issues_count_more": {
        "weight": "19.721%",
        "threshold": "2000",
        "detail": "There are two reasons why we chose to use the number of Issue updates instead of counting the number of issues that were closed or resolved. First, there are many different types of issues, such as bugs, new function requirements, user inquiries, and CVEs. Only certain types of problems, such as CVES, must be resolved quickly. For other types of issues, quick Issue resolution is not pursued usually, and we need to communicate with the issue creator multiple times to better understand the details that takes time. If the functional requirements, from acceptance to resolution, are in accordance with the release plan, such scenarios may also take several months. Second, from the number of Issue updates, we can monitor the activity of the Issue processing. The issue update can also include reopening the issue, indicating concern about changes in the understanding of the issue."
      },
      "close_pr_count": "Close PR Count",
      "close_pr_count_desc": "The number of PR accepted and declined in the last 90 days.",
      "close_pr_count_more": {
        "weight": "19.721%",
        "threshold": "4500",
        "detail": "The more code you contribute, the more PR requests you need to close (accept or reject) . This indicates that the community is actively dealing with the PR. We use this metric together with Close PR Count as an outcome measure of the model, to provide an overall view of community service and support."
      },
      "issue_first_response": "Issue First Response",
      "issue_first_response_desc": "Average/Median first comments response (in days) for new issues created in the last 90 days. This excludes bot responses, the creator's own comment, or an action assigned by the issue. If the issue has been unanswered, the first response time is not counted.",
      "issue_first_response_more": {
        "weight": "14.372%",
        "threshold": "15 days",
        "detail": "We use this indicator to sense \"Community temperature\". And for contributors who join the community, if their questions are answered in a timely manner by the community, there's a good chance that they would be retained and continue to contribute to the community (according to Mozilla Research) . At the same time, we found that more and more robots have been used to assist with Issue processing in recent years, so we eliminated robot interference and focused on human replies."
      },
      "bug_issue_open_time": "Bug Issue Open Time",
      "bug_issue_open_time_desc": "Average/Median time (days) that bug issues have been opened for issues created in the last 90 days.",
      "bug_issue_open_time_more": {
        "weight": "12.88%",
        "threshold": "60 days",
        "notes": "Issue that labeled by Bugs.",
        "detail": "The Bug type Issue represents how efficiently the community handles issues that need to be resolved quickly. We chose to use Bug Issue to represent this type of Issues, which of course has its limitations, because not all bugs are high-priority ones, but rather than not distinguishing the Issue types, this index has some representativeness."
      },
      "pr_open_time": "PR Open Time",
      "pr_open_time_desc": "Average/Median processing time (days) for new change requests created in the last 90 days, including closed/accepted change requests and unresolved change requests.",
      "pr_open_time_more": {
        "weight": "12.88%",
        "threshold": "30 days",
        "detail": "We are seeking for the change request fast close, including code merged or rejected. Otherwise the longer it takes for a change request to be resolved, the greater the risk that merge-conflict will occur, while other change requests that depend on it will also be stalled."
      },
      "comment_frequency": "Comment Frequency",
      "comment_frequency_desc": "Determine the average number of comments per issue created in the last 90 days.",
      "comment_frequency_more": {
        "weight": "10.217%",
        "threshold": "5",
        "detail": "We would like to see the community encourage open and transparent discussion around specific bugs or requirements through Issue. The corresponding conclusions of the Issue can also be accumulated as a knowledge base and made available to more people."
      },
      "code_review_count": "Code Review Count",
      "code_review_count_desc": "Determine the average number of review comments per pull request created in the last 90 days.",
      "code_review_count_more": {
        "weight": "10.217%",
        "threshold": "8",
        "detail": "We hope that code could be reviewed publicly by PR that shows how much the community values code quality and security management, and helps new people grow quickly."
      }
    }
  },
  "community_activity": {
    "title": "Community Activity",
    "desc": "Community Activity is used to describe how active an open source community is.In order for an open source project to be sustainable, it must continue to be maintained and improved following its initial release. Activity describes how much work is being done on a project over time. High levels of community activity may indicate that a project is sustainable and low levels of community activity may indicate that a project is at risk.",
    "metrics": {
      "contributor_count": "Contributor Count",
      "contributor_count_desc": "Determine how many active code commit authors, pr authors, review participants, issue authors, and issue comments participants there are in the past 90 days.",
      "contributor_count_more": {
        "weight": "18.01%",
        "threshold": "2000",
        "notes": "when a person has more than one contributions with different roles in multiple repositories, like code commit author and issue author, we only count once.",
        "detail": "In this model, we include all types of contributors to the project hosted by code host platform(Github, Gitee etc). Because we think that project activity is made up of all types of contributing behavior, and the more active contributors there are, the more important the project is."
      },
      "commit_frequency": "Commit Frequency",
      "commit_frequency_desc": "Determine the average number of commits per week in the past 90 days.",
      "commit_frequency_more": {
        "weight": "18.01%",
        "threshold": "1000",
        "detail": "As an outcome indicator of this model, it identifies the sustainability and quantity of project contributions. Refers to the overall workload of the project."
      },
      "updated_since": "Updated Since",
      "updated_since_desc": "Determine the average time per repository since the repository was last updated (in days).",
      "updated_since_more": {
        "weight": "12.74%",
        "threshold": "0.25 months",
        "detail": "This metric is used to indicate how often the project is updated. It identifies good communities for development collaboration and management, and makes frequent iterative and incremental development to promote continuous improvement in software quality. But the industr domains of a software project also determines that the frequency of its iterations is not always as high as possible, some Linux distribution projects, for example, exhibit a very typical pattern of code iterations with periodic release planning. Here we focus on the trend of the project during each cycle, and the relative results compared with the projects belong to the similar domains."
      },
      "organization_count": "Organization Count",
      "organization_count_desc": "Number of organizations to which active code contributors belong in the past 90 days.",
      "organization_count_more": {
        "weight": "11.50%",
        "threshold": "10",
        "detail": "The more organizations that participate in the project's ongoing contribution, the more organizations that rely heavily on the project. This will greatly promote the establishment and prosperity of ecology."
      },
      "created_since": "Created Since",
      "created_since_desc": "Determine how long a repository has existed since it was created (in months).",
      "comment_frequency": "Comment Frequency",
      "comment_frequency_desc": "Determine the average number of comments per issue created in the last 90 days.",
      "comment_frequency_more": {
        "weight": "7.77%",
        "threshold": "5",
        "detail": "We would like to see the community encourage open and transparent discussion around specific bugs or requirements through Issue. The corresponding conclusions of the Issue can also be accumulated as a knowledge base and made available to more people."
      },
      "code_review_count": "Code Review Count",
      "code_review_count_desc": "Determine the average number of review comments per pull request created in the last 90 days.",
      "code_review_count_more": {
        "weight": "4.92%",
        "threshold": "8",
        "detail": "We hope that code could be reviewed publicly by PR that shows how much the community values code quality and security management, and helps new people grow quickly."
      },
      "updated_issues_count": "Updated Issues Count",
      "updated_issues_count_desc": "Determine the number of issues updated in the last 90 days.",
      "updated_issues_count_more": {
        "weight": "4.92%",
        "threshold": "2500",
        "detail": "There are two reasons why we chose to use the number of Issue updates instead of counting the number of issues that were closed or resolved. First, there are many different types of issues, such as bugs, new function requirements, user inquiries, and CVEs. Only certain types of problems, such as CVES, must be resolved quickly. For other types of issues, quick Issue resolution is not pursued usually, and we need to communicate with the issue creator multiple times to better understand the details that takes time. If the functional requirements, from acceptance to resolution, are in accordance with the release plan, such scenarios may also take several months. Second, from the number of Issue updates, we can monitor the activity of the Issue processing. The issue update can also include reopening the issue, indicating concern about changes in the understanding of the issue."
      },
      "recent_releases_count": "Recent Releases Count",
      "recent_releases_count_desc": "Determine the number of releases in the last year.",
      "recent_releases_count_more": {
        "weight": "3.18%",
        "threshold": "12",
        "detail": "The high frequency of releases indicates that software artifacts are iterating rapidly to respond to user needs. Of course, software projects belong to different industries and fields, also decided that the frequency of its iterations is not always as high as possible, for example, large platform software project release cycle is six months to a year."
      }
    }
  },
  "organization_activity": {
    "title": "Organizations Activity",
    "desc": "Organizational activity is used to assess the activity of organizations in the community (Business Companies, colleges, etc.) . For an open source project, especially for a platform-based software project, the more organizations participate in community contributions, indicating that the ecological construction of the community is towards prosperity. Because software projects provide the business value or academic value-binding that organizations need, organizations are willing to participate in community contributions using organizations identities.",
    "metrics": {
      "org_count": "Org Count",
      "org_count_desc": "Number of organizations to which active code contributors belong in the past 90 days.",
      "org_count_more": {
        "weight": "32.258%",
        "threshold": "30",
        "detail": "What we count here are the organizations that contribute code. The reason for only counting code contributions is that code contributions have the highest technical threshold compared to other types of community contributions, and are the most direct manifestation of an organization's participation in community contributions. At the same time through the analysis of the organization's categories, we can also be more in-depth insight, such as understanding of the project's north-south ecological construction, etc."
      },
      "contributor_count": "Organization Contributor Count",
      "contributor_count_desc": "Number of active code contributors with organization affiliation in the past 90 days.",
      "contributor_count_more": {
        "weight": "25.806%",
        "threshold": "300",
        "detail": "Here we count the number of code contributors with organized attributes. We are here to examine the organization's continued investment in community human resources."
      },
      "commit_frequency": "Commit Frequency",
      "commit_frequency_desc": "Definition: Determine the average number of commits with organization affiliation per week in the past 90 days.",
      "commit_frequency_more": {
        "weight": "25.81%",
        "threshold": "800",
        "detail": "This indicator is similar to the number of contributors and measures the organization's input to the community in terms of the number of code contributions."
      },
      "contribution_last": "Contribution Last",
      "contribution_last_desc": "Total contribution time of all organizations to the community in the past 90 days (weeks).",
      "contribution_last_more": {
        "weight": "16.13%",
        "threshold": "200",
        "detail": "We look at the development of ecology in terms of the time dimension, through how the organization participates and invests as time goes by."
      }
    }
  },
  "developer_attraction": {
    "title": "Developer Attraction"
  },
  "organizations_activity": {
    "title": "Organizations Activity"
  },
  "technological_advancement": {
    "title": "Technological Advancement"
  },
  "code_security_guarantee": {
    "title": "Code Security Guarantee"
  },
  "code_compliance_guarantee": {
    "title": "Code Compliance Guarantee"
  },
  "content": {
    "title": "Content"
  },
  "activity": {
    "title": "Activity"
  },
  "developer_convertion": {
    "title": "Developer Convertion"
  },
  "developer_retention": {
    "title": "Developer Retention"
  },
  "inner_connectedness": {
    "title": "Inner Connectedness"
  },
  "organization_collaboration_relationships": {
    "title": "Organization Collaboration Relationships"
  },
  "outbound_connectedness": {
    "title": "Outbound Connectedness"
  },
  "starter_project_health": {
    "title": "Starter Project Health",
    "desc": "Starter Project Health is designed to help people get started with four key project health metrics that they can expand on and customize to meet their unique needs later.",
    "metrics": {
      "time_to_first_response": "PR Time to First Response",
      "time_to_first_response_desc": "Determine the amount of time between when a PR was created and when it received the first response from a human in the past 90 days.",
      "change_request_closure_ratio_all_period": "Change Request Closure Ratio",
      "change_request_closure_ratio_all_period_desc": "Measures the ratio between the total number of open change requests and the total number of closed change requests from the beginning to now.",
      "change_request_closure_ratio_same_period": "Change Request Closure Ratio Recently Period",
      "change_request_closure_ratio_same_period_desc": "Measures the ratio between the total number of open change requests and the total number of closed change requests in the last 90 days.",
      "pr_time_to_close": "PR Time To Close",
      "pr_time_to_close_desc": "Determine the amount of time between when a PR was created and when it was closed in the past 90 days.",
      "bus_factor": "Bus Factor",
      "bus_factor_desc": "Determine the smallest number of people that make 50% of contributions in the past 90 days.",
      "release_frequency": "Release Frequency",
      "release_frequency_desc": "Determine the frequency of project releases (including point releases with bug fixes) in the last year."
    }
  }
}
